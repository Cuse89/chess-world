{"version":3,"sources":["components/dashboard-button/DashboardButton.module.scss","components/dashboard-button/index.js","utils/constants.js","components/select-game-mode/index.js","context.js","components/select-game-type/index.js","firebase/config.js","firebase/firebase.js","firebase/index.js","hooks/useGameSettings.js","components/create-game/index.js","hooks/useAvailableUsers.js","rules/pawnValidation.js","rules/rookValidation.js","rules/bishopValidation.js","rules/knightValidation.js","rules/kingValidation.js","utils/onePlayerHelpers.js","rules/getKingStatus.js","utils/helpers.js","lineups/defaultBoard.js","hooks/useGameState.js","components/dashboard-online/challenge-button/index.js","components/dashboard-online/challenge-player/index.js","components/input-form/index.js","components/dashboard-online/name-input/index.js","components/dashboard-online/user-availability/index.js","components/dashboard-online/index.js","components/dashboard/index.js","components/square/index.js","components/board/index.js","components/piece/index.js","components/fallen/index.js","components/trivia-box/index.js","components/game-types/standard/index.js","components/game-types/trapdoor/index.js","components/game-types/trivia/index.js","components/header/index.js","hooks/useUser.js","components/app/index.js","serviceWorker.js","index.js","components/board/Board.module.scss","components/dashboard-online/user-availability/UserAvailability.module.scss","components/square/Square.module.scss","components/select-game-mode/SelectGameMode.module.scss","components/create-game/CreateGame.module.scss","components/dashboard-online/challenge-player/ChallengePlayer.module.scss","components/input-form/InputForm.module.scss","components/fallen/Fallen.module.scss","components/trivia-box/TriviaBox.module.scss","components/game-types/trapdoor/TrapdoorChess.module.scss","components/select-game-type/SelectGameType.module.scss","components/dashboard/Dashboard.module.scss","components/piece/Piece.module.scss","components/header/Header.module.scss","components/app/App.module.scss"],"names":["module","exports","DashboardButton","displayText","onClick","type","fullLength","selected","spaceRight","spaceBottom","useHtml","notAvailable","className","cx","styles","root","default","error","warning","accept","dangerouslySetInnerHTML","__html","defaultProps","GAME_MODES","TECHNICAL_NAME","PRETTY","GAME_TYPES","STANDARD","TRAPDOOR","TRIVIA","EMPTY_SQUARE","player","pieceId","TRAPDOOR_AMOUNTS","GAME_MODE_HAS_GAME_TYPE","SelectGameMode","onGameModeClick","selects","React","createContext","SelectGameType","onChange","gameType","gameMode","useContext","Context","gameSettings","includes","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","firebaseApp","this","auth","database","signInWithPopup","GoogleAuthProvider","signOut","userId","key","value","ref","set","update","ids","filterFunc","users","once","then","allUsers","val","Object","keys","forEach","push","id","gameId","console","log","on","snapshot","useGameSettings","useState","setGameId","trapdoorsAmount","setGameSettings","updateGameSettings","setting","useEffect","getGameSettingsFromDb","CreateGame","onSubmit","noHeader","submitText","trapdoors","map","amount","useCompact","useAvailableUsers","allAvailableUsers","setAvailableUsers","userAvailable","setUserAvailable","availableUsers","filter","user","updateAvailableUser","a","length","getAvailableUsersFromIds","getUsersFromIds","pawnValidation","sourceCoords","destinationCoords","board","captureOnly","baselinePlayer","getSquareDetails","targetSquareOccupied","move","parseInt","eligibleColumn","rookValidation","vertical","index","forwards","position","end","bishopValidation","Number","isInteger","sWnE","up","i","coords","toString","knightValidation","kingValidation","getThreats","threatenedPlayer","threatenedPlayerCoords","threats","loopBoard","square","threateningPlayer","performValidation","getBotMoves","moves","prevSquare","nextSquare","nextBoard","getNextBoard","source","strength","getPieceProps","destination","kingStatusYou","getKingStatus","kingStatusOpponent","defenders","checkmate","decideBotMove","selectedMove","score","targetIsThreatened","targetIsDefended","scoreLog","join","wouldPutOpponentInCheckmate","moveChosen","randomMove","Math","random","kingPlayer","kingPos","availableCoords","coord","isCheckmate","split","icon","faChessPawn","validateMove","faChessRook","faChessKnight","faChessBishop","faChessKing","faChessQueen","boardCopy","JSON","parse","stringify","getUpdatedBoard","sourceSquare","destinationSquare","func","row","rowIdx","squareIdx","concat","getOpponent","turn","getUpdatedFallen","targetPiece","fallen","getTargetPiece","getUrlParam","queryString","window","location","search","URLSearchParams","get","mirrorBoard","boardMirrored","reverse","useGameState","defaultFallen","white","black","defaultBoard","inCheck","inCheckmate","gameState","setGameState","gameExists","setGameExists","isOnePlayer","isTwoPlayer","isOnlinePlay","opponent","playerColorOnline","color","game","performMove","newGameState","getNextGameState","updateGame","opponentKingStatus","handleMirroredBoard","updateBoard","newBoard","gameListener","handlePerformMove","performBotMove","nextGameState","canMovePiece","pieceColor","updateSquare","switchTurns","ChallengeButton","opponentId","updateGameRequest","joinGame","toggleShowCreateGame","games","handleStartNewGame","newGameId","uuid","settings","updateUser","button","requestsOutgoing","requestsIncoming","gameTypeText","obj","technicalName","getPrettyFromTechnicalName","getButton","ChallengePlayer","history","showCreateGame","outgoingUserId","incomingUserId","onCreateGameSubmit","availableUser","content","name","InputForm","inputType","placeholder","autoComplete","submit","validateInput","label","inputValue","setInputValue","e","preventDefault","target","disabled","NameInput","submitName","setUser","input","UserAvailability","toggleAvailability","message","available","unavailable","DashboardOnline","login","Dashboard","section","setSection","Square","memo","children","handleOnClick","isGreen","isDraggingOver","green","highlighted","Board","getSquaresChild","onDragEnd","onSquareSelect","draggedPieceCoords","setDraggedPieceCoords","rows","isEven","n","evenRow","evenSquare","isSquareDroppable","isIndicatorActive","baseline","playerColor","squares","col","getCoords","droppableId","isDropDisabled","provided","innerRef","droppableProps","topActive","baselineActive","indicatorClassname","indicator","active","onDragStart","Piece","piece","cursor","size","isDragDisabled","draggableId","draggableProps","dragHandleProps","Fallen","isDraggable","TriviaBox","difficulty","categoryId","onAnswerCorrect","onAnswerIncorrect","trivia","setTrivia","options","setOptions","answer","setAnswer","getOptionType","option","correct_answer","fetch","method","res","json","response","results","catch","err","question","randomIndex","floor","incorrect_answers","splice","getMixedOptions","answeredCorrect","setTimeout","handleAnswerQuestion","StandardChess","setMessage","getFallen","handleSetMessage","TrapdoorChess","trapdoorsSet","getPlayerColor","count","trapdoor","countTrapdoors","allTrapdoorsSet","handleTrapdoor","updatedBoard","updatedFallen","sharedState","handleFallenInTrapdoor","handleNextTurn","emptySquares","trapdoorCoords","setBotTrapdoors","TriviaChess","pendingMove","setPendingMove","handleAnswer","correct","Header","to","useUser","onAuthStateChanged","uid","App","Provider","exact","path","render","component","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,KAAO,8BAA8B,WAAa,oCAAoC,QAAU,iCAAiC,SAAW,kCAAkC,MAAQ,+BAA+B,QAAU,iCAAiC,OAAS,gCAAgC,WAAa,oCAAoC,YAAc,qCAAqC,aAAe,wC,mKCIxaC,EAAkB,SAAC,GAUlB,IAAD,EATJC,EASI,EATJA,YACAC,EAQI,EARJA,QACAC,EAOI,EAPJA,KACAC,EAMI,EANJA,WACAC,EAKI,EALJA,SACAC,EAII,EAJJA,WACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,QACAC,EACI,EADJA,aAEMC,EAAYC,KAAE,mBACjBC,IAAOC,MAAO,GADG,cAEjBD,IAAOE,QAAmB,YAATX,GAFA,cAGjBS,IAAOG,MAAiB,UAATZ,GAHE,cAIjBS,IAAOI,QAAmB,YAATb,GAJA,cAKjBS,IAAOK,OAAkB,WAATd,GALC,cAMjBS,IAAOR,WAAaA,GANH,cAOjBQ,IAAOP,SAAWA,GAPD,cAQjBO,IAAON,WAAaA,GARH,cASjBM,IAAOL,YAAcA,GATJ,cAUjBK,IAAOH,aAAeA,GAVL,IAapB,OACE,yBAAKC,UAAWA,EAAWR,QAASA,GAChCM,EAGA,yBAAKU,wBAAyB,CAAEC,OAAQlB,KAFxCA,IAQRD,EAAgBoB,aAAe,CAC7BjB,KAAM,WAQOH,I,EAAAA,ICjDFqB,EACC,CACVC,eAAgB,YAChBC,OAAQ,cAHCF,EAKC,CACVC,eAAgB,YAChBC,OAAQ,cAPCF,EASE,CACXC,eAAgB,aAChBC,OAAQ,eAICC,EAAa,CACxBC,SAAU,CACRH,eAAgB,WAChBC,OAAQ,kBAEVG,SAAU,CACRJ,eAAgB,WAChBC,OAAQ,kBAEVI,OAAQ,CACNL,eAAgB,SAChBC,OAAQ,iBAICK,EAAe,CAC1BC,OAAQ,GACRC,QAAS,IAGEC,EAAmB,CAAC,EAAG,EAAG,EAAG,GAG7BC,GAAuB,mBACjCX,EAAsBC,eAAiB,CACtCE,EAAWC,SAASH,eACpBE,EAAWE,SAASJ,eACpBE,EAAWG,OAAOL,iBAJc,cAMjCD,EAAsBC,eAAiB,CACtCE,EAAWC,SAASH,eACpBE,EAAWG,OAAOL,iBARc,cAUjCD,EAAuBC,eAAiB,CACvCE,EAAWC,SAASH,eACpBE,EAAWE,SAASJ,eACpBE,EAAWG,OAAOL,iBAbc,G,iBCTrBW,EAxBQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,gBAAH,OACrB,yBAAKxB,UAAWE,IAAOC,MACnB,gDACA,yBAAKH,UAAWE,IAAOuB,SACnB,kBAAC,EAAD,CACElC,YAAaoB,EAAsBE,OACnCrB,QAAS,kBAAMgC,EAAgBb,EAAsBC,iBACrDhB,YAAU,IAEZ,kBAAC,EAAD,CACEL,YAAaoB,EAAsBE,OACnCrB,QAAS,kBAAMgC,EAAgBb,EAAsBC,iBACrDhB,YAAU,IAEZ,kBAAC,EAAD,CACEL,YAAaoB,EAAuBE,OACpCrB,QAAS,kBAAMgC,EAAgBb,EAAuBC,iBACtDhB,YAAU,OCrBP8B,MAAMC,cAAc,M,iBCmDpBC,EA7CQ,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAE1BC,EADiBC,qBAAWC,GAA5BC,aACAH,SACR,OACE,yBAAK/B,UAAWE,IAAOC,MACpBmB,EAAwBS,GAAUI,SACjCrB,EAAWC,SAASH,iBAEpB,kBAAC,EAAD,CACErB,YAAauB,EAAWC,SAASF,OACjCrB,QAAS,kBAAMqC,EAASf,EAAWC,SAASH,iBAC5CjB,SAAUmC,IAAahB,EAAWC,SAASH,eAC3ClB,YAAU,EACVE,YAAU,EACVC,aAAW,IAGdyB,EAAwBS,GAAUI,SACjCrB,EAAWE,SAASJ,iBAEpB,kBAAC,EAAD,CACErB,YAAauB,EAAWE,SAASH,OACjCrB,QAAS,kBAAMqC,EAASf,EAAWE,SAASJ,iBAC5CjB,SAAUmC,IAAahB,EAAWE,SAASJ,eAC3ClB,YAAU,EACVE,YAAU,EACVC,aAAW,IAGdyB,EAAwBS,GAAUI,SACjCrB,EAAWG,OAAOL,iBAElB,kBAAC,EAAD,CACErB,YAAauB,EAAWG,OAAOJ,OAC/BrB,QAAS,kBAAMqC,EAASf,EAAWG,OAAOL,iBAC1CjB,SAAUmC,IAAahB,EAAWG,OAAOL,eACzClB,YAAU,EACVE,YAAU,EACVC,aAAW,M,sDClCNuC,G,qBAXQ,CACrBC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBCkDXC,EAAW,I,WAnDf,aAAe,oBACbC,gBAA0BV,GAC1BU,cACAC,KAAKC,KAAOF,OACZC,KAAKE,SAAWH,a,8KAIVC,KAAKC,OAAOE,gBAAgB,IAAIL,EAASG,KAAKG,oB,+PAI9CJ,KAAKC,OAAOI,U,6KAGNC,EAAQC,EAAKC,G,iFACnBR,KAAKE,SAASO,IAAd,gBAA2BH,EAA3B,YAAqCC,IAAOG,IAAIF,G,qLAGvCF,EAAQC,EAAKC,G,iFACtBR,KAAKE,SAASO,IAAd,gBAA2BH,EAA3B,YAAqCC,IAAOI,OAAOH,G,0LAGrCI,G,4FAAKC,E,+BAAa,kBAAM,GACtCC,EAAQ,G,SACDhB,EAASI,SACnBO,IAAI,SACJM,KAAK,SACLC,MAAK,SAAAC,GAOJ,OANAL,EAAIM,OACFC,OAAOC,KAAKR,EAAIM,OAAOG,SAAQ,SAAAf,GACzBO,EAAWP,IACbQ,EAAMQ,KAAN,eAAgBL,EAASC,MAAMZ,GAA/B,CAAwCiB,GAAIjB,QAG3CQ,K,oNAIIU,EAAQhB,G,wEACvBiB,QAAQC,IAAI,aAAcF,EAAQhB,G,SAC5BR,KAAKE,SAASO,IAAd,gBAA2Be,IAAUb,OAAOH,G,wLAG9BgB,G,0FACb1B,EAASI,SACbO,IADI,gBACSe,EADT,cAEJG,GAAG,SAAS,SAAAC,GAAQ,OAAIA,EAASV,U,0GCpDzBpB,EDyDAA,EErBA+B,EA7BS,WAAO,IAAD,EACAC,mBAAS,IADT,mBACrBN,EADqB,KACbO,EADa,OAEYD,mBAAS,CAC/C9C,SAAUpB,EAAsBC,eAChCkB,SAAUhB,EAAWC,SAASH,eAC9BmE,gBPsBmC,IO3BT,mBAErB7C,EAFqB,KAEP8C,EAFO,KAQtBC,EAAqB,SAAAC,GACzBF,EAAgB,eAAK9C,EAAN,GAAuBgD,KAkBxC,OANAC,qBAAU,WACJZ,GAVwB,SAAAA,GAC5B1B,EAASI,SAASO,IAAlB,gBAA+Be,EAA/B,cAAkDG,GAAG,SAAS,SAAAC,GAC5DM,EAAmB,eACdN,EAASV,MADI,CAEhBlC,SAAUpB,EAAuBC,qBAOnCwE,CAAsBb,KAEvB,CAACA,IAEG,aAAEU,qBAAoBH,aAAc5C,I,iBC3BvCmD,EAAa,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,WAAiB,EACCZ,IAAlDK,EADiD,EACjDA,mBAAoBnD,EAD6B,EAC7BA,SAAUiD,EADmB,EACnBA,gBAKtC,OACE,yBAAK/E,UAAWE,IAAOC,OACnBoF,GAAY,gDACd,kBAAC,EAAD,CACE1D,SAAU,SAAAC,GAAQ,OAAImD,EAAmB,CAAEnD,cAC3CA,SAAUA,IAEXA,IAAahB,EAAWE,SAASJ,gBAChC,6BACE,8DACA,yBAAKZ,UAAWE,IAAOuF,WACpBpE,EAAiBqE,KAAI,SAAAC,GAAM,OAC1B,kBAAC,EAAD,CACErC,IAAG,0BAAqBqC,GACxBpG,YAAaoG,EACbnG,QAAS,kBAAMyF,EAAmB,CAAEF,gBAAiBY,KACrDhG,SAAUgG,IAAWZ,EACrBrF,YAAU,EACVG,aAAW,EACXD,YAAU,SAMpB,kBAAC,EAAD,CACEL,YAAaiG,EACbhG,QA/BiB,WACrB8F,EAAS,CAAExD,WAAUiD,qBA+BjBrF,YAAU,EACVD,KAAK,cAMb4F,EAAW3E,aAAe,CACxBkF,YAAY,EACZL,UAAU,EACVC,WAAY,UAUCH,QCxBAQ,EApCW,SAAAxC,GAAW,IAAD,EACawB,mBAAS,IADtB,mBAC3BiB,EAD2B,KACRC,EADQ,OAEQlB,oBAAS,GAFjB,mBAE3BmB,EAF2B,KAEZC,EAFY,KAG5BC,EAAiBJ,EAAkBK,QAAO,SAAAC,GAAI,OAAIA,EAAK9B,KAAOjB,KAkB9DgD,EAAmB,uCAAG,WAAOhD,EAAQE,GAAf,SAAA+C,EAAA,sEACpBzD,EAASI,SAASO,IAAI,kBAAkBE,OAAxC,eAAkDL,EAASE,IADvC,2CAAH,wDAYzB,OARA4B,qBAAU,WACRc,EAAiBH,EAAkBJ,KAAI,SAAAU,GAAI,OAAIA,EAAK9B,MAAInC,SAASkB,MAChE,CAACA,EAAQyC,EAAkBS,SAE9BpB,qBAAU,WAxBRtC,EAASI,SACNO,IAAI,kBACJkB,GAAG,QAFN,uCAEe,WAAMoB,GAAN,eAAAQ,EAAA,6DACLE,EADK,+BAAAF,EAAA,MACsB,4BAAAA,EAAA,sEAEXzD,EAAS4D,gBAAgBX,GAFd,OAEzBjC,EAFyB,OAG/BkC,EAAkBlC,GAHa,2CADtB,uEAQH2C,IARG,sDAUThC,QAAQC,IAAR,MAVS,wDAFf,yDA0BC,IAEI,CAAEyB,iBAAgBG,sBAAqBL,kB,gBClCnCU,EAAiB,SAAC,GAMxB,IALLC,EAKI,EALJA,aACAC,EAII,EAJJA,kBACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,YACAC,EACI,EADJA,eAEM5F,EAAS6F,GAAiBL,EAAcE,GAAO1F,OAE/C8F,IAAuBH,GAEzBE,GAAiBJ,EAAmBC,GAAOzF,QAAQmF,OAAS,EAC1DW,EAAOC,SAASR,GAAgBQ,SAASP,GAE/C,GAAIM,KAAU/F,IAAW4F,EAAiB,IAAM,IAC9C,OAAQE,EAEH,GAAIC,KAAU/F,IAAW4F,EAAiB,IAAM,IAAK,CAC1D,IAAMK,EAAiBjG,IAAW4F,EAAiB,EAAI,EAGvD,OACEI,SAASR,EAAa,MAAQS,IAAmBH,EAG9C,OACLC,KAAU/F,IAAW4F,EAAiB,GAAK,IAC3CG,KAAU/F,IAAW4F,EAAiB,IAAM,MAGrCE,GChCEI,EAAiB,SAAC,GAAgD,IAA9CV,EAA6C,EAA7CA,aAAcC,EAA+B,EAA/BA,kBAAmBC,EAAY,EAAZA,MAEhE,GACEF,EAAa,KAAOC,EAAkB,IACtCD,EAAa,KAAOC,EAAkB,GAUtC,IARA,IAAMU,EAAWX,EAAa,KAAOC,EAAkB,GACnDW,EAAQD,EAAW,EAAI,EAErBE,EACJL,SAASR,EAAaY,IAAUJ,SAASP,EAAkBW,IACzDE,EAAWN,SAASR,EAAaY,IACjCG,EAAMP,SAASP,EAAkBW,IAInCC,EAAWC,GAAYC,EAAMD,GAAYC,EACzCF,EAAWC,IAAaA,IAGxB,GAAIA,IAAaN,SAASR,EAAaY,IAAS,CAU9C,IAPID,EACMT,EAAMY,GAAUb,EAAkB,IAGlCC,EAAMD,EAAkB,IAAIa,IAG5BrG,SAAWqG,IAAaC,EAChC,OAAO,EAET,GAAID,IAAaC,EACf,OAAO,EAKf,OAAO,GCrCIC,EAAmB,SAAC,GAI1B,IAHLhB,EAGI,EAHJA,aACAC,EAEI,EAFJA,kBACAC,EACI,EADJA,MAKA,GAHAF,EAAeQ,SAASR,GACxBC,EAAoBO,SAASP,GAG3BgB,OAAOC,WAAWlB,EAAeC,GAAqB,KACtDgB,OAAOC,WAAWlB,EAAeC,GAAqB,GAKtD,IAHA,IAAMkB,EAAOF,OAAOC,WAAWlB,EAAeC,GAAqB,GAC7DmB,EAAKpB,EAAeC,EAGpBoB,EAAIrB,EACRoB,EAAKC,GAAKpB,EAAoBoB,GAAKpB,EACnCmB,EAEOC,GADHF,EACW,EACA,GAEVE,GADDF,EACS,EACA,GACb,CACA,IAAIG,EAASD,EAAEE,WAEf,GAAID,EAAO,GAAK,GAAKA,EAAO,GAAK,GAAKA,EAAO,GAAK,GAAKA,EAAO,GAAK,EAEjE,OAAO,EAOT,GAJsB,IAAlBA,EAAO1B,SACT0B,EAAS,IAAMA,GAGbD,IAAMrB,EAAc,CAGtB,GADeK,GAAiBiB,EAAQpB,GAC7BzF,SAAW4G,IAAMpB,EAC1B,OAAO,EAET,GAAIoB,IAAMpB,EACR,OAAO,GAKf,OAAO,GCjDIuB,EAAmB,SAAC,GAI1B,IAHLxB,EAGI,EAHJA,aACAC,EAEI,EAFJA,kBACAC,EACI,EADJA,MAGA,QADwB,CAAC,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,GAAI,GAEtC1E,SACdgF,SAASR,GAAgBQ,SAASP,OAGtBI,GAAiBJ,EAAmBC,ICXzCuB,GAAiB,SAAC,GAA8C,IAA7CzB,EAA4C,EAA5CA,aAAcC,EAA8B,EAA9BA,kBAAmBC,EAAW,EAAXA,MAE/D,QADwB,CAAC,IAAK,GAAI,IAAK,GAAI,GAAI,EAAG,GAAI,EAAG,GACrC1E,SAASgF,SAASR,GAAgBQ,SAASP,OAC/CI,GAAiBJ,EAAmBC,ICGzCwB,GAAa,SAACC,EAAkBC,EAAwB1B,GACnE,IAAI2B,EAAU,GAuBd,OArBAC,GAAU5B,GAAO,YAAyB,IAAtB6B,EAAqB,EAArBA,OAAQT,EAAa,EAAbA,OACpBU,EACJD,EAAOvH,QAAUuH,EAAOvH,SAAWmH,GAAoBI,EAAOvH,OAC5DwH,IAKAC,GAAkB,CAChBjC,aALiBsB,EAMjBrB,kBAAmB2B,EACnB1B,QACA1F,OAAQwH,EACR7B,aAAa,EACbC,eAAgB,WAGlByB,EAAQnE,KAAKqE,EAAOtH,aAInBoH,GAGIK,GAAc,SAAAhC,GACzB,IAAIiC,EAAQ,GA2DZ,OAzDAL,GAAU5B,GAAO,YAAqC,IAA1BkC,EAAyB,EAAjCL,OAAoBT,EAAa,EAAbA,OACtC,GAA0B,UAAtBc,EAAW5H,OAAoB,CAEjC,IAAMwF,EAAesB,EAGrBQ,GAAU5B,GAAO,YAAqC,IAAlCoB,EAAiC,EAAjCA,OAAgBe,EAAiB,EAAzBN,OACpB9B,EAAoBqB,EAG1B,GACEW,GAAkB,CAChB/B,QACA1F,OAAQ,QACRwF,eACAC,oBACAG,eAAgB,UAElB,CACA,IAAMkC,EAAYC,GAChBrC,EACAF,EACAC,GAGEM,EAAO,CACTiC,OAAQ,CACN/H,QAAS2H,EAAW3H,QACpB6G,OAAQtB,EACRyC,SAAUC,GAAcN,EAAW3H,SAASgI,SAC5CZ,QAASH,GAAW,QAAS1B,EAAcE,IAE7CyC,YAAa,CACXlI,QAAS4H,EAAW5H,SAAW4H,EAAW5H,QAC1C6G,OAAQrB,EACRwC,SACEJ,EAAW5H,SACXiI,GAAcL,EAAW5H,SAASgI,SACpCG,cAAeC,GAAcP,EAAW,QAAS,SACjDQ,mBAAoBD,GAAcP,EAAW,QAAS,SACtDT,QAASH,GAAW,QAASzB,EAAmBqC,GAChDS,UAAWrB,GAAW,QAASzB,EAAmBqC,KAKlD/B,EAAKoC,YAAYF,SAAW,GAAKlC,EAAKoC,YAAYK,UACpDb,EAAMzE,KAAK6C,GACD8B,EAAW7H,QACrB2H,EAAMzE,KAAK6C,WAOrB1C,QAAQC,IAAI,QAASqE,GACdA,GAGIc,GAAgB,SAACd,GAC5B,IAAIe,EAAe,CAAEC,OAAQ,KAmE7B,GAjEAhB,EAAM1E,SAAQ,SAAA8C,GACZ,IAAI4C,EAAQ5C,EAAKoC,YAAYF,UAAY,EACnCW,EAAqB7C,EAAKoC,YAAYd,QAAQjC,OAAS,EACvDyD,EAAmB9C,EAAKoC,YAAYI,UAAUnD,OAAS,EACvD0D,EAAW,GAGb/C,EAAKiC,OAAOX,QAAQjC,OAAS,IAC/BuD,GAAS5C,EAAKiC,OAAOC,SACrBa,EAAS5F,KAAT,YACO6C,EAAKiC,OAAOC,SADnB,2CAGA5E,QAAQC,IAAR,UAEIyC,EAAKiC,OAAO/H,QAFhB,uCAGiC8F,EAAKiC,OAAOX,QAAQ0B,UAIX,cAAxChD,EAAKoC,YAAYG,qBACnBvC,EAAKiD,6BAA8B,EACnCF,EAAS5F,KAAK,eAG4B,UAAxC6C,EAAKoC,YAAYG,oBAInBjF,QAAQC,IAAR,UACKyC,EAAKiC,OAAO/H,QADjB,2CAKE2I,IACFD,GAAS5C,EAAKiC,OAAOC,SACrBa,EAAS5F,KAAT,YAEI6C,EAAKiC,OAAOC,SAFhB,gEAG0DlC,EAAKoC,YAAYd,QAAQ0B,SAI/EF,IACFF,GAAS5C,EAAKiC,OAAOC,SACrBa,EAAS5F,KAAT,YACO6C,EAAKiC,OAAOC,SADnB,sDAMJlC,EAAK4C,MAAQA,EACb5C,EAAK+C,SAAWA,EAASC,OACzB1F,QAAQC,IAAR,UACKyC,EAAKiC,OAAO/H,QADjB,eAC+B8F,EAAKoC,YAAYrB,OADhD,mBACiE6B,OAInEhB,EAAM1E,SAAQ,SAAA8C,IACRA,EAAKiD,6BAEEjD,EAAK4C,MAAQD,EAAaC,SADnCD,EAAe3C,MAMQ,IAAvB2C,EAAaC,MAGf,IADA,IAAIM,GAAa,GACTA,GAAY,CAClB,IAAMC,EAAavB,EAAM3B,SAASmD,KAAKC,SAAWzB,EAAMvC,SAC/B,IAArB8D,EAAWP,QACbD,EAAeQ,EACfD,GAAa,GAKnB,OAAOP,GC7KIL,GAAgB,SAAC3C,EAAO2D,GACnC,IAAIC,EAAU,GAMdhC,GAAU5B,GALS,SAAC,GAAwB,IAAtB6B,EAAqB,EAArBA,OAAQT,EAAa,EAAbA,OACxBS,EAAOvH,SAAWqJ,GAAiC,SAAnB9B,EAAOtH,UACzCqJ,EAAUxC,MAmCd,GA9BoB,WAClB,IACIyC,EAAkB,GAyBtB,MA1BwB,CAAC,IAAK,GAAI,IAAK,GAAI,GAAI,EAAG,GAAI,EAAG,GAGzCtG,SAAQ,SAAAuG,GACtB,IAAI/D,GAAqB6D,EAAUE,GAAOzC,WAExCE,GAAe,CACbzB,aAAc8D,EACd7D,oBACAC,QACA1F,OAAQqJ,KAGVE,EAAgBrG,KAAKuC,OAKzB8D,EAAkBA,EAAgBvE,QAAO,SAAAS,GAMvC,OALgByB,GACdmC,EACA5D,EACAsC,GAAarC,EAAO4D,EAAS7D,IAEhBL,OAAS,MAEHA,OAAS,EAG9BqE,GACF,MAAO,YAMT,OAFSvC,GAAWmC,EAAYC,EAAS5D,GAAON,OAAS,GAGhD,SCpCE8C,GAAgB,SAAAjI,GAC3B,OAAQA,GAAWA,EAAQyJ,MAAM,KAAK,IACpC,IAAK,OACH,MAAO,CACLC,KAAMC,IACNC,aAActE,EACd0C,SAAU,GAEd,IAAK,OACH,MAAO,CACL0B,KAAMG,IACND,aAAc3D,EACd+B,SAAU,GAEd,IAAK,SACH,MAAO,CACL0B,KAAMI,IACNF,aAAc7C,EACdiB,SAAU,GAEd,IAAK,SACH,MAAO,CACL0B,KAAMK,IACNH,aAAcrD,EACdyB,SAAU,GAEd,IAAK,OACH,MAAO,CACL0B,KAAMM,IACNJ,aAAc5C,GACdgB,SAAU,IAEd,IAAK,QACH,MAAO,CACL0B,KAAMO,IACNL,aAAc,WACZ,GAAI3D,EAAc,WAAd,cAA6BM,EAAgB,WAAhB,aAC/B,OAAO,GAGXyB,SAAU,GAEd,QACE,OAAO,OAQApC,GAAmB,SAACiB,EAAQpB,GACvC,QACEoB,EAAO,GAAK,GACZA,EAAO,GAAK,GACZA,EAAO,GAAK,GACZA,EAAO,GAAK,GACZA,EAAS,GACTA,EAAS,KAIJpB,EAAMoB,EAAO,IAAIA,EAAO,KAGpBiB,GAAe,SAACrC,EAAOF,EAAcC,GAChD,IAAI0E,EAAYC,KAAKC,MAAMD,KAAKE,UAAU5E,IAM1C,OAJAyE,EAAU1E,EAAkB,IAAIA,EAAkB,IAChD0E,EAAU3E,EAAa,IAAIA,EAAa,IAE1C2E,EAAU3E,EAAa,IAAIA,EAAa,IAAMzF,EACvCoK,GAGII,GAAkB,SAAC7E,EAAOoB,EAAQ1E,GAC7C,IAAI+H,EAAYC,KAAKC,MAAMD,KAAKE,UAAU5E,IAE1C,OADAyE,EAAUrD,EAAO,IAAIA,EAAO,IAAM1E,EAC3B+H,GAGI1C,GAAoB,SAAC,GAO3B,IANL/B,EAMI,EANJA,MACA1F,EAKI,EALJA,OACAwF,EAII,EAJJA,aACAC,EAGI,EAHJA,kBACAG,EAEI,EAFJA,eACAD,EACI,EADJA,YAGM6E,EAAe3E,GAAiBL,EAAcE,GAC9C+E,EAAoB5E,GAAiBJ,EAAmBC,GAG9D,IAAK+E,EACH,OAAO,EAGT,GAAIA,EAAkBzK,SAAWA,EAC/B,OAAO,EAGT,IACGkI,GAAcsC,EAAavK,SAAS4J,aAAa,CAChDrE,eACAC,oBACAC,QACAE,iBACAD,gBAGF,OAAO,EAET,IAAMmC,EAAYC,GAAarC,EAAOF,EAAcC,GAGpD,QADuD,UAArD4C,GAAcP,EAAW9H,EAAQ4F,KAIxB0B,GAAY,SAAC5B,EAAOgF,GAAR,OACvBhF,EAAMzC,SAAQ,SAAC0H,EAAKC,GAClBD,EAAI1H,SAAQ,SAACsE,EAAQsD,GACnB,IAAM/D,EAAS8D,EAAO7D,WAAW+D,OAAOD,GACxCH,EAAK,CAAEnD,SAAQT,kBAIRiE,GAAc,SAAAC,GAAI,MAAc,UAATA,EAAmB,QAAU,SAEpDC,GAAmB,SAACC,EAAaC,GAAY,IAChDnL,EAAoBkL,EAApBlL,OAAQC,EAAYiL,EAAZjL,QAChB,OAAKD,EAGE,eACFmL,EADL,eAEGnL,EAASC,EAAO,sBAAOkL,EAAOnL,IAAd,CAAuBkL,IAAvB,YAA0CC,EAAOnL,MAJ3DmL,GAQEC,GAAiB,SAAC1F,EAAOD,GAAR,OAC5BC,EAAMD,EAAkB,IAAIA,EAAkB,KASnC4F,GAAc,SAAAlJ,GACzB,IAAMmJ,EAAcC,OAAOC,SAASC,OAEpC,OADkB,IAAIC,gBAAgBJ,GACrBK,IAAIxJ,IAGVyJ,GAAc,SAAAlG,GACzB,IAAIyE,EAAYC,KAAKC,MAAMD,KAAKE,UAAU5E,IACpCmG,EAAgB,YAAI1B,GAAW2B,UAErC,OADAD,EAAc5I,SAAQ,SAAA0H,GAAG,OAAIA,EAAImB,aAC1BD,G,UC7KM,IACb,CACE,CAAE7L,OAAQ,QAASC,QAAS,UAC5B,CAAED,OAAQ,QAASC,QAAS,YAC5B,CAAED,OAAQ,QAASC,QAAS,YAC5B,CAAED,OAAQ,QAASC,QAAS,QAC5B,CAAED,OAAQ,QAASC,QAAS,SAC5B,CAAED,OAAQ,QAASC,QAAS,YAC5B,CAAED,OAAQ,QAASC,QAAS,YAC5B,CAAED,OAAQ,QAASC,QAAS,WAG9B,CACE,CAAED,OAAQ,QAASC,QAAS,UAC5B,CAAED,OAAQ,QAASC,QAAS,UAC5B,CAAED,OAAQ,QAASC,QAAS,UAC5B,CAAED,OAAQ,QAASC,QAAS,UAC5B,CAAED,OAAQ,QAASC,QAAS,UAC5B,CAAED,OAAQ,QAASC,QAAS,UAC5B,CAAED,OAAQ,QAASC,QAAS,UAC5B,CAAED,OAAQ,QAASC,QAAS,WAE9B,CACEF,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,GAEF,CACEA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,GAEF,CACEA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,GAEF,CACEA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,GAEF,CACE,CAAEC,OAAQ,QAASC,QAAS,UAC5B,CAAED,OAAQ,QAASC,QAAS,UAC5B,CAAED,OAAQ,QAASC,QAAS,UAC5B,CAAED,OAAQ,QAASC,QAAS,UAC5B,CAAED,OAAQ,QAASC,QAAS,UAC5B,CAAED,OAAQ,QAASC,QAAS,UAC5B,CAAED,OAAQ,QAASC,QAAS,UAC5B,CAAED,OAAQ,QAASC,QAAS,WAE9B,CACE,CAAED,OAAQ,QAASC,QAAS,UAC5B,CAAED,OAAQ,QAASC,QAAS,YAC5B,CAAED,OAAQ,QAASC,QAAS,YAC5B,CAAED,OAAQ,QAASC,QAAS,QAC5B,CAAED,OAAQ,QAASC,QAAS,SAC5B,CAAED,OAAQ,QAASC,QAAS,YAC5B,CAAED,OAAQ,QAASC,QAAS,YAC5B,CAAED,OAAQ,QAASC,QAAS,YCiHjB8L,GApLM,SAAC,GAAkC,IAAhCnL,EAA+B,EAA/BA,SAAUwC,EAAqB,EAArBA,OAAQlB,EAAa,EAAbA,OAElC8J,EAAgB,CACpBC,MAAO,GACPC,MAAO,IAJ4C,EAOnBxI,mBAAS,CACzCgC,MAAOyG,GACPnB,KARkB,QASlBG,OAAQa,EACRI,QAAS,GACTC,YAAa,KAZsC,mBAO9CC,EAP8C,KAOnCC,EAPmC,KAcrDlJ,QAAQC,IAAI,CAACgJ,cAdwC,MAgBjB5I,oBAAS,GAhBQ,mBAgB9C8I,EAhB8C,KAgBlCC,EAhBkC,KAkB7C/G,EAA+B4G,EAA/B5G,MAAOsF,EAAwBsB,EAAxBtB,KAAMG,EAAkBmB,EAAlBnB,OAAQzI,EAAU4J,EAAV5J,MAEvBgK,EAAc9L,IAAapB,EAAsBC,eACjDkN,EAAc/L,IAAapB,EAAsBC,eACjDmN,EAAehM,IAAapB,EAAuBC,eACnDoN,EAAW9B,GAAYC,GACvB8B,EAAoBpK,GAASA,EAAMR,GAAQ6K,MAC3CnH,EACJ8G,GAAeC,EAAc,QAAUG,EA1BY,4CA4BrD,sBAAA3H,EAAA,sDACMyH,GACFlL,EAASI,SAASO,IAAlB,gBAA+Be,IAAUG,GAAG,QAA5C,uCAAqD,WAAMC,GAAN,eAAA2B,EAAA,uDAC7C6H,EAAOxJ,EAASV,OAEpByJ,EAAa,eACRS,EADO,CAEVtH,MAC+B,UAA7BsH,EAAKtK,MAAMR,GAAQ6K,MACfnB,GAAYoB,EAAKtH,OACjBsH,EAAKtH,MACXyF,OAAQ6B,EAAK7B,OACT,CACEe,MAAOc,EAAK7B,OAAOe,OAAS,GAC5BD,MAAOe,EAAK7B,OAAOc,OAAS,IAE9BD,EACJtJ,MAAOsK,EAAKtK,MACZ0J,QAASY,EAAKZ,QACdC,YAAaW,EAAKX,eAGpBI,GAAc,GApBmC,2CAArD,uDAFJ,4CA5BqD,sBA8DrD,SAAS5C,EAAarE,EAAcC,GAClC,OAAOgC,GAAkB,CACvB/B,QACAF,eACAC,oBACAzF,OAAQgL,EACRpF,mBApEiD,SAwEtCqH,EAxEsC,gFAwErD,WAA2BzH,EAAcC,GAAzC,eAAAN,EAAA,yDACQ+H,EAAeC,EAAiB3H,EAAcC,IAChDiH,IAAeC,EAFrB,gBAGIJ,EAAaW,GAHjB,2BAIaN,EAJb,0CAMYlL,EAAS0L,WAAWhK,EAAQ8J,GANxC,yDAQM7J,QAAQC,IAAR,MARN,2DAxEqD,sBAqFrD,SAAS6J,EAAiB3H,EAAcC,GACtC,IAAMqC,EAAYC,GAAarC,EAAOF,EAAcC,GAC9C4H,EAAqBhF,GAAcP,EAAW+E,GACpD,MAAO,CACLnH,MAAO4H,EAAoBxF,GAC3BkD,KAA6B,cAAvBqC,EAAqCR,EAAW7B,EACtDG,OAAQF,GACNG,GAAe1F,EAAOD,GACtB0F,GAEFiB,QAAgC,UAAvBiB,EAAiCR,EAAW,GACrDR,YAAoC,cAAvBgB,EAAqCR,EAAW,IAkCjE,SAASS,EAAoB5H,GAC3B,MAA0B,UAAnBE,EAA6BgG,GAAYlG,GAASA,EAG3D,SAAS6H,EAAYC,GACfZ,EACFlL,EAAS0L,WAAWhK,EAAQ,CAAEsC,MAAO4H,EAAoBE,KAEzDjB,EAAa,eAAKD,EAAN,CAAiB5G,MAAO8H,KA1Ia,4CA8IrD,4BAAArI,EAAA,yDACQ+H,EADR,eAEOZ,EAFP,CAGI5G,MAAO4H,EAAoB5H,GAC3BsF,KAAMD,GAAYC,MAEhB0B,IAAeC,EANrB,gBAOIJ,EAAaW,GAPjB,2BAQaN,EARb,0CAUYlL,EAAS0L,WAAWhK,EAAQ8J,GAVxC,yDAYM7J,QAAQC,IAAR,MAZN,2DA9IqD,sBAqKrD,OANAU,qBAAU,WACJZ,GAAUlB,GAhKqC,mCAiKjDuL,KAED,CAACrK,EAAQlB,EAAQtB,IAEb,CACL0L,YACAC,eACAmB,kBAhHF,SAA2BlI,EAAcC,GACnCoE,EAAarE,EAAcC,IAC7BwH,EAAYzH,EAAcC,IA+G5BoE,eACA8D,eAtEF,WACE,IAAMjF,EAAeD,GAAcf,GAAYhC,IAC/CrC,QAAQC,IAAI,eAAgBoF,GAC5B,IAAMkF,EAAgBT,EACpBzE,EAAaV,OAAOlB,OACpB4B,EAAaP,YAAYrB,QAE3ByF,EAAaqB,IAgEbC,aA7DF,SAAsBC,GACpB,GAAI9C,IAAS8C,EAAY,CACvB,GAAIpB,EACF,MAAgB,UAAT1B,EAET,GAAI2B,EACF,OAAO,EAET,GAAIC,EACF,OAAOlK,GAASA,EAAMR,GAAQ6K,QAAU/B,EAG5C,OAAO,GAkDP+C,aA/CF,SAAsBjH,EAAQ1E,GAE5BmL,EADkBhD,GAAgB7E,EAAOoB,EAAQ1E,KA+CjD6K,cACAM,cACAf,aACAwB,YAhLmD,6CCkFxCC,GAxFS,SAAC,GAKlB,IAJLC,EAII,EAJJA,WACAC,EAGI,EAHJA,kBACAC,EAEI,EAFJA,SACAC,EACI,EADJA,qBAEQpJ,EAASpE,qBAAWC,GAApBmE,KAEAqH,EAAcP,GAAa,CACjCnL,SAAUpB,EAAuBC,eACjC2D,OAAQ6B,EAAKqJ,OAASrJ,EAAKqJ,MAAMJ,GACjChM,OAAQ+C,EAAK9B,KAHPmJ,UAMFiC,EAAkB,uCAAG,WAAOL,EAAYnN,GAAnB,iBAAAoE,EAAA,6DACnBqJ,EADmB,eACCC,eAAO/E,MAAM,KAAK,IADnB,kBAGjBhI,EAAS0L,WAAWoB,EAAW,CACnC9L,OAAK,mBACFuC,EAAK9B,GAAK,CACT4J,MAAO,UAFN,cAIFmB,EAAa,CACZnB,MAAO,UALN,GAQLrH,MAAOyG,GACPnB,KAAM,QACN0D,SAAS,eAAK3N,KAdO,uBAgBjBoN,EAAkBD,EAAYjJ,EAAK9B,GAAI,MAhBtB,uBAiBjBzB,EAASiN,WAAW1J,EAAK9B,GAAI,QAA7B,eAAyC+K,EAAaM,IAjBrC,wBAkBjB9M,EAASiN,WAAWT,EAAY,QAAhC,eAA4CjJ,EAAK9B,GAAKqL,IAlBrC,0DAoBvBnL,QAAQC,IAAR,MApBuB,QAsBzB8K,EAASrN,EAAaJ,SAAU6N,GAtBP,0DAAH,wDAuExB,OAAO,kBAAC,WAAD,KA9CW,WAChB,IAAII,EACF,kBAAC,EAAD,CACExQ,YAAa,YACbC,QAAS,kBAAMgQ,GAAqB,IACpC9P,YAAU,IAad,GAVI0G,EAAK4J,kBAAoB5J,EAAK4J,iBAAiBX,KACjDU,EACE,kBAAC,EAAD,CACExQ,YAAa,yBACbC,QAAS,kBAAM8P,EAAkBlJ,EAAK9B,GAAI+K,EAAY,OACtD5P,KAAM,UACNC,YAAU,KAIZ0G,EAAK6J,kBAAoB7J,EAAK6J,iBAAiBZ,GAAa,CAC9D,IAAMnN,EAAekE,EAAK6J,iBAAiBZ,GACrCvN,EAAWI,EAAaJ,SACxBoO,EHyF8B,SAACC,EAAKC,GAC9C,IAAM9M,EAAMY,OAAOC,KAAKgM,GAAKhK,QAC3B,SAAA7C,GAAG,OAAI6M,EAAI7M,GAAK1C,iBAAmBwP,KAErC,OAAOD,EAAI7M,GAAKzC,OG7FSwP,CAA2BvP,EAAYgB,GAC5DiO,EACE,kBAAC,EAAD,CACExQ,YAAW,mBAAc2Q,EAAd,4BACX1Q,QAAS,kBAAMkQ,EAAmBL,EAAYnN,IAC9CzC,KAAM,SACNC,YAAU,IAIhB,GAAI+N,EAAU5J,MAAO,CAEnB,IAAM/B,EAAW2L,EAAUoC,SAAS/N,SACpCiO,EACE,kBAAC,EAAD,CACExQ,YAAa,8BACbC,QAAS,kBAAM+P,EAASzN,EAAUsE,EAAKqJ,MAAMJ,KAC7C5P,KAAM,SACNC,YAAU,IAIhB,OAAOqQ,EAGSO,K,oBCtBLC,GAjES,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACjBpK,EAASpE,qBAAWC,GAApBmE,KACAF,EAAmBL,EAAkBO,EAAK9B,IAA1C4B,eAF+B,EAGQrB,oBAAS,GAHjB,mBAGhC4L,EAHgC,KAGhBjB,EAHgB,KAKjCF,EAAiB,uCAAG,WAAOoB,EAAgBC,EAAgBpN,GAAvC,SAAA+C,EAAA,+EAEhBzD,EAASiN,WAAWa,EAAgB,mBAApC,eACHD,EAAiBnN,IAHE,uBAKhBV,EAASiN,WAAWY,EAAgB,mBAApC,eACHC,EAAiBpN,IANE,uDAStBiB,QAAQC,IAAR,MATsB,yDAAH,0DAajB8K,EAAW,SAACzN,EAAUyC,GAC1BiM,EAAQnM,KAAR,WAAiBvC,EAAjB,iBAAkCyC,KAG9BqM,EAAkB,uCAAG,WAAOf,EAAUR,GAAjB,SAAA/I,EAAA,6DACzBkJ,GAAqB,GADI,kBAGjBF,EAAkBlJ,EAAK9B,GAAI+K,EAAV,eAA0BQ,IAH1B,sDAKvBrL,QAAQC,IAAR,MALuB,wDAAH,wDASxB,OACE,yBAAKzE,UAAWE,KAAOC,MAEpB+F,EAAeK,OAAS,GACvB,6BACE,4CACCL,EAAeR,KAAI,SAAAmL,GAAa,OAC/B,yBAAKvN,IAAG,oBAAeuN,GAAiB7Q,UAAWE,KAAO4Q,SACxD,2BAAID,EAAcE,OAChBN,GACA,kBAAC,GAAD,CACEpB,WAAYwB,EAAcvM,GAC1BkL,qBAAsBA,EACtBF,kBAAmBA,EACnBC,SAAUA,IAGbkB,GACC,kBAAC,EAAD,CACEnL,SAAU,SAAAuK,GAAQ,OAChBe,EAAmBf,EAAUgB,EAAcvM,KAE7CiB,UAAQ,EACRC,WAAW,mC,oBC1DvBwL,GAAY,SAAC,GAQZ,IAPLC,EAOI,EAPJA,UACAC,EAMI,EANJA,YACAC,EAKI,EALJA,aACAC,EAII,EAJJA,OACA5L,EAGI,EAHJA,WACA6L,EAEI,EAFJA,cACAC,EACI,EADJA,MACI,EACgCzM,mBAAS,IADzC,mBACG0M,EADH,KACeC,EADf,KAQJ,OACE,0BAAMxR,UAAWE,KAAOC,KAAMmF,SANf,SAAAmM,GACfA,EAAEC,iBACFN,EAAOG,GACPC,EAAc,MAIXF,GAAS,+BAAQA,GAClB,2BACE7R,KAAMwR,EACNpP,SAXW,SAAA4P,GAAC,OAAID,EAAcC,EAAEE,OAAOpO,QAYvC2N,YAAaA,EACb3N,MAAOgO,EACPJ,aAAcA,IAEhB,2BACEnR,UAAWE,KAAOkR,OAClB3R,KAAK,SACL8D,MAAOiC,EACPoM,UAAWP,EAAcE,OAMjCP,GAAUtQ,aAAe,CACvB2Q,cAAe,kBAAM,IAORL,UCrBAa,GAvBG,SAAC,GAAmC,IAAjCzL,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,oBACnByL,EAAU,uCAAG,WAAMf,GAAN,SAAAzK,EAAA,+EAETzD,EAASkP,QAAQ3L,EAAK9B,GAAI,OAAQyM,GAFzB,uBAGT1K,EAAoBD,EAAK9B,IAAI,GAHpB,uDAKfE,QAAQC,IAAR,MALe,yDAAH,sDAShB,OACE,6BACE,kBAAC,GAAD,CACEwM,UAAU,OACVC,YAAY,sBACZ1L,WAAW,KACX4L,OAAQU,EACRT,cAAe,SAAAW,GAAK,OAAIA,EAAMzL,OAAS,O,oBCUhC0L,GA3BU,SAAC,GAAkD,IAAD,EAA/C7L,EAA+C,EAA/CA,KAAMJ,EAAyC,EAAzCA,cAAeK,EAA0B,EAA1BA,oBACzC6L,EAAkB,uCAAG,sBAAA5L,EAAA,+EAEjBD,EAAoBD,EAAK9B,IAAI0B,GAAgB,MAF5B,sDAIvBxB,QAAQC,IAAR,MAJuB,wDAAH,qDAQxB,OACE,6BACE,uBAAGzE,UAAWE,KAAOiS,SAArB,SACS/L,EAAK2K,KADd,MACuB,IACrB,0BACE/Q,UAAWC,KAAE,mBACVC,KAAOkS,UAAYpM,GADT,cAEV9F,KAAOmS,aAAerM,GAFZ,IAIbxG,QAAS0S,GAERlM,EAAgB,YAAc,kBC2B1BsM,GA1CS,SAAC,GAAiB,IAAf9B,EAAc,EAAdA,QACjBpK,EAASpE,qBAAWC,GAApBmE,KAD+B,EAGQP,EAC7CO,GAAQA,EAAK9B,IADP0B,EAH+B,EAG/BA,cAAeK,EAHgB,EAGhBA,oBAIjBkM,EAAK,uCAAG,sBAAAjM,EAAA,+EAEJzD,EAAS0P,QAFL,sDAIV/N,QAAQC,IAAR,MAJU,wDAAH,qDAcX,OANAU,qBAAU,WACHiB,GACHmM,MAED,CAACnM,IAEAA,EAEA,6BACE,2CACCA,EAAK2K,MACJ,kBAAC,GAAD,CACE3K,KAAMA,EACNJ,cAAeA,EACfK,oBAAqBA,KAGvBD,EAAK2K,MACL,kBAAC,GAAD,CAAW3K,KAAMA,EAAMC,oBAAqBA,IAE7CD,EAAK2K,MAAQ/K,GAAiB,kBAAC,GAAD,CAAiBwK,QAASA,KAIxD,M,oBCRMgC,GA9BG,SAAC,GAAiB,IAAfhC,EAAc,EAAdA,QAEXvL,EADiBjD,qBAAWC,GAA5BC,aACA+C,mBAFyB,EAGHJ,mBAAS,kBAHN,mBAG1B4N,EAH0B,KAGjBC,EAHiB,KAmBjC,OACE,yBAAK1S,UAAWE,KAAOC,MACR,mBAAZsS,GACC,kBAAC,EAAD,CAAgBjC,QAASA,EAAShP,gBAjBhB,SAAAO,GACtBkD,EAAmB,CAAElD,aACjBA,IAAapB,EAAuBC,eACtC8R,EAAW,UAEXA,EAAW,iBAcE,WAAZD,GAAwB,kBAAC,GAAD,CAAiBjC,QAASA,IACtC,eAAZiC,GAA4B,kBAAC,EAAD,CAAYnN,SAXlB,SAAAuK,GACzB5K,EAAmB4K,GACnBW,EAAQnM,KAAR,WAAiBwL,EAAS/N,gB,6BCpBxB6Q,GAASC,gBACb,YAAmE,IAAD,EAA/DC,EAA+D,EAA/DA,SAAU5K,EAAqD,EAArDA,OAAQ6K,EAA6C,EAA7CA,cAAeC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,eACrChT,EAAYC,KAAE,mBACjBC,KAAOC,MAAO,GADG,cAEjBD,KAAO+S,MAAQF,GAFE,cAGjB7S,KAAOgT,YAAcF,GAHJ,IAKpB,OACE,yBAAKhT,UAAWA,EAAWR,QAAS,kBAAMsT,EAAc7K,KACrD4K,MAMTF,GAAOjS,aAAe,CACpBoS,cAAe,cAQFH,U,oBCjBTQ,GAAQ,SAAC,GAOR,IAAD,EANJtM,EAMI,EANJA,MACAuM,EAKI,EALJA,gBACAC,EAII,EAJJA,UACAlH,EAGI,EAHJA,KACAtI,EAEI,EAFJA,MACAyP,EACI,EADJA,eACI,EAC2BtR,qBAAWC,GAAlCmE,EADJ,EACIA,KACArE,EAFJ,EACUG,aACNH,SAFJ,EAGgD8C,mBAAS,IAHzD,mBAGG0O,EAHH,KAGuBC,EAHvB,KAIEC,EAAO,GACPV,EAAU,SAAA9K,GACd,IAAMyL,EAAS,SAAAC,GAAC,OAAIA,EAAI,IAAM,GACxBC,EAAUF,EAAO9L,OAAOK,EAAO,KAC/B4L,EAAaH,EAAO9L,OAAOK,EAAO,KACxC,OAAO2L,GAAWC,EAAaA,GAG3BC,EAAoB,SAAA7L,GAAM,OAC9BjB,GAAiBiB,EAAQpB,GAAO1F,SAAWgL,GAC3ClE,IAAWsL,GA2Cb,SAASQ,EAAkBC,GACzB,GAAInQ,EAAO,CACT,IAAMoQ,EAAcpQ,EAAMuC,EAAK9B,IAAI4J,MACnC,OAAO8F,EAAWC,IAAgB9H,EAAO8H,IAAgB9H,EAE3D,OAAIpK,IAAapB,EAAsBC,iBAGnCmB,IAAapB,EAAsBC,eAC9BoT,EAAoB,UAAT7H,EAA4B,UAATA,OADvC,GAvCFtF,EAAMzC,SAAQ,SAAC0H,EAAKC,GAClB,IAAMmI,EAAU,GAEhBpI,EAAI1H,SAAQ,SAACsE,EAAQsD,GACnB,IAAM/D,EXaa,SAAC6D,EAAKqI,GAC7B,MAAM,GAAN,OAAUrI,GAAV,OAAgBqI,GWdGC,CAAUrI,EAAQC,GACjCkI,EAAQ7P,KACN,kBAAC,KAAD,CACEf,IAAG,iBAAY2E,GACfoM,YAAapM,EACbqM,eAAgBR,EAAkB7L,KAEjC,SAACsM,EAAU5P,GACV,OACE,uCAAKnB,IAAK+Q,EAASC,UAAcD,EAASE,gBACxC,kBAAC,GAAD,CACExM,OAAQA,EACR8K,QAASA,EAAQ9K,GACjB+K,eAAgBrO,EAASqO,eACzBF,cAAeQ,GAEdF,EAAgB1K,YAQ/B+K,EAAKpP,KAAK6P,MAgBZ,IAAMQ,EAAYX,IACZY,EAAiBZ,GAAkB,GACnCa,EAAqB,SAAAZ,GAAQ,aACjC/T,KAAE,mBACCC,KAAO2U,WAAY,GADpB,cAEC3U,KAAO4U,OAASd,EAAWW,EAAiBD,GAF7C,KAKJ,OACE,kBAAC,KAAD,CAAiBrB,UA3DK,SAAA/M,GAClBA,EAAEgD,aACJ+J,EAAU/M,IAyDiCyO,YA/D3B,SAAAzO,GAClBkN,EAAsBlN,EAAE6C,OAAOkL,eA+D7B,yBAAKrU,UAAW4U,MAChB,yBACE5U,UAAWC,KAAE,mBACVC,KAAO2G,OAAQ,GADL,cAEV3G,KAAOwU,UAAYA,GAFT,cAGVxU,KAAOyU,eAAiBA,GAHd,KAMZlB,GAEH,yBAAKzT,UAAW4U,GAAmB,OAKzCzB,GAAMzS,aAAe,CACnB2S,UAAW,aACXC,eAAgB,cAUHH,U,6BCzHF6B,GAAQpC,gBAAK,YAAmD,IAAhDtO,EAA+C,EAA/CA,GAAIwG,EAA2C,EAA3CA,KAAMsH,EAAqC,EAArCA,UAAWnD,EAA0B,EAA1BA,WAAY1B,EAAc,EAAdA,QACtD0H,EACJ,kBAAC,mBAAD,CACEjV,UAAWE,KAAOC,KAClB2K,KAAMA,EACNoK,OAAQ9C,EAAY,UAAY,SAChClE,MACiB,UAAfe,EACI1B,EACE,UACA,UACFA,EACA,UACA,QAEN4H,KAAK,OAGT,OAAK/C,EAID,kBAAC,KAAD,CAAWgD,gBAAiBhD,EAAWiD,YAAa/Q,EAAIiD,MAAO,IAC5D,SAACgN,EAAU5P,GACV,OACE,uCACEnB,IAAK+Q,EAASC,UACVD,EAASe,eACTf,EAASgB,iBAEZN,MAXJ,6BAAMA,M,oBCHFO,GAhBA,SAAC,GAAD,IAAGlJ,EAAH,EAAGA,OAAH,OACb,yBAAKtM,UAAWE,KAAOC,MACpBmM,EAAO5G,KAAI,SAAAuP,GAAK,OACf,yBAAK3R,IAAG,iBAAY2R,EAAM7T,SAAWpB,UAAWE,KAAO+U,OACrD,kBAACD,GAAD,CACE1R,IAAG,iBAAY2R,EAAM7T,SACrB0J,KAAMzB,GAAc4L,EAAM7T,SAAS0J,KACnC3J,OAAQ8T,EAAM9T,OACdC,QAAS6T,EAAM7T,QACf6N,WAAYgG,EAAM9T,OAClBsU,aAAa,U,oBCVjBC,GAAY,SAAC,GAKZ,IAJLC,EAII,EAJJA,WACAC,EAGI,EAHJA,WACAC,EAEI,EAFJA,gBACAC,EACI,EADJA,kBACI,EACwBjR,mBAAS,IADjC,mBACGkR,EADH,KACWC,EADX,OAE0BnR,mBAAS,IAFnC,mBAEGoR,EAFH,KAEYC,EAFZ,OAGwBrR,mBAAS,IAHjC,mBAGGsR,EAHH,KAGWC,EAHX,KAsDJ,SAASC,EAAcC,GACrB,OAAIH,EACKG,IAAWP,EAAOQ,eAAiB,SAAW,QAEhD,UAGT,OAxDApR,qBAAU,WAiBRqR,MAAM,kEAAD,OAC+Db,EAD/D,qBACsFC,EADtF,aAEH,CACEa,OAAQ,QAGT1S,MAAK,SAAA2S,GAAG,OAAIA,EAAIC,UAChB5S,MAAK,SAAA6S,GAAQ,OAAIZ,EAAUY,EAASC,QAAQ,OAC5CC,OAAM,SAAAC,GAAG,OAAIvS,QAAQC,IAAIsS,QAvB3B,IAEH5R,qBAAU,WACJ4Q,EAAOiB,UAmCb,WACE,IAAMC,EAAc3M,KAAK4M,MACvB5M,KAAKC,SAAWwL,EAAOoB,kBAAkB5Q,OAAS,GAEhD0P,EAAO,YAAOF,EAAOoB,mBACzBlB,EAAQmB,OAAOH,EAAa,EAAGlB,EAAOQ,gBACtCL,EAAWD,GAxCToB,KAED,CAACtB,IAEJ5Q,qBAAU,WACJgR,GAiBN,WACE,IAAMmB,EAAkBnB,IAAWJ,EAAOQ,eAC1CgB,YAAW,WACLD,EACFzB,IAEAC,MAED,MAxBD0B,KAED,CAACrB,IA0CAJ,EAAOiB,SAEP,yBAAKhX,UAAWE,KAAOC,MACrB,yBACEH,UAAWE,KAAO8W,SAClBxW,wBAAyB,CAAEC,OAAQsV,EAAOiB,YAE3Cf,EAAQvQ,KAAI,SAAC4Q,EAAQtO,GAAT,OACX,kBAAC,EAAD,CACE1E,IAAK0E,EACLzI,YAAa+W,EACb9W,QAAS,kBAAO2W,GAAUC,EAAUE,IACpC5W,YAAU,EACVG,aAAW,EACXC,SAAO,EACPL,KAAM4W,EAAcC,GACpBvW,aAAcoW,QAMjB,MAGTT,GAAUhV,aAAe,CACvBiV,WAAY,OACZC,WAAY,GAQCF,UCUA+B,GA3GO,SAAC,GAAiB,IAAfjH,EAAc,EAAdA,QAAc,EACNxO,qBAAWC,GAAlCmE,EAD6B,EAC7BA,KAAMlE,EADuB,EACvBA,aACNH,EAAwBG,EAAxBH,SAAU+C,EAAc5C,EAAd4C,UACZP,EAASiI,GAAY,QACrBnJ,EAAS+C,GAAQA,EAAK9B,GAJS,EAKPO,mBAAS,IALF,mBAK9BsN,EAL8B,KAKrBuF,EALqB,OAajCxK,GAAa,CACfnL,WACAsB,SACAkB,WARAkJ,EARmC,EAQnCA,UACAoB,EATmC,EASnCA,kBACAC,EAVmC,EAUnCA,eACAE,EAXmC,EAWnCA,aACArB,EAZmC,EAYnCA,WAOIE,EAAc9L,IAAapB,EAAsBC,eAEjDmN,GAD2BpN,EAAsBC,eAClCmB,IAAapB,EAAuBC,gBACjDiG,EAAqD4G,EAArD5G,MAAOsF,EAA8CsB,EAA9CtB,KAAMG,EAAwCmB,EAAxCnB,OAAQzI,EAAgC4J,EAAhC5J,MAAO0J,EAAyBE,EAAzBF,QAASC,EAAgBC,EAAhBD,YAiD7C,SAASmK,EAAU3D,GACjB,GAAIjG,GAAgBlK,EAAO,CACzB,IAAMoQ,EAAcpQ,EAAMR,GAAQ6K,MAClC,OAAO8F,EAAW1H,EAAOJ,GAAY+H,IAAgB3H,EAAO2H,GAE5D,OAAOD,EAAW1H,EAAOe,MAAQf,EAAOc,MAe5C,OAnEAjI,qBAAU,WACJZ,GACFO,EAAUP,KAEX,IAEHY,qBAAU,WAsBJ0I,GAAwB,UAAT1B,IAAqBqB,GACtCsB,MArBD,CAAC3C,IAEJhH,qBAAU,YA8CV,WACE,IAAIgN,EAAU,GACV5E,IACF4E,EAAO,UAAMhG,EAAN,cAELqB,IACF2E,EAAO,qBAAiBhG,EAAjB,UAETuL,EAAWvF,GArDXyF,KACC,CAACrK,EAASC,IAEbrI,qBAAU,WACRX,QAAQC,IAAI,CAAEkJ,eACTA,GACH6C,EAAQnM,KAAK,OAEd,CAACsJ,IAiDF,6BACE,6BAAMwE,GACN,kBAAC,GAAD,CAAQ7F,OAAQqL,MAChB,kBAAC,GAAD,CACE9Q,MAAOA,EACPuM,gBAxCN,SAAkB1K,GAAS,IACjBvH,EAA6BuH,EAA7BvH,OAAQC,EAAqBsH,EAArBtH,QAASmM,EAAY7E,EAAZ6E,QACzB,OAAO7E,EAAOtH,QACZ,kBAAC4T,GAAD,CACE1R,IAAG,UAAKnC,EAAL,YAAeC,GAClBkD,GAAE,UAAKnD,EAAL,YAAeC,GACjB0J,KAAMzB,GAAcjI,GAAS0J,KAC7BmE,WAAY9N,EACZoM,QAASA,EACT6E,UAAWpD,EAAa7N,KAExB,MA8BAkS,UArDN,SAAgB/M,GACd,IAAMK,EAAeL,EAAE6C,OAAOkL,YACxBzN,EAAoBN,EAAEgD,YAAY+K,YACxCxF,EAAkBlI,EAAcC,IAmD5BuF,KAAMA,EACNtI,MAAOA,IAET,kBAAC,GAAD,CAAQyI,OAAQqL,GAAU,O,oBCmIjBE,GA7NO,SAAC,GAAiB,IAAfrH,EAAc,EAAdA,QAAc,EACNxO,qBAAWC,GAAlCmE,EAD6B,EAC7BA,KAAMlE,EADuB,EACvBA,aACNH,EAAyCG,EAAzCH,SAAUgD,EAA+B7C,EAA/B6C,gBAAiBD,EAAc5C,EAAd4C,UAC7BP,EAASiI,GAAY,QACrBnJ,EAAS+C,GAAQA,EAAK9B,GAJS,EAKPO,mBAAS,IALF,mBAK9BsN,EAL8B,KAKrBuF,EALqB,OAgBjCxK,GAAa,CACfnL,WACAsB,SACAkB,WAXAkJ,EARmC,EAQnCA,UACAC,EATmC,EASnCA,aACAwB,EAVmC,EAUnCA,aACAR,EAXmC,EAWnCA,YACAM,EAZmC,EAYnCA,aACAhE,EAbmC,EAanCA,aACAoD,EAdmC,EAcnCA,YACAT,EAfmC,EAenCA,WAOIE,EAAc9L,IAAapB,EAAsBC,eAEjDmN,GAD2BpN,EAAsBC,eAClCmB,IAAapB,EAAuBC,gBACjDiG,EAAqD4G,EAArD5G,MAAOsF,EAA8CsB,EAA9CtB,KAAMG,EAAwCmB,EAAxCnB,OAAQzI,EAAgC4J,EAAhC5J,MAAO0J,EAAyBE,EAAzBF,QAASC,EAAgBC,EAAhBD,YACvCsK,EAgGN,WACE,IAAM7D,EAAc8D,IAChBC,EAAQ,EAMZ,OALAvP,GAAU5B,GAAO,YAAiB,IAAd6B,EAAa,EAAbA,OACdA,EAAOuP,UAAYvP,EAAOuP,SAAShE,IACrC+D,OAGGA,EAxGYE,GACfC,EAAkBL,IAAiB/S,EA6CzC,SAASqT,EAAezR,EAAcC,GACrBI,GAAiBJ,EAAmBC,GACxCoR,SAOb,SAAgCtR,GAC9B,IAAM0R,EAAe3M,GAAgB7E,EAAOF,EAAczF,GACpDoX,EAAgBlM,GACpBpF,GAAiBL,EAAcE,GAC/B4G,EAAUnB,QAENiM,EAAc,CAClBpM,KAAMD,GAAYC,GAClBG,OAAQgM,GAENzK,GACFH,EAAa,eAAKD,EAAN,GAAoB8K,EAApB,CAAiC1R,MAAOwR,KAElDtK,GACFlL,EAAS0L,WAAWhK,EAApB,eACKgU,EADL,CAEE1R,MAC0B,UAAxBhD,EAAMR,GAAQ6K,MACVnB,GAAYsL,GACZA,KAzBRG,CAAuB7R,GAEvByH,EAAYzH,EAAcC,GA+F9B,SAASmR,IACP,OAAIhK,GAAgBN,EAAU5J,MACrB4J,EAAU5J,MAAMR,GAAQ6K,MAE7BL,EACK,aADT,EAKF,SAAS8J,EAAU3D,GACjB,GAAIjG,GAAgBlK,EAAO,CACzB,IAAMoQ,EAAcpQ,EAAMR,GAAQ6K,MAClC,OAAO8F,EAAW1H,EAAOJ,GAAY+H,IAAgB3H,EAAO2H,GAE5D,OAAOD,EAAW1H,EAAOe,MAAQf,EAAOc,MAkB5C,OA/KAjI,qBAAU,WACJZ,GACFO,EAAUP,KAEX,IAEHY,qBAAU,YA6BV,WACE,GAAI0I,GAAwB,UAAT1B,IAAqBqB,EAAa,CACnD,IAAM3D,EAAeD,GAAcf,GAAYhC,IACvCsC,EAAwBU,EAAxBV,OAAQG,EAAgBO,EAAhBP,YAChB8O,EAAejP,EAAOlB,OAAQqB,EAAYrB,SAhC5CwQ,KACC,CAACtM,IAEJhH,qBAAU,YAuJV,WACE,IAAIgN,EAAU,GACV5E,IACF4E,EAAO,UAAMhG,EAAN,cAELqB,IACF2E,EAAO,qBAAiBhG,EAAjB,UAEJgM,IACHhG,EAAO,8BAA0BpN,EAAkB+S,EAA5C,UAETJ,EAAWvF,GAjKXyF,KACC,CAAC/Q,EAAO0G,EAASC,EAAazI,IAEjCI,qBAAU,WACJ0I,GAsGN,WACE,IAAM6K,EAAe,GACfC,EAAiB,GACnBhK,EAAW9H,EACf4B,GACE5B,GACA,gBAAG6B,EAAH,EAAGA,OAAQT,EAAX,EAAWA,OAAX,OAAyBS,EAAOtH,SAAWsX,EAAarU,KAAK4D,MAE/D,KAAO0Q,EAAepS,OAASxB,GAAiB,CAC9C,IAAMkS,EAAc3M,KAAK4M,MAAM5M,KAAKC,SAAWmO,EAAanS,QACtD0B,EAASyQ,EAAazB,GACvB0B,EAAexW,SAAS8F,IAC3B0Q,EAAetU,KAAK4D,GAGxB0Q,EAAevU,SAAQ,SAAA6D,GACrBA,EAAOC,WACP,IAAMQ,EAAS1B,GAAiBiB,EAAQpB,GACxC8H,EAAWjD,GAAgBiD,EAAU1G,EAAX,eACrBS,EADqB,CAExBuP,SAAS,eAAMvP,EAAOuP,SAAd,CAAwB5K,OAAO,UAG3CqB,EAAYC,GA5HViK,KAED,IAEHzT,qBAAU,WACRX,QAAQC,IAAI,CAAEkJ,eACTA,GACH6C,EAAQnM,KAAK,OAEd,CAACsJ,IAuJF,yBAAK3N,UAAWE,KAAOC,MACrB,4BAAKgS,GACL,kBAAC,GAAD,CAAQ7F,OAAQqL,MAChB,kBAAC,GAAD,CACE9Q,MAAOA,EACPuM,gBAzGN,SAAmB1K,GAAS,IAClBvH,EAA8BuH,EAA9BvH,OAAQC,EAAsBsH,EAAtBtH,QAAS6W,EAAavP,EAAbuP,SACnBhD,EAAQ7T,GACZ,kBAAC4T,GAAD,CACE1R,IAAG,UAAKnC,EAAL,YAAeC,GAClBkD,GAAE,UAAKnD,EAAL,YAAeC,GACjB0J,KAAMzB,GAAcjI,GAAS0J,KAC7BmE,WAAY9N,EACZiR,UAAW+F,GAAmBnJ,EAAa7N,KAG/C,OAAI8W,GAAYA,EAASF,KAChB,yBAAK/X,UAAWE,KAAO+X,UAAWvP,EAAOtH,SAAW6T,GAEtDA,GAAS,MA4FZ5B,UA3JN,SAAgBnM,GACd,IAAMP,EAAeO,EAAKiC,OAAOkL,YAC3BzN,EAAoBM,EAAKoC,YAAY+K,YACvCrJ,EAAarE,EAAcC,IAC7BwR,EAAezR,EAAcC,IAwJ3BuF,KAAMA,EACNtI,MAAOA,EACPyP,eAjFN,SAAqBrL,GACnB,IAAKkQ,EAAiB,CACpB,IAAMzP,EAAS1B,GAAiBiB,EAAQpB,GACxC,GAAI6B,EAAOtH,QACT,OAEF8N,EAAajH,EAAD,eACPS,EADO,CAEVuP,SAAS,eAAMvP,EAAOuP,SAAd,eAAyBF,KAAmB,WA2EtD,kBAAC,GAAD,CAAQzL,OAAQqL,GAAU,OC7EjBkB,GAtJK,SAAC,GAAiB,IAAfrI,EAAc,EAAdA,QAAc,EACJxO,qBAAWC,GAAlCmE,EAD2B,EAC3BA,KAAMlE,EADqB,EACrBA,aACNH,EAAwBG,EAAxBH,SAAU+C,EAAc5C,EAAd4C,UACZP,EAASiI,GAAY,QACrBnJ,EAAS+C,GAAQA,EAAK9B,GAJO,EAKLO,mBAAS,IALJ,mBAK5BsN,EAL4B,KAKnBuF,EALmB,OAMG7S,mBAAS,MANZ,mBAM5BiU,EAN4B,KAMfC,EANe,OAgB/B7L,GAAa,CACfnL,WACAsB,SACAkB,WAVAkJ,EATiC,EASjCA,UACAuB,EAViC,EAUjCA,aACArB,EAXiC,EAWjCA,WACA3C,EAZiC,EAYjCA,aACAoD,EAbiC,EAajCA,YACAe,EAdiC,EAcjCA,YACAN,EAfiC,EAejCA,kBAOIhB,EAAc9L,IAAapB,EAAsBC,eAEjDmN,GAD2BpN,EAAsBC,eAClCmB,IAAapB,EAAuBC,gBACjDiG,EAAqD4G,EAArD5G,MAAOsF,EAA8CsB,EAA9CtB,KAAMG,EAAwCmB,EAAxCnB,OAAQzI,EAAgC4J,EAAhC5J,MAAO0J,EAAyBE,EAAzBF,QAASC,EAAgBC,EAAhBD,YAqC7C,SAASwL,EAAaC,GAAU,IACtBtS,EAAoCmS,EAApCnS,aAAcC,EAAsBkS,EAAtBlS,kBAClBiH,GAAwB,UAAT1B,EACb8M,EACF9J,IAEAf,EAAYzH,EAAcC,GAGxBqS,EACF7K,EAAYzH,EAAcC,GAE1BuI,IAkCN,SAASwI,EAAU3D,GACjB,GAAIjG,GAAgBlK,EAAO,CACzB,IAAMoQ,EAAcpQ,EAAMR,GAAQ6K,MAClC,OAAO8F,EAAW1H,EAAOJ,GAAY+H,IAAgB3H,EAAO2H,GAE5D,OAAOD,EAAW1H,EAAOe,MAAQf,EAAOc,MAe5C,OArGAjI,qBAAU,WACJZ,GACFO,EAAUP,KAEX,IAEHY,qBAAU,WACR4T,EAAe,MA6CjB,WACE,GAAIlL,GAAwB,UAAT1B,IAAqBqB,EAAa,CACnD,IAAM3D,EAAeD,GAAcf,GAAYhC,IACvCsC,EAAwBU,EAAxBV,OAAQG,EAAgBO,EAAhBP,YACV3C,EAAewC,EAAOlB,OACtBrB,EAAoB0C,EAAYrB,OAClCjB,GAAiBJ,EAAmBC,GAAOzF,QAC7C2X,EAAe,CAAEpS,eAAcC,sBAE/BwH,EAAYzH,EAAcC,IArD9B6R,KACC,CAACtM,IAEJhH,qBAAU,YA+EV,WACE,IAAIgN,EAAU,GACV5E,IACF4E,EAAO,UAAMhG,EAAN,cAELqB,IACF2E,EAAO,qBAAiBhG,EAAjB,UAETuL,EAAWvF,GAtFXyF,KACC,CAACrK,EAASC,IAEbrI,qBAAU,WACRX,QAAQC,IAAI,CAAEkJ,eACTA,GACH6C,EAAQnM,KAAK,OAEd,CAACsJ,IAkFF,6BACE,6BAAMwE,GACN,kBAAC,GAAD,CAAQ7F,OAAQqL,MAChB,kBAAC,GAAD,CACE9Q,MAAOA,EACPuM,gBAxCN,SAAkB1K,GAAS,IACjBvH,EAA6BuH,EAA7BvH,OAAQC,EAAqBsH,EAArBtH,QAASmM,EAAY7E,EAAZ6E,QACzB,OAAO7E,EAAOtH,QACZ,kBAAC4T,GAAD,CACE1R,IAAG,UAAKnC,EAAL,YAAeC,GAClBkD,GAAE,UAAKnD,EAAL,YAAeC,GACjB0J,KAAMzB,GAAcjI,GAAS0J,KAC7BmE,WAAY9N,EACZoM,QAASA,EACT6E,UAAWpD,EAAa7N,KAExB,MA8BAkS,UAtFN,SAAgBnM,GACd,IAAMP,EAAeO,EAAKiC,OAAOkL,YAC3BzN,EAAoBM,EAAKoC,YAAY+K,YACvCrJ,EAAarE,EAAcC,KACzBI,GAAiBJ,EAAmBC,GAAOzF,QAC7C2X,EAAe,CAAEpS,eAAcC,sBAE/BiI,EAAkBlI,EAAcC,KAgFhCuF,KAAMA,EACNtI,MAAOA,IAET,kBAAC,GAAD,CAAQyI,OAAQqL,GAAU,KACzBmB,GACC,kBAAC,GAAD,CACEjD,gBAAiB,kBAAMmD,GAAa,IACpClD,kBAAmB,kBAAMkD,GAAa,Q,oBC7IjCE,GATA,kBACb,4BAAQlZ,UAAWE,KAAOC,MACxB,kBAAC,IAAD,CAASgZ,GAAG,KACV,8CCeSC,GAnBC,WAAO,IAAD,EACIvU,mBAAS,MADb,mBACbuB,EADa,KACP2L,EADO,KAgBpB,OAbA5M,qBAAU,WACRtC,EAASG,OAAOqW,oBAAmB,SAAAjT,GAC7BA,EACFvD,EAASI,SACNO,IADH,gBACgB4C,EAAKkT,MAClB5U,GAAG,SAAS,SAAAC,GAAQ,OACnBoN,EAAQ,aAAEzN,GAAI8B,EAAKkT,KAAQ3U,EAASV,WAGxC8N,EAAQ,WAGX,IACI3L,G,oBCgBMmT,GArBH,WACV,IAAMrX,EAAe0C,IACfwB,EAAOgT,KACb,OACE,kBAAC,IAAD,KACE,kBAAC,EAAQI,SAAT,CAAkBjW,MAAO,CAAErB,eAAckE,SACvC,yBAAKpG,UAAWE,KAAOC,MACrB,kBAAC,GAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOsZ,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,IAAD,CAAUR,GAAG,kBACjD,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,aAAaE,UAAWpH,KAC1C,kBAAC,IAAD,CAAOkH,KAAK,YAAYE,UAAWnC,KACnC,kBAAC,IAAD,CAAOiC,KAAK,YAAYE,UAAW/B,KACnC,kBAAC,IAAD,CAAO6B,KAAK,UAAUE,UAAWf,UCfzBgB,QACW,cAA7BnN,OAAOC,SAASmN,UAEe,UAA7BpN,OAAOC,SAASmN,UAEhBpN,OAAOC,SAASmN,SAASC,MACvB,2D,OCZNC,IAASL,OAAO,kBAAC,GAAD,MAASM,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtW,MAAK,SAAAuW,GACjCA,EAAaC,iB,mBEpInBnb,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,UAAY,yBAAyB,eAAiB,8BAA8B,UAAY,yBAAyB,OAAS,wB,mBCAjLD,EAAOC,QAAU,CAAC,QAAU,kCAAkC,UAAY,oCAAoC,YAAc,wC,mBCA5HD,EAAOC,QAAU,CAAC,KAAO,qBAAqB,MAAQ,sBAAsB,YAAc,8B,mBCA1FD,EAAOC,QAAU,CAAC,KAAO,6BAA6B,QAAU,kC,mBCAhED,EAAOC,QAAU,CAAC,KAAO,yBAAyB,UAAY,gC,mBCA9DD,EAAOC,QAAU,CAAC,KAAO,8BAA8B,QAAU,mC,mBCAjED,EAAOC,QAAU,CAAC,KAAO,wBAAwB,OAAS,4B,mBCA1DD,EAAOC,QAAU,CAAC,KAAO,qBAAqB,MAAQ,wB,mBCAtDD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,SAAW,8B,mBCA5DD,EAAOC,QAAU,CAAC,KAAO,4BAA4B,SAAW,kC,mBCAhED,EAAOC,QAAU,CAAC,KAAO,+B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,sB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,uB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,oB","file":"static/js/main.a372b1d8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"DashboardButton_root__b3wgq\",\"fullLength\":\"DashboardButton_fullLength__1-Itn\",\"default\":\"DashboardButton_default__2v6kX\",\"selected\":\"DashboardButton_selected__1F4pu\",\"error\":\"DashboardButton_error__197pd\",\"warning\":\"DashboardButton_warning__31R0D\",\"accept\":\"DashboardButton_accept__2aoRz\",\"spaceRight\":\"DashboardButton_spaceRight__b-uIW\",\"spaceBottom\":\"DashboardButton_spaceBottom__119x8\",\"notAvailable\":\"DashboardButton_notAvailable__2PODn\"};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport cx from \"classnames\";\nimport styles from \"components/dashboard-button/DashboardButton.module.scss\";\n\nconst DashboardButton = ({\n  displayText,\n  onClick,\n  type,\n  fullLength,\n  selected,\n  spaceRight,\n  spaceBottom,\n  useHtml,\n  notAvailable\n}) => {\n  const className = cx({\n    [styles.root]: true,\n    [styles.default]: type === \"default\",\n    [styles.error]: type === \"error\",\n    [styles.warning]: type === \"warning\",\n    [styles.accept]: type === \"accept\",\n    [styles.fullLength]: fullLength,\n    [styles.selected]: selected,\n    [styles.spaceRight]: spaceRight,\n    [styles.spaceBottom]: spaceBottom,\n    [styles.notAvailable]: notAvailable\n  });\n\n  return (\n    <div className={className} onClick={onClick}>\n      {!useHtml ? (\n        displayText\n      ) : (\n        <div dangerouslySetInnerHTML={{ __html: displayText }} />\n      )}\n    </div>\n  );\n};\n\nDashboardButton.defaultProps = {\n  type: \"default\"\n};\n\nDashboardButton.propTypes = {\n  id: PropTypes.string,\n  type: PropTypes.oneOf([\"default\", \"error\", \"warning\", \"accept\"])\n};\n\nexport default DashboardButton;\n","export const GAME_MODES = {\n  ONE_PLAYER: {\n    TECHNICAL_NAME: \"onePlayer\",\n    PRETTY: \"One Player\"\n  },\n  TWO_PLAYER: {\n    TECHNICAL_NAME: \"twoPlayer\",\n    PRETTY: \"Two Player\"\n  },\n  ONLINE_PLAY: {\n    TECHNICAL_NAME: \"onlinePlay\",\n    PRETTY: \"Online Play\"\n  }\n};\n\nexport const GAME_TYPES = {\n  STANDARD: {\n    TECHNICAL_NAME: \"standard\",\n    PRETTY: \"Standard Chess\"\n  },\n  TRAPDOOR: {\n    TECHNICAL_NAME: \"trapdoor\",\n    PRETTY: \"Trapdoor Chess\"\n  },\n  TRIVIA: {\n    TECHNICAL_NAME: \"trivia\",\n    PRETTY: \"Trivia Chess\"\n  }\n};\n\nexport const EMPTY_SQUARE = {\n  player: \"\",\n  pieceId: \"\"\n};\n\nexport const TRAPDOOR_AMOUNTS = [1, 2, 3, 4];\nexport const DEFAULT_TRAPDOOR_AMOUNT = 1;\n\nexport const GAME_MODE_HAS_GAME_TYPE = {\n  [GAME_MODES.ONE_PLAYER.TECHNICAL_NAME]: [\n    GAME_TYPES.STANDARD.TECHNICAL_NAME,\n    GAME_TYPES.TRAPDOOR.TECHNICAL_NAME,\n    GAME_TYPES.TRIVIA.TECHNICAL_NAME\n  ],\n  [GAME_MODES.TWO_PLAYER.TECHNICAL_NAME]: [\n    GAME_TYPES.STANDARD.TECHNICAL_NAME,\n    GAME_TYPES.TRIVIA.TECHNICAL_NAME\n  ],\n  [GAME_MODES.ONLINE_PLAY.TECHNICAL_NAME]: [\n    GAME_TYPES.STANDARD.TECHNICAL_NAME,\n    GAME_TYPES.TRAPDOOR.TECHNICAL_NAME,\n    GAME_TYPES.TRIVIA.TECHNICAL_NAME\n  ],\n};\n","import React from \"react\";\nimport DashboardButton from \"components/dashboard-button\";\nimport { GAME_MODES } from \"utils/constants\";\nimport styles from \"./SelectGameMode.module.scss\"\n\nconst SelectGameMode = ({ onGameModeClick }) => (\n  <div className={styles.root}>\n      <h3>Select game mode</h3>\n      <div className={styles.selects}>\n          <DashboardButton\n            displayText={GAME_MODES.ONE_PLAYER.PRETTY}\n            onClick={() => onGameModeClick(GAME_MODES.ONE_PLAYER.TECHNICAL_NAME)}\n            spaceRight\n          />\n          <DashboardButton\n            displayText={GAME_MODES.TWO_PLAYER.PRETTY}\n            onClick={() => onGameModeClick(GAME_MODES.TWO_PLAYER.TECHNICAL_NAME)}\n            spaceRight\n          />\n          <DashboardButton\n            displayText={GAME_MODES.ONLINE_PLAY.PRETTY}\n            onClick={() => onGameModeClick(GAME_MODES.ONLINE_PLAY.TECHNICAL_NAME)}\n            spaceRight\n          />\n      </div>\n\n  </div>\n);\n\nexport default SelectGameMode;\n","import React from \"react\";\r\nexport default React.createContext(null);\r\n","import React, { useContext } from \"react\";\r\nimport { GAME_MODE_HAS_GAME_TYPE, GAME_TYPES } from \"utils/constants\";\r\nimport DashboardButton from \"components/dashboard-button\";\r\nimport Context from \"context\";\r\n\r\nimport styles from \"./SelectGameType.module.scss\";\r\n\r\nconst SelectGameType = ({ onChange, gameType }) => {\r\n  const { gameSettings } = useContext(Context);\r\n  const { gameMode } = gameSettings;\r\n  return (\r\n    <div className={styles.root}>\r\n      {GAME_MODE_HAS_GAME_TYPE[gameMode].includes(\r\n        GAME_TYPES.STANDARD.TECHNICAL_NAME\r\n      ) && (\r\n        <DashboardButton\r\n          displayText={GAME_TYPES.STANDARD.PRETTY}\r\n          onClick={() => onChange(GAME_TYPES.STANDARD.TECHNICAL_NAME)}\r\n          selected={gameType === GAME_TYPES.STANDARD.TECHNICAL_NAME}\r\n          fullLength\r\n          spaceRight\r\n          spaceBottom\r\n        />\r\n      )}\r\n      {GAME_MODE_HAS_GAME_TYPE[gameMode].includes(\r\n        GAME_TYPES.TRAPDOOR.TECHNICAL_NAME\r\n      ) && (\r\n        <DashboardButton\r\n          displayText={GAME_TYPES.TRAPDOOR.PRETTY}\r\n          onClick={() => onChange(GAME_TYPES.TRAPDOOR.TECHNICAL_NAME)}\r\n          selected={gameType === GAME_TYPES.TRAPDOOR.TECHNICAL_NAME}\r\n          fullLength\r\n          spaceRight\r\n          spaceBottom\r\n        />\r\n      )}\r\n      {GAME_MODE_HAS_GAME_TYPE[gameMode].includes(\r\n        GAME_TYPES.TRIVIA.TECHNICAL_NAME\r\n      ) && (\r\n        <DashboardButton\r\n          displayText={GAME_TYPES.TRIVIA.PRETTY}\r\n          onClick={() => onChange(GAME_TYPES.TRIVIA.TECHNICAL_NAME)}\r\n          selected={gameType === GAME_TYPES.TRIVIA.TECHNICAL_NAME}\r\n          fullLength\r\n          spaceRight\r\n          spaceBottom\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectGameType;\r\n","const firebaseConfig = {\r\n  apiKey: \"AIzaSyDR2LsF89JCIuOEg8O8QSX7idf-7YQxQpw\",\r\n  authDomain: \"chess-world-1.firebaseapp.com\",\r\n  databaseURL: \"https://chess-world-1.firebaseio.com\",\r\n  projectId: \"chess-world-1\",\r\n  storageBucket: \"chess-world-1.appspot.com\",\r\n  messagingSenderId: \"325750297860\",\r\n  appId: \"1:325750297860:web:f3e87f15718e6eef042c51\",\r\n  measurementId: \"G-Z47ZS64MTT\"\r\n};\r\n\r\nexport default firebaseConfig;\r\n","import * as firebaseApp from \"firebase\";\r\nimport \"firebase/analytics\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport firebaseConfig from \"firebase/config\";\r\n\r\nclass Firebase {\r\n  constructor() {\r\n    firebaseApp.initializeApp(firebaseConfig);\r\n    firebaseApp.analytics();\r\n    this.auth = firebaseApp.auth;\r\n    this.database = firebaseApp.database();\r\n  }\r\n\r\n  async login() {\r\n    await this.auth().signInWithPopup(new firebase.auth.GoogleAuthProvider());\r\n  }\r\n\r\n  async logout() {\r\n    await this.auth().signOut();\r\n  }\r\n\r\n  async setUser(userId, key, value) {\r\n    await this.database.ref(`users/${userId}/${key}`).set(value);\r\n  }\r\n\r\n  async updateUser(userId, key, value) {\r\n    await this.database.ref(`users/${userId}/${key}`).update(value);\r\n  }\r\n\r\n  async getUsersFromIds(ids, filterFunc = () => true) {\r\n    const users = [];\r\n    return await firebase.database\r\n      .ref(\"users\")\r\n      .once(\"value\")\r\n      .then(allUsers => {\r\n        ids.val() &&\r\n          Object.keys(ids.val()).forEach(userId => {\r\n            if (filterFunc(userId)) {\r\n              users.push({ ...allUsers.val()[userId], id: userId });\r\n            }\r\n          });\r\n        return users;\r\n      });\r\n  }\r\n\r\n  async updateGame(gameId, value) {\r\n    console.log(\"updateGame\", gameId, value);\r\n    await this.database.ref(`games/${gameId}`).update(value);\r\n  }\r\n\r\n  async getGameSettings(gameId) {\r\n    return firebase.database\r\n      .ref(`games/${gameId}/settings`)\r\n      .on(\"value\", snapshot => snapshot.val());\r\n  }\r\n}\r\n\r\nconst firebase = new Firebase();\r\nexport default firebase;\r\n","import firebase from \"./firebase\";\n\nexport default firebase;\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  DEFAULT_TRAPDOOR_AMOUNT,\r\n  GAME_MODES,\r\n  GAME_TYPES\r\n} from \"utils/constants\";\r\n\r\nimport firebase from \"../firebase\";\r\n\r\nconst useGameSettings = () => {\r\n  const [gameId, setGameId] = useState(\"\");\r\n  const [gameSettings, setGameSettings] = useState({\r\n    gameMode: GAME_MODES.ONE_PLAYER.TECHNICAL_NAME,\r\n    gameType: GAME_TYPES.STANDARD.TECHNICAL_NAME,\r\n    trapdoorsAmount: DEFAULT_TRAPDOOR_AMOUNT\r\n  });\r\n\r\n  const updateGameSettings = setting => {\r\n    setGameSettings({ ...gameSettings, ...setting });\r\n  };\r\n\r\n  const getGameSettingsFromDb = gameId => {\r\n    firebase.database.ref(`games/${gameId}/settings`).on(\"value\", snapshot => {\r\n      updateGameSettings({\r\n        ...snapshot.val(),\r\n        gameMode: GAME_MODES.ONLINE_PLAY.TECHNICAL_NAME\r\n      });\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (gameId) {\r\n      getGameSettingsFromDb(gameId);\r\n    }\r\n  }, [gameId]);\r\n\r\n  return { updateGameSettings, setGameId, ...gameSettings };\r\n};\r\nexport default useGameSettings;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport SelectGameType from \"components/select-game-type\";\r\nimport DashboardButton from \"components/dashboard-button\";\r\nimport useGameSettings from \"hooks/useGameSettings\";\r\nimport { GAME_TYPES, TRAPDOOR_AMOUNTS } from \"utils/constants\";\r\n\r\nimport styles from \"./CreateGame.module.scss\";\r\n\r\nconst CreateGame = ({ onSubmit, noHeader, submitText }) => {\r\n  const { updateGameSettings, gameType, trapdoorsAmount } = useGameSettings();\r\n  const handleOnSubmit = () => {\r\n    onSubmit({ gameType, trapdoorsAmount });\r\n  };\r\n\r\n  return (\r\n    <div className={styles.root}>\r\n      {!noHeader && <h3>Create your game</h3>}\r\n      <SelectGameType\r\n        onChange={gameType => updateGameSettings({ gameType })}\r\n        gameType={gameType}\r\n      />\r\n      {gameType === GAME_TYPES.TRAPDOOR.TECHNICAL_NAME && (\r\n        <div>\r\n          <h4>Amount of trapdoors per player</h4>\r\n          <div className={styles.trapdoors}>\r\n            {TRAPDOOR_AMOUNTS.map(amount => (\r\n              <DashboardButton\r\n                key={`trapdoor-button-${amount}`}\r\n                displayText={amount}\r\n                onClick={() => updateGameSettings({ trapdoorsAmount: amount })}\r\n                selected={amount === trapdoorsAmount}\r\n                fullLength\r\n                spaceBottom\r\n                spaceRight\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n      <DashboardButton\r\n        displayText={submitText}\r\n        onClick={handleOnSubmit}\r\n        fullLength\r\n        type=\"warning\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nCreateGame.defaultProps = {\r\n  useCompact: true,\r\n  noHeader: false,\r\n  submitText: \"Submit\"\r\n};\r\n\r\nCreateGame.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n  useCompact: PropTypes.bool,\r\n  noHeader: PropTypes.bool,\r\n  submitText: PropTypes.string\r\n};\r\n\r\nexport default CreateGame;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport firebase from \"../firebase\";\r\n\r\nconst useAvailableUsers = userId => {\r\n  const [allAvailableUsers, setAvailableUsers] = useState([]);\r\n  const [userAvailable, setUserAvailable] = useState(false);\r\n  const availableUsers = allAvailableUsers.filter(user => user.id !== userId);\r\n  const getAvailableUsersIds = () =>\r\n    firebase.database\r\n      .ref(\"availableUsers\")\r\n      .on(\"value\", async allAvailableUsers => {\r\n        const getAvailableUsersFromIds = async () => {\r\n          const filterOwnUser = id => userId !== id;\r\n          const users = await firebase.getUsersFromIds(allAvailableUsers);\r\n          setAvailableUsers(users);\r\n        };\r\n\r\n        try {\r\n          await getAvailableUsersFromIds();\r\n        } catch (err) {\r\n          console.log(err);\r\n        }\r\n      });\r\n\r\n  const updateAvailableUser = async (userId, value) => {\r\n    await firebase.database.ref(\"availableUsers\").update({ [userId]: value });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setUserAvailable(allAvailableUsers.map(user => user.id).includes(userId));\r\n  }, [userId, allAvailableUsers.length]);\r\n\r\n  useEffect(() => {\r\n    getAvailableUsersIds();\r\n  }, []);\r\n\r\n  return { availableUsers, updateAvailableUser, userAvailable };\r\n};\r\n\r\nexport default useAvailableUsers;\r\n","import { getSquareDetails } from \"utils/helpers\";\n\nexport const pawnValidation = ({\n  sourceCoords,\n  destinationCoords,\n  board,\n  captureOnly,\n  baselinePlayer\n}) => {\n  const player = getSquareDetails(sourceCoords, board).player;\n  // captureOnly is validation to see if it can capture only\n  const targetSquareOccupied = captureOnly\n    ? true\n    : getSquareDetails(destinationCoords, board).pieceId.length > 0;\n  const move = parseInt(sourceCoords) - parseInt(destinationCoords);\n  // moved 1 space forward\n  if (move === (player === baselinePlayer ? 10 : -10)) {\n    return !targetSquareOccupied;\n    // moved 2 spaces forward\n  } else if (move === (player === baselinePlayer ? 20 : -20)) {\n    const eligibleColumn = player === baselinePlayer ? 6 : 1;\n    // was moving 2 spaces eligible?\n    // Todo: Dont allow pawn to jump over piece when moving 2 squares\n    return (\n      parseInt(sourceCoords[0]) === eligibleColumn && !targetSquareOccupied\n    );\n    // pawn moved diagonally\n  } else if (\n    move === (player === baselinePlayer ? 9 : -9) ||\n    move === (player === baselinePlayer ? 11 : -11)\n  ) {\n    // was diagonal move eligible?\n    return targetSquareOccupied;\n  } else {\n    return false;\n  }\n};\n","export const rookValidation = ({ sourceCoords, destinationCoords, board }) => {\n  // is next move either vertical or horizontal?\n  if (\n    sourceCoords[0] === destinationCoords[0] ||\n    sourceCoords[1] === destinationCoords[1]\n  ) {\n    const vertical = sourceCoords[0] !== destinationCoords[0];\n    let index = vertical ? 0 : 1;\n    // forwards means up the y or x axis, so up or left\n    const forwards =\n      parseInt(sourceCoords[index]) > parseInt(destinationCoords[index]);\n    let position = parseInt(sourceCoords[index]);\n    let end = parseInt(destinationCoords[index]);\n\n    for (\n      position;\n      forwards ? position >= end : position <= end;\n      forwards ? position-- : position++\n    ) {\n      // dont check first square\n      if (position !== parseInt(sourceCoords[index])) {\n        let piece = null;\n        // has piece been moved vertically?\n        if (vertical) {\n          piece = board[position][destinationCoords[1]];\n          // else if horizontally and if piece is on this square\n        } else {\n          piece = board[destinationCoords[0]][position];\n        }\n\n        if (piece.pieceId && position !== end) {\n          return false;\n        }\n        if (position === end) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n","import { getSquareDetails } from \"utils/helpers\";\n\nexport const bishopValidation = ({\n  sourceCoords,\n  destinationCoords,\n  board,\n}) => {\n  sourceCoords = parseInt(sourceCoords);\n  destinationCoords = parseInt(destinationCoords);\n  // has the piece moved diagonally?\n  if (\n    Number.isInteger((sourceCoords - destinationCoords) / 11) ||\n    Number.isInteger((sourceCoords - destinationCoords) / 9)\n  ) {\n    const sWnE = Number.isInteger((sourceCoords - destinationCoords) / 9);\n    const up = sourceCoords > destinationCoords;\n\n    for (\n      let i = sourceCoords;\n      up ? i >= destinationCoords : i <= destinationCoords;\n      up\n        ? sWnE\n          ? (i = i - 9)\n          : (i = i - 11)\n        : sWnE\n        ? (i = i + 9)\n        : (i = i + 11)\n    ) {\n      let coords = i.toString();\n\n      if (coords[0] > 7 || coords[0] < 0 || coords[1] > 7 || coords[1] < 0) {\n        // square is outside of board boundary\n        return false;\n      }\n      // Convert single digit to 2 (1 to 01)\n      if (coords.length === 1) {\n        coords = \"0\" + coords;\n      }\n      // dont check first square\n      if (i !== sourceCoords) {\n        // if piece is on this square\n        const square = getSquareDetails(coords, board)\n        if (square.pieceId && i !== destinationCoords) {\n          return false\n        }\n        if (i === destinationCoords) {\n          return true\n        }\n      }\n    }\n  }\n  return false;\n};\n","import { getSquareDetails } from \"utils/helpers\";\n\nexport const knightValidation = ({\n  sourceCoords,\n  destinationCoords,\n  board,\n}) => {\n  const availableCoords = [21, -21, 19, -19, 12, -12, 8, -8];\n  if (\n    availableCoords.includes(\n      parseInt(sourceCoords) - parseInt(destinationCoords)\n    )\n  ) {\n    const piece = getSquareDetails(destinationCoords, board)\n    return !!piece;\n  }\n  return false;\n};\n","import { getSquareDetails } from \"utils/helpers\";\n\nexport const kingValidation = ({sourceCoords, destinationCoords, board}) => {\n  const availableCoords = [11, -11, 10, -10, 9, -9, 1, -1, 0];\n  if (availableCoords.includes(parseInt(sourceCoords) - parseInt(destinationCoords))) {\n    const piece = getSquareDetails(destinationCoords, board)\n  return !!piece;\n  }\n  return false;\n};\n","import {\n  getNextBoard,\n  getPieceProps,\n  loopBoard,\n  performValidation\n} from \"./helpers\";\nimport { getKingStatus } from \"rules/getKingStatus\";\n\nexport const getThreats = (threatenedPlayer, threatenedPlayerCoords, board) => {\n  let threats = [];\n\n  loopBoard(board, ({ square, coords }) => {\n    const threateningPlayer =\n      square.player && square.player !== threatenedPlayer && square.player;\n    if (threateningPlayer) {\n      const sourceCoords = coords;\n      // const validateMove = getPieceProps(square.pieceId).validateMove;\n      // threat cant come from that square itself\n      if (\n        performValidation({\n          sourceCoords,\n          destinationCoords: threatenedPlayerCoords,\n          board,\n          player: threateningPlayer,\n          captureOnly: true,\n          baselinePlayer: \"white\"\n        })\n      ) {\n        threats.push(square.pieceId);\n      }\n    }\n  });\n  return threats;\n};\n\nexport const getBotMoves = board => {\n  let moves = [];\n  // find black piece\n  loopBoard(board, ({ square: prevSquare, coords }) => {\n    if (prevSquare.player === \"black\") {\n      // got black piece\n      const sourceCoords = coords;\n\n      // loop through board and see if this piece can move there\n      loopBoard(board, ({ coords, square: nextSquare }) => {\n        const destinationCoords = coords;\n        // console.log('next coords', destinationCoords)\n\n        if (\n          performValidation({\n            board,\n            player: \"black\",\n            sourceCoords,\n            destinationCoords,\n            baselinePlayer: \"white\"\n          })\n        ) {\n          const nextBoard = getNextBoard(\n            board,\n            sourceCoords,\n            destinationCoords\n          );\n\n          let move = {\n            source: {\n              pieceId: prevSquare.pieceId,\n              coords: sourceCoords,\n              strength: getPieceProps(prevSquare.pieceId).strength,\n              threats: getThreats(\"black\", sourceCoords, board)\n            },\n            destination: {\n              pieceId: nextSquare.pieceId && nextSquare.pieceId,\n              coords: destinationCoords,\n              strength:\n                nextSquare.pieceId &&\n                getPieceProps(nextSquare.pieceId).strength,\n              kingStatusYou: getKingStatus(nextBoard, \"black\", \"white\"),\n              kingStatusOpponent: getKingStatus(nextBoard, \"white\", \"white\"),\n              threats: getThreats(\"black\", destinationCoords, nextBoard),\n              defenders: getThreats(\"white\", destinationCoords, nextBoard)\n            }\n          };\n\n          // console.log('bot move handlePerformMove returned true', square && square.player)\n          if (move.destination.strength > 0 || move.destination.checkmate) {\n            moves.push(move);\n          } else if (!nextSquare.player) {\n            moves.push(move);\n          }\n        }\n      });\n    }\n  });\n\n  console.log(\"moves\", moves);\n  return moves;\n};\n\nexport const decideBotMove = (moves) => {\n  let selectedMove = { score: -100 };\n\n  moves.forEach(move => {\n    let score = move.destination.strength || 0;\n    const targetIsThreatened = move.destination.threats.length > 0;\n    const targetIsDefended = move.destination.defenders.length > 0;\n    const scoreLog = [];\n\n    // if the black piece is currently threatened, add points to escape threat\n    if (move.source.threats.length > 0) {\n      score += move.source.strength;\n      scoreLog.push(\n        ` +${move.source.strength} (own strength score) to escape threat`\n      );\n      console.log(\n        `${\n          move.source.pieceId\n        } is currently threatened by ${move.source.threats.join()}`\n      );\n    }\n\n    if (move.destination.kingStatusOpponent === \"checkmate\") {\n      move.wouldPutOpponentInCheckmate = true;\n      scoreLog.push(\" checkmate\");\n    }\n\n    if (move.destination.kingStatusOpponent === \"check\") {\n      // the weaker the player, the higher the score (less to sacrifice)\n      // Todo: decide on score\n      // score += 3\n      console.log(\n        `${move.source.pieceId} can put king in check move this piece`\n      );\n    }\n\n    if (targetIsThreatened) {\n      score -= move.source.strength;\n      scoreLog.push(\n        ` -${\n          move.source.strength\n        } (own strength score) target square is threatened by ${move.destination.threats.join()}`\n      );\n\n      // only add points for targetIsDefended if also targetIsThreatened\n      if (targetIsDefended) {\n        score += move.source.strength;\n        scoreLog.push(\n          ` +${move.source.strength} (own strength score) target square is defended`\n        );\n      }\n    }\n\n    move.score = score;\n    move.scoreLog = scoreLog.join();\n    console.log(\n      `${move.source.pieceId} to ${move.destination.coords}, score ${score}`\n    );\n  });\n\n  moves.forEach(move => {\n    if (move.wouldPutOpponentInCheckmate) {\n      selectedMove = move;\n    } else if (move.score > selectedMove.score) {\n      selectedMove = move;\n    }\n  });\n\n  if (selectedMove.score === 0) {\n    // all available moves are into an empty space i.e at beginning of game\n    let moveChosen = false;\n    while (!moveChosen) {\n      const randomMove = moves[parseInt(Math.random() * moves.length)];\n      if (randomMove.score === 0) {\n        selectedMove = randomMove;\n        moveChosen = true;\n      }\n    }\n  }\n\n  return selectedMove;\n};\n","import { getNextBoard, loopBoard } from \"../utils/helpers\";\nimport { getThreats } from \"utils/onePlayerHelpers\";\nimport { kingValidation } from \"rules/kingValidation\";\n// kingPlayer is the players colour that controls the king in question\n\nexport const getKingStatus = (board, kingPlayer) => {\n  let kingPos = \"\";\n  const getKingPos = ({ square, coords }) => {\n    if (square.player === kingPlayer && square.pieceId === \"king\") {\n      kingPos = coords;\n    }\n  };\n  loopBoard(board, getKingPos);\n\n  const isCheckmate = () => {\n    const potentialCoords = [11, -11, 10, -10, 9, -9, 1, -1, 0];\n    let availableCoords = [];\n\n    potentialCoords.forEach(coord => {\n      let destinationCoords = (kingPos - coord).toString();\n      if (\n        kingValidation({\n          sourceCoords: kingPos,\n          destinationCoords,\n          board,\n          player: kingPlayer\n        })\n      ) {\n        availableCoords.push(destinationCoords);\n      }\n    });\n\n    // filter available coords and take away any that could be threatened if landed on by king\n    availableCoords = availableCoords.filter(destinationCoords => {\n      const threats = getThreats(\n        kingPlayer,\n        destinationCoords,\n        getNextBoard(board, kingPos, destinationCoords)\n      );\n      return threats.length < 1;\n    });\n    return availableCoords.length < 1;\n  };\n\n  if (isCheckmate()) {\n    return \"checkmate\";\n  }\n\n  const isInCheck = () => {\n    return getThreats(kingPlayer, kingPos, board).length > 0;\n  };\n  if (isInCheck()) {\n    return \"check\";\n  }\n\n  return false;\n};\n","import {\n  faChessPawn,\n  faChessRook,\n  faChessKnight,\n  faChessBishop,\n  faChessKing,\n  faChessQueen\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { pawnValidation } from \"../rules/pawnValidation\";\nimport { rookValidation } from \"../rules/rookValidation\";\nimport { bishopValidation } from \"../rules/bishopValidation\";\nimport { knightValidation } from \"../rules/knightValidation\";\nimport { kingValidation } from \"../rules/kingValidation\";\nimport { getKingStatus } from \"../rules/getKingStatus\";\nimport { EMPTY_SQUARE } from \"utils/constants\";\n\nexport const getPieceProps = pieceId => {\n  switch (pieceId && pieceId.split(\"-\")[0]) {\n    case \"pawn\":\n      return {\n        icon: faChessPawn,\n        validateMove: pawnValidation,\n        strength: 1\n      };\n    case \"rook\":\n      return {\n        icon: faChessRook,\n        validateMove: rookValidation,\n        strength: 5\n      };\n    case \"knight\":\n      return {\n        icon: faChessKnight,\n        validateMove: knightValidation,\n        strength: 3\n      };\n    case \"bishop\":\n      return {\n        icon: faChessBishop,\n        validateMove: bishopValidation,\n        strength: 3\n      };\n    case \"king\":\n      return {\n        icon: faChessKing,\n        validateMove: kingValidation,\n        strength: 10\n      };\n    case \"queen\":\n      return {\n        icon: faChessQueen,\n        validateMove: (...params) => {\n          if (rookValidation(...params) || bishopValidation(...params)) {\n            return true;\n          }\n        },\n        strength: 9\n      };\n    default:\n      return null;\n  }\n};\n\nexport const getCoords = (row, col) => {\n  return `${row}${col}`;\n};\n\nexport const getSquareDetails = (coords, board) => {\n  if (\n    coords[0] > 7 ||\n    coords[0] < 0 ||\n    coords[1] > 7 ||\n    coords[1] < 0 ||\n    coords < 0 ||\n    coords > 78\n  ) {\n    return false;\n  }\n  return board[coords[0]][coords[1]];\n};\n\nexport const getNextBoard = (board, sourceCoords, destinationCoords) => {\n  let boardCopy = JSON.parse(JSON.stringify(board));\n  // new square is taken over\n  boardCopy[destinationCoords[0]][destinationCoords[1]] =\n    boardCopy[sourceCoords[0]][sourceCoords[1]];\n  // old square is emptied\n  boardCopy[sourceCoords[0]][sourceCoords[1]] = EMPTY_SQUARE;\n  return boardCopy;\n};\n\nexport const getUpdatedBoard = (board, coords, value) => {\n  let boardCopy = JSON.parse(JSON.stringify(board));\n  boardCopy[coords[0]][coords[1]] = value;\n  return boardCopy;\n};\n\nexport const performValidation = ({\n  board,\n  player,\n  sourceCoords,\n  destinationCoords,\n  baselinePlayer,\n  captureOnly\n}) => {\n  // work out if valid square has been selected, or another of mine\n  const sourceSquare = getSquareDetails(sourceCoords, board);\n  const destinationSquare = getSquareDetails(destinationCoords, board);\n\n  // nextSquare doesnt exist\n  if (!destinationSquare) {\n    return false;\n  }\n  // if clicked on own piece again\n  if (destinationSquare.player === player) {\n    return false;\n    // else perform validation\n  }\n  if (\n    !getPieceProps(sourceSquare.pieceId).validateMove({\n      sourceCoords,\n      destinationCoords,\n      board,\n      baselinePlayer,\n      captureOnly\n    })\n  ) {\n    return false;\n  }\n  const nextBoard = getNextBoard(board, sourceCoords, destinationCoords);\n  const movedSelfIntoCheck =\n    getKingStatus(nextBoard, player, baselinePlayer) === \"check\";\n  return !movedSelfIntoCheck;\n};\n\nexport const loopBoard = (board, func) =>\n  board.forEach((row, rowIdx) => {\n    row.forEach((square, squareIdx) => {\n      const coords = rowIdx.toString().concat(squareIdx);\n      func({ square, coords });\n    });\n  });\n\nexport const getOpponent = turn => (turn === \"white\" ? \"black\" : \"white\");\n\nexport const getUpdatedFallen = (targetPiece, fallen) => {\n  const { player, pieceId } = targetPiece;\n  if (!player) {\n    return fallen;\n  }\n  return {\n    ...fallen,\n    [player]: pieceId ? [...fallen[player], targetPiece] : [...fallen[player]]\n  };\n};\n\nexport const getTargetPiece = (board, destinationCoords) =>\n  board[destinationCoords[0]][destinationCoords[1]];\n\nexport const getPrettyFromTechnicalName = (obj, technicalName) => {\n  const key = Object.keys(obj).filter(\n    key => obj[key].TECHNICAL_NAME === technicalName\n  );\n  return obj[key].PRETTY;\n};\n\nexport const getUrlParam = key => {\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  return urlParams.get(key);\n};\n\nexport const mirrorBoard = board => {\n  let boardCopy = JSON.parse(JSON.stringify(board));\n  const boardMirrored = [...boardCopy].reverse();\n  boardMirrored.forEach(row => row.reverse());\n  return boardMirrored;\n};\n","// IMPORTANT- board coordinates order are y - top to bottom, x - left to right\r\nimport { EMPTY_SQUARE } from \"utils/constants\";\r\n\r\nexport default [\r\n  [\r\n    { player: \"black\", pieceId: \"rook-1\" },\r\n    { player: \"black\", pieceId: \"knight-1\" },\r\n    { player: \"black\", pieceId: \"bishop-1\" },\r\n    { player: \"black\", pieceId: \"king\" },\r\n    { player: \"black\", pieceId: \"queen\" },\r\n    { player: \"black\", pieceId: \"bishop-0\" },\r\n    { player: \"black\", pieceId: \"knight-0\" },\r\n    { player: \"black\", pieceId: \"rook-0\" }\r\n  ],\r\n\r\n  [\r\n    { player: \"black\", pieceId: \"pawn-7\" },\r\n    { player: \"black\", pieceId: \"pawn-6\" },\r\n    { player: \"black\", pieceId: \"pawn-5\" },\r\n    { player: \"black\", pieceId: \"pawn-4\" },\r\n    { player: \"black\", pieceId: \"pawn-3\" },\r\n    { player: \"black\", pieceId: \"pawn-2\" },\r\n    { player: \"black\", pieceId: \"pawn-1\" },\r\n    { player: \"black\", pieceId: \"pawn-0\" }\r\n  ],\r\n  [\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE\r\n  ],\r\n  [\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE\r\n  ],\r\n  [\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE\r\n  ],\r\n  [\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE\r\n  ],\r\n  [\r\n    { player: \"white\", pieceId: \"pawn-0\" },\r\n    { player: \"white\", pieceId: \"pawn-1\" },\r\n    { player: \"white\", pieceId: \"pawn-2\" },\r\n    { player: \"white\", pieceId: \"pawn-3\" },\r\n    { player: \"white\", pieceId: \"pawn-4\" },\r\n    { player: \"white\", pieceId: \"pawn-5\" },\r\n    { player: \"white\", pieceId: \"pawn-6\" },\r\n    { player: \"white\", pieceId: \"pawn-7\" }\r\n  ],\r\n  [\r\n    { player: \"white\", pieceId: \"rook-0\" },\r\n    { player: \"white\", pieceId: \"knight-0\" },\r\n    { player: \"white\", pieceId: \"bishop-0\" },\r\n    { player: \"white\", pieceId: \"king\" },\r\n    { player: \"white\", pieceId: \"queen\" },\r\n    { player: \"white\", pieceId: \"bishop-1\" },\r\n    { player: \"white\", pieceId: \"knight-1\" },\r\n    { player: \"white\", pieceId: \"rook-1\" }\r\n  ]\r\n];\r\n","import React, { useEffect, useState } from \"react\";\r\nimport defaultBoard from \"lineups/defaultBoard\";\r\nimport {\r\n  getNextBoard,\r\n  getOpponent,\r\n  getTargetPiece,\r\n  getUpdatedBoard,\r\n  getUpdatedFallen,\r\n  mirrorBoard,\r\n  performValidation\r\n} from \"utils/helpers\";\r\nimport { decideBotMove, getBotMoves } from \"utils/onePlayerHelpers\";\r\nimport firebase from \"../firebase\";\r\nimport { GAME_MODES } from \"utils/constants\";\r\nimport { getKingStatus } from \"rules/getKingStatus\";\r\n\r\nconst useGameState = ({ gameMode, gameId, userId }) => {\r\n  const defaultTurn = \"white\";\r\n  const defaultFallen = {\r\n    white: [],\r\n    black: []\r\n  };\r\n\r\n  const [gameState, setGameState] = useState({\r\n    board: defaultBoard,\r\n    turn: defaultTurn,\r\n    fallen: defaultFallen,\r\n    inCheck: \"\",\r\n    inCheckmate: \"\"\r\n  });\r\n  console.log({gameState})\r\n\r\n  const [gameExists, setGameExists] = useState(true);\r\n\r\n  const { board, turn, fallen, users } = gameState;\r\n\r\n  const isOnePlayer = gameMode === GAME_MODES.ONE_PLAYER.TECHNICAL_NAME;\r\n  const isTwoPlayer = gameMode === GAME_MODES.TWO_PLAYER.TECHNICAL_NAME;\r\n  const isOnlinePlay = gameMode === GAME_MODES.ONLINE_PLAY.TECHNICAL_NAME;\r\n  const opponent = getOpponent(turn);\r\n  const playerColorOnline = users && users[userId].color;\r\n  const baselinePlayer =\r\n    isOnePlayer || isTwoPlayer ? \"white\" : playerColorOnline;\r\n\r\n  async function gameListener() {\r\n    if (isOnlinePlay) {\r\n      firebase.database.ref(`games/${gameId}`).on(\"value\", async snapshot => {\r\n        const game = snapshot.val();\r\n        if (game) {\r\n          setGameState({\r\n            ...game,\r\n            board:\r\n              game.users[userId].color === \"black\"\r\n                ? mirrorBoard(game.board)\r\n                : game.board,\r\n            fallen: game.fallen\r\n              ? {\r\n                  black: game.fallen.black || [],\r\n                  white: game.fallen.white || []\r\n                }\r\n              : defaultFallen,\r\n            users: game.users,\r\n            inCheck: game.inCheck,\r\n            inCheckmate: game.inCheckmate\r\n          });\r\n        } else {\r\n          setGameExists(false);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function handlePerformMove(sourceCoords, destinationCoords) {\r\n    if (validateMove(sourceCoords, destinationCoords)) {\r\n      performMove(sourceCoords, destinationCoords);\r\n    }\r\n  }\r\n\r\n  function validateMove(sourceCoords, destinationCoords) {\r\n    return performValidation({\r\n      board,\r\n      sourceCoords,\r\n      destinationCoords,\r\n      player: turn,\r\n      baselinePlayer\r\n    });\r\n  }\r\n\r\n  async function performMove(sourceCoords, destinationCoords) {\r\n    const newGameState = getNextGameState(sourceCoords, destinationCoords);\r\n    if (isOnePlayer || isTwoPlayer) {\r\n      setGameState(newGameState);\r\n    } else if (isOnlinePlay) {\r\n      try {\r\n        await firebase.updateGame(gameId, newGameState);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  }\r\n\r\n  function getNextGameState(sourceCoords, destinationCoords) {\r\n    const nextBoard = getNextBoard(board, sourceCoords, destinationCoords);\r\n    const opponentKingStatus = getKingStatus(nextBoard, opponent);\r\n    return {\r\n      board: handleMirroredBoard(nextBoard),\r\n      turn: opponentKingStatus !== \"checkmate\" ? opponent : turn,\r\n      fallen: getUpdatedFallen(\r\n        getTargetPiece(board, destinationCoords),\r\n        fallen\r\n      ),\r\n      inCheck: opponentKingStatus === \"check\" ? opponent : \"\",\r\n      inCheckmate: opponentKingStatus === \"checkmate\" ? opponent : \"\"\r\n    };\r\n  }\r\n\r\n  function performBotMove() {\r\n    const selectedMove = decideBotMove(getBotMoves(board));\r\n    console.log(\"selectedMove\", selectedMove);\r\n    const nextGameState = getNextGameState(\r\n      selectedMove.source.coords,\r\n      selectedMove.destination.coords\r\n    );\r\n    setGameState(nextGameState);\r\n  }\r\n\r\n  function canMovePiece(pieceColor) {\r\n    if (turn === pieceColor) {\r\n      if (isOnePlayer) {\r\n        return turn === \"white\";\r\n      }\r\n      if (isTwoPlayer) {\r\n        return true;\r\n      }\r\n      if (isOnlinePlay) {\r\n        return users && users[userId].color === turn;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function updateSquare(coords, value) {\r\n    const boardCopy = getUpdatedBoard(board, coords, value);\r\n    updateBoard(boardCopy);\r\n  }\r\n\r\n  function handleMirroredBoard(board) {\r\n    return baselinePlayer === \"black\" ? mirrorBoard(board) : board;\r\n  }\r\n\r\n  function updateBoard(newBoard) {\r\n    if (isOnlinePlay) {\r\n      firebase.updateGame(gameId, { board: handleMirroredBoard(newBoard) });\r\n    } else {\r\n      setGameState({ ...gameState, board: newBoard });\r\n    }\r\n  }\r\n\r\n  async function switchTurns() {\r\n    const newGameState = {\r\n      ...gameState,\r\n      board: handleMirroredBoard(board),\r\n      turn: getOpponent(turn)\r\n    };\r\n    if (isOnePlayer || isTwoPlayer) {\r\n      setGameState(newGameState);\r\n    } else if (isOnlinePlay) {\r\n      try {\r\n        await firebase.updateGame(gameId, newGameState);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (gameId && userId) {\r\n      gameListener();\r\n    }\r\n  }, [gameId, userId, gameMode]);\r\n\r\n  return {\r\n    gameState,\r\n    setGameState,\r\n    handlePerformMove,\r\n    validateMove,\r\n    performBotMove,\r\n    canMovePiece,\r\n    updateSquare,\r\n    performMove,\r\n    updateBoard,\r\n    gameExists,\r\n    switchTurns\r\n  };\r\n};\r\n\r\nexport default useGameState;\r\n","import React, { Fragment, useContext } from \"react\";\r\nimport DashboardButton from \"components/dashboard-button\";\r\nimport { getPrettyFromTechnicalName } from \"utils/helpers\";\r\nimport { GAME_MODES, GAME_TYPES } from \"utils/constants\";\r\nimport Context from \"context\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport firebase from \"../../../firebase\";\r\nimport defaultBoard from \"lineups/defaultBoard\";\r\nimport useGameState from \"hooks/useGameState\";\r\n\r\nconst ChallengeButton = ({\r\n  opponentId,\r\n  updateGameRequest,\r\n  joinGame,\r\n  toggleShowCreateGame\r\n}) => {\r\n  const { user } = useContext(Context);\r\n\r\n  const { gameState } = useGameState({\r\n    gameMode: GAME_MODES.ONLINE_PLAY.TECHNICAL_NAME,\r\n    gameId: user.games && user.games[opponentId],\r\n    userId: user.id\r\n  });\r\n\r\n  const handleStartNewGame = async (opponentId, gameSettings) => {\r\n    const newGameId = `game-${uuid().split(\"-\")[0]}`;\r\n    try {\r\n      await firebase.updateGame(newGameId, {\r\n        users: {\r\n          [user.id]: {\r\n            color: \"white\"\r\n          },\r\n          [opponentId]: {\r\n            color: \"black\"\r\n          }\r\n        },\r\n        board: defaultBoard,\r\n        turn: \"white\",\r\n        settings: {...gameSettings}\r\n      });\r\n      await updateGameRequest(opponentId, user.id, null);\r\n      await firebase.updateUser(user.id, \"games\", { [opponentId]: newGameId });\r\n      await firebase.updateUser(opponentId, \"games\", { [user.id]: newGameId });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    joinGame(gameSettings.gameType, newGameId);\r\n  };\r\n\r\n  const getButton = () => {\r\n    let button = (\r\n      <DashboardButton\r\n        displayText={\"Challenge\"}\r\n        onClick={() => toggleShowCreateGame(true)}\r\n        fullLength\r\n      />\r\n    );\r\n    if (user.requestsOutgoing && user.requestsOutgoing[opponentId]) {\r\n      button = (\r\n        <DashboardButton\r\n          displayText={\"Challenge request sent\"}\r\n          onClick={() => updateGameRequest(user.id, opponentId, null)}\r\n          type={\"warning\"}\r\n          fullLength\r\n        />\r\n      );\r\n    }\r\n    if (user.requestsIncoming && user.requestsIncoming[opponentId]) {\r\n      const gameSettings = user.requestsIncoming[opponentId]\r\n      const gameType = gameSettings.gameType\r\n      const gameTypeText = getPrettyFromTechnicalName(GAME_TYPES, gameType);\r\n      button = (\r\n        <DashboardButton\r\n          displayText={`Incoming ${gameTypeText} request. Click to play!`}\r\n          onClick={() => handleStartNewGame(opponentId, gameSettings)}\r\n          type={\"accept\"}\r\n          fullLength\r\n        />\r\n      );\r\n    }\r\n    if (gameState.users) {\r\n      // Todo: fetch gametype from game object\r\n      const gameType = gameState.settings.gameType;\r\n      button = (\r\n        <DashboardButton\r\n          displayText={\"Game in progress. Join Game\"}\r\n          onClick={() => joinGame(gameType, user.games[opponentId])}\r\n          type={\"accept\"}\r\n          fullLength\r\n        />\r\n      );\r\n    }\r\n    return button;\r\n  };\r\n\r\n  return <Fragment>{getButton()}</Fragment>;\r\n};\r\n\r\nexport default ChallengeButton;\r\n","import React, { useContext, useState } from \"react\";\r\nimport useAvailableUsers from \"hooks/useAvailableUsers\";\r\nimport CreateGame from \"components/create-game\";\r\nimport ChallengeButton from \"components/dashboard-online/challenge-button\";\r\nimport Context from \"context\";\r\nimport firebase from \"../../../firebase\";\r\nimport styles from \"./ChallengePlayer.module.scss\";\r\n\r\nconst ChallengePlayer = ({ history }) => {\r\n  const { user } = useContext(Context);\r\n  const { availableUsers } = useAvailableUsers(user.id);\r\n  const [showCreateGame, toggleShowCreateGame] = useState(false);\r\n\r\n  const updateGameRequest = async (outgoingUserId, incomingUserId, value) => {\r\n    try {\r\n      await firebase.updateUser(incomingUserId, \"requestsIncoming\", {\r\n        [outgoingUserId]: value\r\n      });\r\n      await firebase.updateUser(outgoingUserId, \"requestsOutgoing\", {\r\n        [incomingUserId]: value\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const joinGame = (gameType, gameId) => {\r\n    history.push(`/${gameType}?game=${gameId}`);\r\n  };\r\n\r\n  const onCreateGameSubmit = async (settings, opponentId) => {\r\n    toggleShowCreateGame(false);\r\n    try {\r\n      await updateGameRequest(user.id, opponentId, {...settings});\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.root}>\r\n\r\n      {availableUsers.length > 0 && (\r\n        <div>\r\n          <h3>Users online</h3>\r\n          {availableUsers.map(availableUser => (\r\n            <div key={`challenge-${availableUser}`} className={styles.content}>\r\n              <p>{availableUser.name}</p>\r\n              {!showCreateGame && (\r\n                <ChallengeButton\r\n                  opponentId={availableUser.id}\r\n                  toggleShowCreateGame={toggleShowCreateGame}\r\n                  updateGameRequest={updateGameRequest}\r\n                  joinGame={joinGame}\r\n                />\r\n              )}\r\n              {showCreateGame && (\r\n                <CreateGame\r\n                  onSubmit={settings =>\r\n                    onCreateGameSubmit(settings, availableUser.id)\r\n                  }\r\n                  noHeader\r\n                  submitText=\"Click here to challenge\"\r\n                />\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChallengePlayer;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./InputForm.module.scss\";\r\n\r\nconst InputForm = ({\r\n  inputType,\r\n  placeholder,\r\n  autoComplete,\r\n  submit,\r\n  submitText,\r\n  validateInput,\r\n  label\r\n}) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const onChange = e => setInputValue(e.target.value);\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    submit(inputValue);\r\n    setInputValue(\"\");\r\n  };\r\n  return (\r\n    <form className={styles.root} onSubmit={onSubmit}>\r\n      {label && <label>{label}</label>}\r\n      <input\r\n        type={inputType}\r\n        onChange={onChange}\r\n        placeholder={placeholder}\r\n        value={inputValue}\r\n        autoComplete={autoComplete}\r\n      />\r\n      <input\r\n        className={styles.submit}\r\n        type=\"submit\"\r\n        value={submitText}\r\n        disabled={!validateInput(inputValue)}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nInputForm.defaultProps = {\r\n  validateInput: () => true\r\n};\r\n\r\nInputForm.propTypes = {\r\n  validateInput: PropTypes.func\r\n};\r\n\r\nexport default InputForm;\r\n","import React from \"react\";\r\nimport InputForm from \"components/input-form\";\r\nimport firebase from \"../../../firebase\";\r\n\r\nconst NameInput = ({ user, updateAvailableUser }) => {\r\n  const submitName = async name => {\r\n    try {\r\n      await firebase.setUser(user.id, \"name\", name);\r\n      await updateAvailableUser(user.id, true);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <InputForm\r\n        inputType=\"text\"\r\n        placeholder=\"Enter your nickname\"\r\n        submitText=\"Ok\"\r\n        submit={submitName}\r\n        validateInput={input => input.length > 0}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NameInput;\r\n","import React from \"react\";\r\nimport cx from \"classnames\";\r\nimport styles from \"./UserAvailability.module.scss\";\r\n\r\nconst UserAvailability = ({ user, userAvailable, updateAvailableUser }) => {\r\n  const toggleAvailability = async () => {\r\n    try {\r\n      await updateAvailableUser(user.id, userAvailable ? null : true);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p className={styles.message}>\r\n        Hello {user.name}! -{\" \"}\r\n        <span\r\n          className={cx({\r\n            [styles.available]: userAvailable,\r\n            [styles.unavailable]: !userAvailable\r\n          })}\r\n          onClick={toggleAvailability}\r\n        >\r\n          {userAvailable ? \"Available\" : \"Unavailable\"}\r\n        </span>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserAvailability;\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport Context from \"context\";\r\nimport firebase from \"../../firebase\";\r\nimport ChallengePlayer from \"components/dashboard-online/challenge-player\";\r\nimport NameInput from \"components/dashboard-online/name-input\";\r\n\r\nimport useAvailableUsers from \"hooks/useAvailableUsers\";\r\nimport UserAvailability from \"components/dashboard-online/user-availability\";\r\n\r\nconst DashboardOnline = ({ history }) => {\r\n  const { user } = useContext(Context);\r\n\r\n  const { userAvailable, updateAvailableUser } = useAvailableUsers(\r\n    user && user.id\r\n  );\r\n\r\n  const login = async () => {\r\n    try {\r\n      await firebase.login();\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!user) {\r\n      login();\r\n    }\r\n  }, [user]);\r\n\r\n  if (user) {\r\n    return (\r\n      <div>\r\n        <h3>Online play</h3>\r\n        {user.name && (\r\n          <UserAvailability\r\n            user={user}\r\n            userAvailable={userAvailable}\r\n            updateAvailableUser={updateAvailableUser}\r\n          />\r\n        )}\r\n        {!user.name && (\r\n          <NameInput user={user} updateAvailableUser={updateAvailableUser} />\r\n        )}\r\n        {user.name && userAvailable && <ChallengePlayer history={history} />}\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nexport default DashboardOnline;\r\n","import React, { useContext, useState } from \"react\";\r\n\r\nimport SelectGameMode from \"components/select-game-mode\";\r\nimport CreateGame from \"components/create-game\";\r\nimport { GAME_MODES } from \"utils/constants\";\r\nimport Context from \"context\";\r\nimport DashboardOnline from \"components/dashboard-online\";\r\n\r\nimport styles from \"./Dashboard.module.scss\";\r\n\r\nconst Dashboard = ({ history }) => {\r\n  const { gameSettings } = useContext(Context);\r\n  const { updateGameSettings } = gameSettings;\r\n  const [section, setSection] = useState(\"selectGameMode\");\r\n\r\n  const onGameModeClick = gameMode => {\r\n    updateGameSettings({ gameMode });\r\n    if (gameMode === GAME_MODES.ONLINE_PLAY.TECHNICAL_NAME) {\r\n      setSection(\"online\");\r\n    } else {\r\n      setSection(\"createGame\");\r\n    }\r\n  };\r\n\r\n  const onCreateGameSubmit = settings => {\r\n    updateGameSettings(settings);\r\n    history.push(`/${settings.gameType}`);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.root}>\r\n      {section === \"selectGameMode\" && (\r\n        <SelectGameMode history={history} onGameModeClick={onGameModeClick} />\r\n      )}\r\n      {section === \"online\" && <DashboardOnline history={history} />}\r\n      {section === \"createGame\" && <CreateGame onSubmit={onCreateGameSubmit} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport cx from \"classnames\";\n\nimport styles from \"./Square.module.scss\";\n\nconst Square = memo(\n  ({ children, coords, handleOnClick, isGreen, isDraggingOver }) => {\n    const className = cx({\n      [styles.root]: true,\n      [styles.green]: isGreen,\n      [styles.highlighted]: isDraggingOver\n    });\n    return (\n      <div className={className} onClick={() => handleOnClick(coords)}>\n        {children}\n      </div>\n    );\n  }\n);\n\nSquare.defaultProps = {\n  handleOnClick: () => {}\n};\n\nSquare.propTypes = {\n  coords: PropTypes.string.isRequired,\n  handleOnClick: PropTypes.func\n};\n\nexport default Square;\n","import React, { useContext, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport cx from \"classnames\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport { getCoords, getSquareDetails } from \"utils/helpers\";\nimport Square from \"components/square\";\nimport styles from \"./Board.module.scss\";\nimport Context from \"context\";\nimport { GAME_MODES } from \"utils/constants\";\n\n// king on left for white\n// king on right for black\n\nconst Board = ({\n  board,\n  getSquaresChild,\n  onDragEnd,\n  turn,\n  users,\n  onSquareSelect\n}) => {\n  const { user, gameSettings } = useContext(Context);\n  const { gameMode } = gameSettings;\n  const [draggedPieceCoords, setDraggedPieceCoords] = useState(\"\");\n  const rows = [];\n  const isGreen = coords => {\n    const isEven = n => n % 2 === 0;\n    const evenRow = isEven(Number(coords[0]));\n    const evenSquare = isEven(Number(coords[1]));\n    return evenRow ? !evenSquare : evenSquare;\n  };\n\n  const isSquareDroppable = coords =>\n    getSquareDetails(coords, board).player === turn &&\n    coords !== draggedPieceCoords;\n\n  const onDragStart = a => {\n    setDraggedPieceCoords(a.source.droppableId);\n  };\n\n  const handleOnDragEnd = a => {\n    if (a.destination) {\n      onDragEnd(a);\n    }\n  };\n\n  board.forEach((row, rowIdx) => {\n    const squares = [];\n\n    row.forEach((square, squareIdx) => {\n      const coords = getCoords(rowIdx, squareIdx);\n      squares.push(\n        <Droppable\n          key={`square-${coords}`}\n          droppableId={coords}\n          isDropDisabled={isSquareDroppable(coords)}\n        >\n          {(provided, snapshot) => {\n            return (\n              <div ref={provided.innerRef} {...provided.droppableProps}>\n                <Square\n                  coords={coords}\n                  isGreen={isGreen(coords)}\n                  isDraggingOver={snapshot.isDraggingOver}\n                  handleOnClick={onSquareSelect}\n                >\n                  {getSquaresChild(square)}\n                </Square>\n              </div>\n            );\n          }}\n        </Droppable>\n      );\n    });\n    rows.push(squares);\n  });\n\n  function isIndicatorActive(baseline) {\n    if (users) {\n      const playerColor = users[user.id].color;\n      return baseline ? playerColor === turn : playerColor !== turn;\n    }\n    if (gameMode === GAME_MODES.ONE_PLAYER.TECHNICAL_NAME) {\n      return false;\n    }\n    if (gameMode === GAME_MODES.TWO_PLAYER.TECHNICAL_NAME) {\n      return baseline ? turn === \"white\" : turn === \"black\";\n    }\n  }\n\n  const topActive = isIndicatorActive();\n  const baselineActive = isIndicatorActive(true);\n  const indicatorClassname = baseline =>\n    cx({\n      [styles.indicator]: true,\n      [styles.active]: baseline ? baselineActive : topActive\n    });\n\n  return (\n    <DragDropContext onDragEnd={handleOnDragEnd} onDragStart={onDragStart}>\n      <div className={indicatorClassname()} />\n      <div\n        className={cx({\n          [styles.board]: true,\n          [styles.topActive]: topActive,\n          [styles.baselineActive]: baselineActive\n        })}\n      >\n        {rows}\n      </div>\n      <div className={indicatorClassname(true)} />\n    </DragDropContext>\n  );\n};\n\nBoard.defaultProps = {\n  onDragEnd: () => {},\n  onSquareSelect: () => {}\n};\n\nBoard.propTypes = {\n  board: PropTypes.array.isRequired,\n  boardWidth: PropTypes.number,\n  onDragEnd: PropTypes.func,\n  onSquareSelect: PropTypes.func\n};\n\nexport default Board;\n","import React, { memo } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome/index\";\nimport { Draggable } from \"react-beautiful-dnd\";\n\nimport styles from \"./Piece.module.scss\";\n\nexport const Piece = memo(({ id, icon, available, pieceColor, inCheck }) => {\n  const piece = (\n    <FontAwesomeIcon\n      className={styles.root}\n      icon={icon}\n      cursor={available ? \"pointer\" : \"cursor\"}\n      color={\n        pieceColor === \"white\"\n          ? inCheck\n            ? \"#d85656\"\n            : \"#c7c7c7\"\n          : inCheck\n          ? \"#560000\"\n          : \"black\"\n      }\n      size=\"2x\"\n    />\n  );\n  if (!available) {\n    return <div>{piece}</div>;\n  } else\n    return (\n      <Draggable isDragDisabled={!available} draggableId={id} index={0}>\n        {(provided, snapshot) => {\n          return (\n            <div\n              ref={provided.innerRef}\n              {...provided.draggableProps}\n              {...provided.dragHandleProps}\n            >\n              {piece}\n            </div>\n          );\n        }}\n      </Draggable>\n    );\n});\n","import React from \"react\";\r\nimport { Piece } from \"components/piece\";\r\nimport { getPieceProps } from \"utils/helpers\";\r\n\r\nimport styles from \"./Fallen.module.scss\";\r\n\r\nconst Fallen = ({ fallen }) => (\r\n  <div className={styles.root}>\r\n    {fallen.map(piece => (\r\n      <div key={`fallen-${piece.pieceId}`} className={styles.piece}>\r\n        <Piece\r\n          key={`fallen-${piece.pieceId}`}\r\n          icon={getPieceProps(piece.pieceId).icon}\r\n          player={piece.player}\r\n          pieceId={piece.pieceId}\r\n          pieceColor={piece.player}\r\n          isDraggable={false}\r\n        />\r\n      </div>\r\n    ))}\r\n  </div>\r\n);\r\nexport default Fallen;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport DashboardButton from \"components/dashboard-button\";\r\n\r\nimport styles from \"./TriviaBox.module.scss\";\r\n\r\nconst TriviaBox = ({\r\n  difficulty,\r\n  categoryId,\r\n  onAnswerCorrect,\r\n  onAnswerIncorrect\r\n}) => {\r\n  const [trivia, setTrivia] = useState({});\r\n  const [options, setOptions] = useState([]);\r\n  const [answer, setAnswer] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    getQuestion();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (trivia.question) {\r\n      getMixedOptions();\r\n    }\r\n  }, [trivia]);\r\n\r\n  useEffect(() => {\r\n    if (answer) {\r\n      handleAnswerQuestion();\r\n    }\r\n  }, [answer]);\r\n\r\n  function getQuestion() {\r\n    fetch(\r\n      `https://opentdb.com/api.php?amount=10&type=multiple&difficulty=${difficulty}&category=${categoryId}&amount=1`,\r\n      {\r\n        method: \"GET\"\r\n      }\r\n    )\r\n      .then(res => res.json())\r\n      .then(response => setTrivia(response.results[0]))\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  function handleAnswerQuestion() {\r\n    const answeredCorrect = answer === trivia.correct_answer;\r\n    setTimeout(() => {\r\n      if (answeredCorrect) {\r\n        onAnswerCorrect();\r\n      } else {\r\n        onAnswerIncorrect();\r\n      }\r\n    }, 1500)\r\n\r\n  }\r\n\r\n  function getMixedOptions() {\r\n    const randomIndex = Math.floor(\r\n      Math.random() * trivia.incorrect_answers.length + 1\r\n    );\r\n    let options = [...trivia.incorrect_answers];\r\n    options.splice(randomIndex, 0, trivia.correct_answer);\r\n    setOptions(options);\r\n  }\r\n\r\n  function getOptionType(option) {\r\n    if (answer) {\r\n      return option === trivia.correct_answer ? \"accept\" : \"error\";\r\n    }\r\n    return \"default\";\r\n  }\r\n\r\n  if (trivia.question) {\r\n    return (\r\n      <div className={styles.root}>\r\n        <div\r\n          className={styles.question}\r\n          dangerouslySetInnerHTML={{ __html: trivia.question }}\r\n        />\r\n        {options.map((option, i) => (\r\n          <DashboardButton\r\n            key={i}\r\n            displayText={option}\r\n            onClick={() => !answer && setAnswer(option)}\r\n            fullLength\r\n            spaceBottom\r\n            useHtml\r\n            type={getOptionType(option)}\r\n            notAvailable={answer}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nTriviaBox.defaultProps = {\r\n  difficulty: \"easy\",\r\n  categoryId: 9\r\n};\r\n\r\nTriviaBox.propTypes = {\r\n  difficulty: PropTypes.string,\r\n  categoryId: PropTypes.number\r\n};\r\n\r\nexport default TriviaBox;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport Board from \"components/board\";\r\nimport { Piece } from \"components/piece\";\r\nimport { getOpponent, getPieceProps, getUrlParam } from \"utils/helpers\";\r\nimport useGameState from \"hooks/useGameState\";\r\nimport Context from \"context\";\r\nimport { GAME_MODES } from \"utils/constants\";\r\nimport Fallen from \"components/fallen\";\r\nimport TriviaBox from \"components/trivia-box\";\r\n\r\nconst StandardChess = ({ history }) => {\r\n  const { user, gameSettings } = useContext(Context);\r\n  const { gameMode, setGameId } = gameSettings;\r\n  const gameId = getUrlParam(\"game\");\r\n  const userId = user && user.id;\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const {\r\n    gameState,\r\n    handlePerformMove,\r\n    performBotMove,\r\n    canMovePiece,\r\n    gameExists\r\n  } = useGameState({\r\n    gameMode,\r\n    userId,\r\n    gameId\r\n  });\r\n\r\n  const isOnePlayer = gameMode === GAME_MODES.ONE_PLAYER.TECHNICAL_NAME;\r\n  const isTwoPlayer = gameMode === GAME_MODES.TWO_PLAYER.TECHNICAL_NAME;\r\n  const isOnlinePlay = gameMode === GAME_MODES.ONLINE_PLAY.TECHNICAL_NAME;\r\n  const { board, turn, fallen, users, inCheck, inCheckmate } = gameState;\r\n\r\n  useEffect(() => {\r\n    if (gameId) {\r\n      setGameId(gameId);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    handleNextTurn();\r\n  }, [turn]);\r\n\r\n  useEffect(() => {\r\n    handleSetMessage();\r\n  }, [inCheck, inCheckmate]);\r\n\r\n  useEffect(() => {\r\n    console.log({ gameExists });\r\n    if (!gameExists) {\r\n      history.push(\"/\");\r\n    }\r\n  }, [gameExists]);\r\n\r\n  function onDrop(a) {\r\n    const sourceCoords = a.source.droppableId;\r\n    const destinationCoords = a.destination.droppableId;\r\n    handlePerformMove(sourceCoords, destinationCoords);\r\n  }\r\n\r\n  function handleNextTurn() {\r\n    if (isOnePlayer && turn === \"black\" && !inCheckmate) {\r\n      performBotMove();\r\n    }\r\n  }\r\n\r\n  function getPiece(square) {\r\n    const { player, pieceId, inCheck } = square;\r\n    return square.pieceId ? (\r\n      <Piece\r\n        key={`${player}-${pieceId}`}\r\n        id={`${player}-${pieceId}`}\r\n        icon={getPieceProps(pieceId).icon}\r\n        pieceColor={player}\r\n        inCheck={inCheck}\r\n        available={canMovePiece(player)}\r\n      />\r\n    ) : null;\r\n  }\r\n\r\n  function getFallen(baseline) {\r\n    if (isOnlinePlay && users) {\r\n      const playerColor = users[userId].color;\r\n      return baseline ? fallen[getOpponent(playerColor)] : fallen[playerColor];\r\n    } else {\r\n      return baseline ? fallen.black : fallen.white;\r\n    }\r\n  }\r\n\r\n  function handleSetMessage() {\r\n    let message = \"\";\r\n    if (inCheck) {\r\n      message = `${turn} in check`;\r\n    }\r\n    if (inCheckmate) {\r\n      message = `Checkmate. ${turn} wins`;\r\n    }\r\n    setMessage(message);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>{message}</div>\r\n      <Fallen fallen={getFallen()} />\r\n      <Board\r\n        board={board}\r\n        getSquaresChild={getPiece}\r\n        onDragEnd={onDrop}\r\n        turn={turn}\r\n        users={users}\r\n      />\r\n      <Fallen fallen={getFallen(true)} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StandardChess;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport Board from \"components/board\";\r\nimport { Piece } from \"components/piece\";\r\nimport {\r\n  getOpponent,\r\n  getPieceProps,\r\n  getSquareDetails,\r\n  getUpdatedBoard,\r\n  getUpdatedFallen,\r\n  getUrlParam,\r\n  loopBoard,\r\n  mirrorBoard\r\n} from \"utils/helpers\";\r\nimport useGameState from \"hooks/useGameState\";\r\nimport Context from \"context\";\r\nimport { EMPTY_SQUARE, GAME_MODES } from \"utils/constants\";\r\nimport Fallen from \"components/fallen\";\r\nimport firebase from \"../../../firebase\";\r\nimport { decideBotMove, getBotMoves } from \"utils/onePlayerHelpers\";\r\n\r\nimport styles from \"./TrapdoorChess.module.scss\";\r\n\r\nconst TrapdoorChess = ({ history }) => {\r\n  const { user, gameSettings } = useContext(Context);\r\n  const { gameMode, trapdoorsAmount, setGameId } = gameSettings;\r\n  const gameId = getUrlParam(\"game\");\r\n  const userId = user && user.id;\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const {\r\n    gameState,\r\n    setGameState,\r\n    updateSquare,\r\n    updateBoard,\r\n    canMovePiece,\r\n    validateMove,\r\n    performMove,\r\n    gameExists\r\n  } = useGameState({\r\n    gameMode,\r\n    userId,\r\n    gameId\r\n  });\r\n\r\n  const isOnePlayer = gameMode === GAME_MODES.ONE_PLAYER.TECHNICAL_NAME;\r\n  const isTwoPlayer = gameMode === GAME_MODES.TWO_PLAYER.TECHNICAL_NAME;\r\n  const isOnlinePlay = gameMode === GAME_MODES.ONLINE_PLAY.TECHNICAL_NAME;\r\n  const { board, turn, fallen, users, inCheck, inCheckmate } = gameState;\r\n  const trapdoorsSet = countTrapdoors();\r\n  const allTrapdoorsSet = trapdoorsSet === trapdoorsAmount;\r\n\r\n  useEffect(() => {\r\n    if (gameId) {\r\n      setGameId(gameId);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    handleNextTurn();\r\n  }, [turn]);\r\n\r\n  useEffect(() => {\r\n    handleSetMessage();\r\n  }, [board, inCheck, inCheckmate, trapdoorsAmount]);\r\n\r\n  useEffect(() => {\r\n    if (isOnePlayer) {\r\n      setBotTrapdoors();\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log({ gameExists });\r\n    if (!gameExists) {\r\n      history.push(\"/\");\r\n    }\r\n  }, [gameExists]);\r\n\r\n  function onDrop(move) {\r\n    const sourceCoords = move.source.droppableId;\r\n    const destinationCoords = move.destination.droppableId;\r\n    if (validateMove(sourceCoords, destinationCoords)) {\r\n      handleTrapdoor(sourceCoords, destinationCoords);\r\n    }\r\n  }\r\n\r\n  function handleNextTurn() {\r\n    if (isOnePlayer && turn === \"black\" && !inCheckmate) {\r\n      const selectedMove = decideBotMove(getBotMoves(board));\r\n      const { source, destination } = selectedMove;\r\n      handleTrapdoor(source.coords, destination.coords);\r\n    }\r\n  }\r\n\r\n  function handleTrapdoor(sourceCoords, destinationCoords) {\r\n    const square = getSquareDetails(destinationCoords, board);\r\n    if (square.trapdoor) {\r\n      handleFallenInTrapdoor(sourceCoords);\r\n    } else {\r\n      performMove(sourceCoords, destinationCoords);\r\n    }\r\n  }\r\n\r\n  function handleFallenInTrapdoor(sourceCoords) {\r\n    const updatedBoard = getUpdatedBoard(board, sourceCoords, EMPTY_SQUARE);\r\n    const updatedFallen = getUpdatedFallen(\r\n      getSquareDetails(sourceCoords, board),\r\n      gameState.fallen\r\n    );\r\n    const sharedState = {\r\n      turn: getOpponent(turn),\r\n      fallen: updatedFallen\r\n    };\r\n    if (isOnePlayer) {\r\n      setGameState({ ...gameState, ...sharedState, board: updatedBoard });\r\n    }\r\n    if (isOnlinePlay) {\r\n      firebase.updateGame(gameId, {\r\n        ...sharedState,\r\n        board:\r\n          users[userId].color === \"black\"\r\n            ? mirrorBoard(updatedBoard)\r\n            : updatedBoard\r\n      });\r\n    }\r\n  }\r\n\r\n  function getSquare(square) {\r\n    const { player, pieceId, trapdoor } = square;\r\n    const piece = pieceId && (\r\n      <Piece\r\n        key={`${player}-${pieceId}`}\r\n        id={`${player}-${pieceId}`}\r\n        icon={getPieceProps(pieceId).icon}\r\n        pieceColor={player}\r\n        available={allTrapdoorsSet && canMovePiece(player)}\r\n      />\r\n    );\r\n    if (trapdoor && trapdoor[getPlayerColor()]) {\r\n      return <div className={styles.trapdoor}>{square.pieceId && piece}</div>;\r\n    }\r\n    return piece || null;\r\n  }\r\n\r\n  function countTrapdoors() {\r\n    const playerColor = getPlayerColor();\r\n    let count = 0;\r\n    loopBoard(board, ({ square }) => {\r\n      if (square.trapdoor && square.trapdoor[playerColor]) {\r\n        count++;\r\n      }\r\n    });\r\n    return count;\r\n  }\r\n\r\n  function setTrapdoor(coords) {\r\n    if (!allTrapdoorsSet) {\r\n      const square = getSquareDetails(coords, board);\r\n      if (square.pieceId) {\r\n        return;\r\n      }\r\n      updateSquare(coords, {\r\n        ...square,\r\n        trapdoor: { ...square.trapdoor, [getPlayerColor()]: true }\r\n      });\r\n    }\r\n  }\r\n\r\n  function setBotTrapdoors() {\r\n    const emptySquares = [];\r\n    const trapdoorCoords = [];\r\n    let newBoard = board;\r\n    loopBoard(\r\n      board,\r\n      ({ square, coords }) => !square.pieceId && emptySquares.push(coords)\r\n    );\r\n    while (trapdoorCoords.length < trapdoorsAmount) {\r\n      const randomIndex = Math.floor(Math.random() * emptySquares.length);\r\n      const coords = emptySquares[randomIndex];\r\n      if (!trapdoorCoords.includes(coords)) {\r\n        trapdoorCoords.push(coords);\r\n      }\r\n    }\r\n    trapdoorCoords.forEach(coords => {\r\n      coords.toString();\r\n      const square = getSquareDetails(coords, board);\r\n      newBoard = getUpdatedBoard(newBoard, coords, {\r\n        ...square,\r\n        trapdoor: { ...square.trapdoor, black: true }\r\n      });\r\n    });\r\n    updateBoard(newBoard);\r\n  }\r\n\r\n  function getPlayerColor() {\r\n    if (isOnlinePlay && gameState.users) {\r\n      return gameState.users[userId].color;\r\n    }\r\n    if (isOnePlayer) {\r\n      return \"white\";\r\n    }\r\n  }\r\n\r\n  function getFallen(baseline) {\r\n    if (isOnlinePlay && users) {\r\n      const playerColor = users[userId].color;\r\n      return baseline ? fallen[getOpponent(playerColor)] : fallen[playerColor];\r\n    } else {\r\n      return baseline ? fallen.black : fallen.white;\r\n    }\r\n  }\r\n\r\n  function handleSetMessage() {\r\n    let message = \"\";\r\n    if (inCheck) {\r\n      message = `${turn} in check`;\r\n    }\r\n    if (inCheckmate) {\r\n      message = `Checkmate. ${turn} wins`;\r\n    }\r\n    if (!allTrapdoorsSet) {\r\n      message = `Set your trapdoors. ${trapdoorsAmount - trapdoorsSet} left`;\r\n    }\r\n    setMessage(message);\r\n  }\r\n\r\n  return (\r\n    <div className={styles.root}>\r\n      <h4>{message}</h4>\r\n      <Fallen fallen={getFallen()} />\r\n      <Board\r\n        board={board}\r\n        getSquaresChild={getSquare}\r\n        onDragEnd={onDrop}\r\n        turn={turn}\r\n        users={users}\r\n        onSquareSelect={setTrapdoor}\r\n      />\r\n      <Fallen fallen={getFallen(true)} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrapdoorChess;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport Board from \"components/board\";\r\nimport { Piece } from \"components/piece\";\r\nimport { getOpponent, getPieceProps, getSquareDetails, getUrlParam } from \"utils/helpers\";\r\nimport useGameState from \"hooks/useGameState\";\r\nimport Context from \"context\";\r\nimport { GAME_MODES } from \"utils/constants\";\r\nimport Fallen from \"components/fallen\";\r\nimport TriviaBox from \"components/trivia-box\";\r\nimport { decideBotMove, getBotMoves } from \"utils/onePlayerHelpers\";\r\n\r\nconst TriviaChess = ({ history }) => {\r\n  const { user, gameSettings } = useContext(Context);\r\n  const { gameMode, setGameId } = gameSettings;\r\n  const gameId = getUrlParam(\"game\");\r\n  const userId = user && user.id;\r\n  const [message, setMessage] = useState(\"\");\r\n  const [pendingMove, setPendingMove] = useState(null);\r\n\r\n  const {\r\n    gameState,\r\n    canMovePiece,\r\n    gameExists,\r\n    validateMove,\r\n    performMove,\r\n    switchTurns,\r\n    handlePerformMove,\r\n  } = useGameState({\r\n    gameMode,\r\n    userId,\r\n    gameId\r\n  });\r\n\r\n  const isOnePlayer = gameMode === GAME_MODES.ONE_PLAYER.TECHNICAL_NAME;\r\n  const isTwoPlayer = gameMode === GAME_MODES.TWO_PLAYER.TECHNICAL_NAME;\r\n  const isOnlinePlay = gameMode === GAME_MODES.ONLINE_PLAY.TECHNICAL_NAME;\r\n  const { board, turn, fallen, users, inCheck, inCheckmate } = gameState;\r\n\r\n  useEffect(() => {\r\n    if (gameId) {\r\n      setGameId(gameId);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setPendingMove(null);\r\n    handleNextTurn();\r\n  }, [turn]);\r\n\r\n  useEffect(() => {\r\n    handleSetMessage();\r\n  }, [inCheck, inCheckmate]);\r\n\r\n  useEffect(() => {\r\n    console.log({ gameExists });\r\n    if (!gameExists) {\r\n      history.push(\"/\");\r\n    }\r\n  }, [gameExists]);\r\n\r\n  function onDrop(move) {\r\n    const sourceCoords = move.source.droppableId;\r\n    const destinationCoords = move.destination.droppableId;\r\n    if (validateMove(sourceCoords, destinationCoords)) {\r\n      if (getSquareDetails(destinationCoords, board).pieceId) {\r\n        setPendingMove({ sourceCoords, destinationCoords });\r\n      } else {\r\n        handlePerformMove(sourceCoords, destinationCoords);\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  function handleAnswer(correct) {\r\n    const { sourceCoords, destinationCoords } = pendingMove;\r\n    if (isOnePlayer && turn === \"black\") {\r\n      if (correct) {\r\n        switchTurns();\r\n      } else {\r\n        performMove(sourceCoords, destinationCoords);\r\n      }\r\n    } else {\r\n      if (correct) {\r\n        performMove(sourceCoords, destinationCoords);\r\n      } else {\r\n        switchTurns();\r\n      }\r\n    }\r\n}\r\n\r\n  function handleNextTurn() {\r\n    if (isOnePlayer && turn === \"black\" && !inCheckmate) {\r\n      const selectedMove = decideBotMove(getBotMoves(board));\r\n      const { source, destination } = selectedMove;\r\n      const sourceCoords = source.coords\r\n      const destinationCoords = destination.coords\r\n      if (getSquareDetails(destinationCoords, board).pieceId) {\r\n        setPendingMove({ sourceCoords, destinationCoords });\r\n      } else {\r\n        performMove(sourceCoords, destinationCoords)\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  function getPiece(square) {\r\n    const { player, pieceId, inCheck } = square;\r\n    return square.pieceId ? (\r\n      <Piece\r\n        key={`${player}-${pieceId}`}\r\n        id={`${player}-${pieceId}`}\r\n        icon={getPieceProps(pieceId).icon}\r\n        pieceColor={player}\r\n        inCheck={inCheck}\r\n        available={canMovePiece(player)}\r\n      />\r\n    ) : null;\r\n  }\r\n\r\n  function getFallen(baseline) {\r\n    if (isOnlinePlay && users) {\r\n      const playerColor = users[userId].color;\r\n      return baseline ? fallen[getOpponent(playerColor)] : fallen[playerColor];\r\n    } else {\r\n      return baseline ? fallen.black : fallen.white;\r\n    }\r\n  }\r\n\r\n  function handleSetMessage() {\r\n    let message = \"\";\r\n    if (inCheck) {\r\n      message = `${turn} in check`;\r\n    }\r\n    if (inCheckmate) {\r\n      message = `Checkmate. ${turn} wins`;\r\n    }\r\n    setMessage(message);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>{message}</div>\r\n      <Fallen fallen={getFallen()} />\r\n      <Board\r\n        board={board}\r\n        getSquaresChild={getPiece}\r\n        onDragEnd={onDrop}\r\n        turn={turn}\r\n        users={users}\r\n      />\r\n      <Fallen fallen={getFallen(true)} />\r\n      {pendingMove && (\r\n        <TriviaBox\r\n          onAnswerCorrect={() => handleAnswer(true)}\r\n          onAnswerIncorrect={() => handleAnswer(false)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TriviaChess;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport styles from \"./Header.module.scss\";\r\n\r\nconst Header = () => (\r\n  <header className={styles.root}>\r\n    <NavLink to=\"/\">\r\n      <h3>Chess World</h3>\r\n    </NavLink>\r\n\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport firebase from \"../firebase\";\r\n\r\nconst useUser = () => {\r\n  const [user, setUser] = useState(null);\r\n\r\n  useEffect(() => {\r\n    firebase.auth().onAuthStateChanged(user => {\r\n      if (user) {\r\n        firebase.database\r\n          .ref(`users/${user.uid}`)\r\n          .on(\"value\", snapshot =>\r\n            setUser({ id: user.uid, ...snapshot.val() })\r\n          );\r\n      } else {\r\n        setUser(null);\r\n      }\r\n    });\r\n  }, []);\r\n  return user;\r\n};\r\n\r\nexport default useUser;\r\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\n\nimport Dashboard from \"components/dashboard\";\nimport StandardChess from \"components/game-types/standard\";\nimport TrapdoorChess from \"components/game-types/trapdoor\";\nimport TriviaChess from \"components/game-types/trivia\";\nimport Header from \"components/header\";\nimport useGameSettings from \"hooks/useGameSettings\";\nimport useUser from \"hooks/useUser\";\nimport Context from \"context\";\n\nimport styles from \"./App.module.scss\";\n\nconst App = () => {\n  const gameSettings = useGameSettings();\n  const user = useUser();\n  return (\n    <BrowserRouter>\n      <Context.Provider value={{ gameSettings, user }}>\n        <div className={styles.root}>\n          <Header />\n          <Switch>\n            <Route exact path=\"/\" render={() => <Redirect to=\"/dashboard\" />} />\n            <Route exact path=\"/dashboard\" component={Dashboard} />\n            <Route path=\"/standard\" component={StandardChess} />\n            <Route path=\"/trapdoor\" component={TrapdoorChess} />\n            <Route path=\"/trivia\" component={TriviaChess} />\n          </Switch>\n        </div>\n      </Context.Provider>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/app/index.js\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./styles/styles.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"Board_board__VI41k\",\"topActive\":\"Board_topActive__1tXhL\",\"baselineActive\":\"Board_baselineActive__1z51G\",\"indicator\":\"Board_indicator__21jle\",\"active\":\"Board_active__2kUJI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"UserAvailability_message__vGWFx\",\"available\":\"UserAvailability_available__wV27I\",\"unavailable\":\"UserAvailability_unavailable__1asah\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Square_root__1usdT\",\"green\":\"Square_green__2D9iu\",\"highlighted\":\"Square_highlighted__pzRZ4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"SelectGameMode_root__2sxIw\",\"selects\":\"SelectGameMode_selects__3jQmA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"CreateGame_root__dpDbY\",\"trapdoors\":\"CreateGame_trapdoors__3Ba-E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ChallengePlayer_root__3BMVV\",\"content\":\"ChallengePlayer_content__2cRob\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"InputForm_root__2TkZV\",\"submit\":\"InputForm_submit__3reta\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Fallen_root__2_rMR\",\"piece\":\"Fallen_piece__3QaxV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TriviaBox_root__1gamZ\",\"question\":\"TriviaBox_question__11Ode\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TrapdoorChess_root__3wGcc\",\"trapdoor\":\"TrapdoorChess_trapdoor__2-7GT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"SelectGameType_root__2ucn_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Dashboard_root__2zfaS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Piece_root__3FxB5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Header_root__11Phv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"App_root__11l45\"};"],"sourceRoot":""}