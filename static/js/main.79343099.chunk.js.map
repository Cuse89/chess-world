{"version":3,"sources":["components/dashboard-button/DashboardButton.module.scss","components/dashboard-button/index.js","utils/constants.js","components/select-game-mode/index.js","context.js","components/select-game-type/index.js","firebase/config.js","firebase/firebase.js","firebase/index.js","hooks/useGameSettings.js","components/create-game/index.js","hooks/useAvailableUsers.js","rules/pawnValidation.js","rules/rookValidation.js","rules/bishopValidation.js","rules/knightValidation.js","rules/kingValidation.js","utils/onePlayerHelpers.js","rules/getKingStatus.js","utils/helpers.js","lineups/defaultBoard.js","hooks/useGameState.js","components/dashboard-online/challenge-button/index.js","components/dashboard-online/challenge-player/index.js","components/input-form/index.js","components/dashboard-online/name-input/index.js","components/dashboard-online/user-availability/index.js","components/dashboard-online/index.js","components/dashboard/index.js","components/square/index.js","components/board/index.js","components/piece/index.js","components/fallen/index.js","components/game-types/standard/index.js","components/game-types/trapdoor/index.js","components/trivia-box/index.js","components/game-types/trivia/index.js","components/header/index.js","hooks/useUser.js","components/app/index.js","serviceWorker.js","index.js","components/board/Board.module.scss","components/dashboard-online/user-availability/UserAvailability.module.scss","components/square/Square.module.scss","components/select-game-mode/SelectGameMode.module.scss","components/create-game/CreateGame.module.scss","components/dashboard-online/challenge-player/ChallengePlayer.module.scss","components/input-form/InputForm.module.scss","components/fallen/Fallen.module.scss","components/game-types/trapdoor/TrapdoorChess.module.scss","components/trivia-box/TriviaBox.module.scss","components/select-game-type/SelectGameType.module.scss","components/dashboard/Dashboard.module.scss","components/piece/Piece.module.scss","components/header/Header.module.scss","components/app/App.module.scss"],"names":["module","exports","DashboardButton","displayText","onClick","type","fullLength","selected","spaceRight","spaceBottom","useHtml","notAvailable","className","cx","styles","root","default","error","warning","accept","dangerouslySetInnerHTML","__html","defaultProps","GAME_MODES","TECHNICAL_NAME","PRETTY","GAME_TYPES","STANDARD","TRAPDOOR","TRIVIA","DEFAULT_FALLEN","white","black","EMPTY_SQUARE","player","pieceId","TRAPDOOR_AMOUNTS","GAME_MODE_HAS_GAME_TYPE","SelectGameMode","onGameModeClick","selects","React","createContext","SelectGameType","onChange","gameType","gameMode","useContext","Context","gameSettings","includes","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","firebaseApp","this","auth","database","signInWithPopup","GoogleAuthProvider","signOut","userId","key","value","ref","set","update","ids","filterFunc","users","once","then","allUsers","val","Object","keys","forEach","push","id","gameId","console","log","on","snapshot","useGameSettings","useState","setGameId","trapdoorsAmount","setGameSettings","updateGameSettings","useCallback","setting","useEffect","getGameSettingsFromDb","CreateGame","onSubmit","noHeader","submitText","trapdoors","map","amount","useCompact","useAvailableUsers","allAvailableUsers","setAvailableUsers","userAvailable","setUserAvailable","availableUsers","filter","user","updateAvailableUser","a","getAvailableUsersFromIds","getUsersFromIds","pawnValidation","sourceCoords","destinationCoords","board","captureOnly","baselinePlayer","getSquareDetails","targetSquareOccupied","length","move","parseInt","eligibleColumn","rookValidation","vertical","index","forwards","position","end","bishopValidation","Number","isInteger","sWnE","up","i","coords","toString","knightValidation","kingValidation","getThreats","threatenedPlayer","threatenedPlayerCoords","threats","loopBoard","square","threateningPlayer","performValidation","getBotMoves","moves","prevSquare","nextSquare","nextBoard","getNextBoard","source","strength","getPieceProps","destination","kingStatusYou","getKingStatus","kingStatusOpponent","defenders","checkmate","decideBotMove","selectedMove","score","targetIsThreatened","targetIsDefended","scoreLog","join","wouldPutOpponentInCheckmate","moveChosen","randomMove","Math","random","kingPlayer","kingPos","availableCoords","coord","isCheckmate","split","icon","faChessPawn","validateMove","faChessRook","faChessKnight","faChessBishop","faChessKing","faChessQueen","boardCopy","JSON","parse","stringify","getUpdatedBoard","sourceSquare","destinationSquare","func","row","rowIdx","squareIdx","concat","getOpponent","turn","getUpdatedFallen","targetPiece","fallen","getTargetPiece","getUrlParam","queryString","window","location","search","URLSearchParams","get","mirrorBoard","boardMirrored","reverse","useGameState","defaultBoard","inCheck","inCheckmate","gameState","setGameState","gameExists","setGameExists","isOnePlayer","isTwoPlayer","isOnlinePlay","opponent","playerColorOnline","color","performMove","newGameState","getNextGameState","updateGame","opponentKingStatus","handleMirroredBoard","updateBoard","newBoard","game","handlePerformMove","performBotMove","nextGameState","canMovePiece","pieceColor","updateSquare","switchTurns","ChallengeButton","opponentId","updateGameRequest","joinGame","toggleShowCreateGame","games","handleStartNewGame","newGameId","uuid","settings","updateUser","button","requestsOutgoing","requestsIncoming","gameTypeText","obj","technicalName","getPrettyFromTechnicalName","getButton","ChallengePlayer","history","showCreateGame","outgoingUserId","incomingUserId","onCreateGameSubmit","availableUser","content","name","InputForm","inputType","placeholder","autoComplete","submit","validateInput","label","inputValue","setInputValue","e","preventDefault","target","disabled","NameInput","submitName","setUser","input","UserAvailability","toggleAvailability","message","available","unavailable","DashboardOnline","login","Dashboard","section","setSection","Square","memo","children","handleOnClick","isGreen","isDraggingOver","green","highlighted","Board","getSquaresChild","onDragEnd","onSquareSelect","draggedPieceCoords","setDraggedPieceCoords","rows","isEven","n","evenRow","evenSquare","isSquareDroppable","isIndicatorActive","baseline","playerColor","squares","col","getCoords","droppableId","isDropDisabled","provided","innerRef","droppableProps","topActive","baselineActive","indicatorClassname","indicator","active","onDragStart","Piece","piece","cursor","size","isDragDisabled","draggableId","draggableProps","dragHandleProps","Fallen","isDraggable","StandardChess","setMessage","getFallen","handleSetMessage","TrapdoorChess","trapdoorsSet","getPlayerColor","count","trapdoor","countTrapdoors","trapdoorsLeft","handleTrapdoor","updatedBoard","updatedFallen","sharedState","handleFallenInTrapdoor","handleNextTurn","emptySquares","trapdoorCoords","randomIndex","floor","setBotTrapdoors","TriviaBox","difficulty","categoryId","onAnswerCorrect","onAnswerIncorrect","trivia","setTrivia","options","setOptions","answer","setAnswer","fetch","method","res","json","response","results","catch","err","question","incorrect_answers","splice","correct_answer","getMixedOptions","answeredCorrect","setTimeout","handleAnswerQuestion","getOptionType","option","TriviaChess","pendingMove","setPendingMove","handleAnswer","correct","Header","to","useUser","onAuthStateChanged","uid","App","Provider","exact","path","render","component","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.79343099.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"DashboardButton_root__b3wgq\",\"fullLength\":\"DashboardButton_fullLength__1-Itn\",\"default\":\"DashboardButton_default__2v6kX\",\"selected\":\"DashboardButton_selected__1F4pu\",\"error\":\"DashboardButton_error__197pd\",\"warning\":\"DashboardButton_warning__31R0D\",\"accept\":\"DashboardButton_accept__2aoRz\",\"spaceRight\":\"DashboardButton_spaceRight__b-uIW\",\"spaceBottom\":\"DashboardButton_spaceBottom__119x8\",\"notAvailable\":\"DashboardButton_notAvailable__2PODn\"};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport cx from \"classnames\";\nimport styles from \"components/dashboard-button/DashboardButton.module.scss\";\n\nconst DashboardButton = ({\n  displayText,\n  onClick,\n  type,\n  fullLength,\n  selected,\n  spaceRight,\n  spaceBottom,\n  useHtml,\n  notAvailable\n}) => {\n  const className = cx({\n    [styles.root]: true,\n    [styles.default]: type === \"default\",\n    [styles.error]: type === \"error\",\n    [styles.warning]: type === \"warning\",\n    [styles.accept]: type === \"accept\",\n    [styles.fullLength]: fullLength,\n    [styles.selected]: selected,\n    [styles.spaceRight]: spaceRight,\n    [styles.spaceBottom]: spaceBottom,\n    [styles.notAvailable]: notAvailable\n  });\n\n  return (\n    <div className={className} onClick={onClick}>\n      {!useHtml ? (\n        displayText\n      ) : (\n        <div dangerouslySetInnerHTML={{ __html: displayText }} />\n      )}\n    </div>\n  );\n};\n\nDashboardButton.defaultProps = {\n  type: \"default\"\n};\n\nDashboardButton.propTypes = {\n  id: PropTypes.string,\n  type: PropTypes.oneOf([\"default\", \"error\", \"warning\", \"accept\"])\n};\n\nexport default DashboardButton;\n","export const GAME_MODES = {\n  ONE_PLAYER: {\n    TECHNICAL_NAME: \"onePlayer\",\n    PRETTY: \"One Player\"\n  },\n  TWO_PLAYER: {\n    TECHNICAL_NAME: \"twoPlayer\",\n    PRETTY: \"Two Player\"\n  },\n  ONLINE_PLAY: {\n    TECHNICAL_NAME: \"onlinePlay\",\n    PRETTY: \"Online Play\"\n  }\n};\n\nexport const GAME_TYPES = {\n  STANDARD: {\n    TECHNICAL_NAME: \"standard\",\n    PRETTY: \"Standard Chess\"\n  },\n  TRAPDOOR: {\n    TECHNICAL_NAME: \"trapdoor\",\n    PRETTY: \"Trapdoor Chess\"\n  },\n  TRIVIA: {\n    TECHNICAL_NAME: \"trivia\",\n    PRETTY: \"Trivia Chess\"\n  }\n};\n\nexport const DEFAULT_TURN = \"white\";\nexport const DEFAULT_FALLEN = {\n  white: [],\n  black: []\n}\n\nexport const EMPTY_SQUARE = {\n  player: \"\",\n  pieceId: \"\"\n};\n\nexport const TRAPDOOR_AMOUNTS = [1, 2, 3, 4];\nexport const DEFAULT_TRAPDOOR_AMOUNT = 1;\n\nexport const GAME_MODE_HAS_GAME_TYPE = {\n  [GAME_MODES.ONE_PLAYER.TECHNICAL_NAME]: [\n    GAME_TYPES.STANDARD.TECHNICAL_NAME,\n    GAME_TYPES.TRAPDOOR.TECHNICAL_NAME,\n    GAME_TYPES.TRIVIA.TECHNICAL_NAME\n  ],\n  [GAME_MODES.TWO_PLAYER.TECHNICAL_NAME]: [\n    GAME_TYPES.STANDARD.TECHNICAL_NAME,\n    GAME_TYPES.TRIVIA.TECHNICAL_NAME\n  ],\n  [GAME_MODES.ONLINE_PLAY.TECHNICAL_NAME]: [\n    GAME_TYPES.STANDARD.TECHNICAL_NAME,\n    GAME_TYPES.TRAPDOOR.TECHNICAL_NAME,\n    GAME_TYPES.TRIVIA.TECHNICAL_NAME\n  ],\n};\n","import React from \"react\";\nimport DashboardButton from \"components/dashboard-button\";\nimport { GAME_MODES } from \"utils/constants\";\nimport styles from \"./SelectGameMode.module.scss\"\n\nconst SelectGameMode = ({ onGameModeClick }) => (\n  <div className={styles.root}>\n      <h3>Select game mode</h3>\n      <div className={styles.selects}>\n          <DashboardButton\n            displayText={GAME_MODES.ONE_PLAYER.PRETTY}\n            onClick={() => onGameModeClick(GAME_MODES.ONE_PLAYER.TECHNICAL_NAME)}\n            spaceRight\n          />\n          <DashboardButton\n            displayText={GAME_MODES.TWO_PLAYER.PRETTY}\n            onClick={() => onGameModeClick(GAME_MODES.TWO_PLAYER.TECHNICAL_NAME)}\n            spaceRight\n          />\n          <DashboardButton\n            displayText={GAME_MODES.ONLINE_PLAY.PRETTY}\n            onClick={() => onGameModeClick(GAME_MODES.ONLINE_PLAY.TECHNICAL_NAME)}\n            spaceRight\n          />\n      </div>\n\n  </div>\n);\n\nexport default SelectGameMode;\n","import React from \"react\";\r\nexport default React.createContext(null);\r\n","import React, { useContext } from \"react\";\r\nimport { GAME_MODE_HAS_GAME_TYPE, GAME_TYPES } from \"utils/constants\";\r\nimport DashboardButton from \"components/dashboard-button\";\r\nimport Context from \"context\";\r\n\r\nimport styles from \"./SelectGameType.module.scss\";\r\n\r\nconst SelectGameType = ({ onChange, gameType }) => {\r\n  const { gameSettings } = useContext(Context);\r\n  const { gameMode } = gameSettings;\r\n  return (\r\n    <div className={styles.root}>\r\n      {GAME_MODE_HAS_GAME_TYPE[gameMode].includes(\r\n        GAME_TYPES.STANDARD.TECHNICAL_NAME\r\n      ) && (\r\n        <DashboardButton\r\n          displayText={GAME_TYPES.STANDARD.PRETTY}\r\n          onClick={() => onChange(GAME_TYPES.STANDARD.TECHNICAL_NAME)}\r\n          selected={gameType === GAME_TYPES.STANDARD.TECHNICAL_NAME}\r\n          fullLength\r\n          spaceRight\r\n          spaceBottom\r\n        />\r\n      )}\r\n      {GAME_MODE_HAS_GAME_TYPE[gameMode].includes(\r\n        GAME_TYPES.TRAPDOOR.TECHNICAL_NAME\r\n      ) && (\r\n        <DashboardButton\r\n          displayText={GAME_TYPES.TRAPDOOR.PRETTY}\r\n          onClick={() => onChange(GAME_TYPES.TRAPDOOR.TECHNICAL_NAME)}\r\n          selected={gameType === GAME_TYPES.TRAPDOOR.TECHNICAL_NAME}\r\n          fullLength\r\n          spaceRight\r\n          spaceBottom\r\n        />\r\n      )}\r\n      {GAME_MODE_HAS_GAME_TYPE[gameMode].includes(\r\n        GAME_TYPES.TRIVIA.TECHNICAL_NAME\r\n      ) && (\r\n        <DashboardButton\r\n          displayText={GAME_TYPES.TRIVIA.PRETTY}\r\n          onClick={() => onChange(GAME_TYPES.TRIVIA.TECHNICAL_NAME)}\r\n          selected={gameType === GAME_TYPES.TRIVIA.TECHNICAL_NAME}\r\n          fullLength\r\n          spaceRight\r\n          spaceBottom\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectGameType;\r\n","const firebaseConfig = {\r\n  apiKey: \"AIzaSyDR2LsF89JCIuOEg8O8QSX7idf-7YQxQpw\",\r\n  authDomain: \"chess-world-1.firebaseapp.com\",\r\n  databaseURL: \"https://chess-world-1.firebaseio.com\",\r\n  projectId: \"chess-world-1\",\r\n  storageBucket: \"chess-world-1.appspot.com\",\r\n  messagingSenderId: \"325750297860\",\r\n  appId: \"1:325750297860:web:f3e87f15718e6eef042c51\",\r\n  measurementId: \"G-Z47ZS64MTT\"\r\n};\r\n\r\nexport default firebaseConfig;\r\n","import * as firebaseApp from \"firebase\";\r\nimport \"firebase/analytics\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport firebaseConfig from \"firebase/config\";\r\n\r\nclass Firebase {\r\n  constructor() {\r\n    firebaseApp.initializeApp(firebaseConfig);\r\n    firebaseApp.analytics();\r\n    this.auth = firebaseApp.auth;\r\n    this.database = firebaseApp.database();\r\n  }\r\n\r\n  async login() {\r\n    await this.auth().signInWithPopup(new firebase.auth.GoogleAuthProvider());\r\n  }\r\n\r\n  async logout() {\r\n    await this.auth().signOut();\r\n  }\r\n\r\n  async setUser(userId, key, value) {\r\n    await this.database.ref(`users/${userId}/${key}`).set(value);\r\n  }\r\n\r\n  async updateUser(userId, key, value) {\r\n    await this.database.ref(`users/${userId}/${key}`).update(value);\r\n  }\r\n\r\n  async getUsersFromIds(ids, filterFunc = () => true) {\r\n    const users = [];\r\n    return await firebase.database\r\n      .ref(\"users\")\r\n      .once(\"value\")\r\n      .then(allUsers => {\r\n        ids.val() &&\r\n          Object.keys(ids.val()).forEach(userId => {\r\n            if (filterFunc(userId)) {\r\n              users.push({ ...allUsers.val()[userId], id: userId });\r\n            }\r\n          });\r\n        return users;\r\n      });\r\n  }\r\n\r\n  async updateGame(gameId, value) {\r\n    console.log(\"updateGame\", gameId, value);\r\n    await this.database.ref(`games/${gameId}`).update(value);\r\n  }\r\n\r\n  async getGameSettings(gameId) {\r\n    return firebase.database\r\n      .ref(`games/${gameId}/settings`)\r\n      .on(\"value\", snapshot => snapshot.val());\r\n  }\r\n}\r\n\r\nconst firebase = new Firebase();\r\nexport default firebase;\r\n","import firebase from \"./firebase\";\n\nexport default firebase;\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport {\r\n  DEFAULT_TRAPDOOR_AMOUNT,\r\n  GAME_MODES,\r\n  GAME_TYPES\r\n} from \"utils/constants\";\r\n\r\nimport firebase from \"../firebase\";\r\n\r\nconst useGameSettings = () => {\r\n  const [gameId, setGameId] = useState(\"\");\r\n  const [gameSettings, setGameSettings] = useState({\r\n    gameMode: GAME_MODES.ONE_PLAYER.TECHNICAL_NAME,\r\n    gameType: GAME_TYPES.STANDARD.TECHNICAL_NAME,\r\n    trapdoorsAmount: DEFAULT_TRAPDOOR_AMOUNT\r\n  });\r\n\r\n  const updateGameSettings = useCallback(\r\n    setting => {\r\n      setGameSettings({ ...gameSettings, ...setting });\r\n    },\r\n    [gameSettings]\r\n  );\r\n\r\n  useEffect(() => {\r\n    const getGameSettingsFromDb = gameId => {\r\n      firebase.database\r\n        .ref(`games/${gameId}/settings`)\r\n        .on(\"value\", snapshot => {\r\n          updateGameSettings({\r\n            ...snapshot.val(),\r\n            gameMode: GAME_MODES.ONLINE_PLAY.TECHNICAL_NAME\r\n          });\r\n        });\r\n    };\r\n    if (gameId) {\r\n      getGameSettingsFromDb(gameId);\r\n    }\r\n  }, [gameId, updateGameSettings]);\r\n\r\n  return { updateGameSettings, setGameId, ...gameSettings };\r\n};\r\nexport default useGameSettings;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport SelectGameType from \"components/select-game-type\";\r\nimport DashboardButton from \"components/dashboard-button\";\r\nimport useGameSettings from \"hooks/useGameSettings\";\r\nimport { GAME_TYPES, TRAPDOOR_AMOUNTS } from \"utils/constants\";\r\n\r\nimport styles from \"./CreateGame.module.scss\";\r\n\r\nconst CreateGame = ({ onSubmit, noHeader, submitText }) => {\r\n  const { updateGameSettings, gameType, trapdoorsAmount } = useGameSettings();\r\n  const handleOnSubmit = () => {\r\n    onSubmit({ gameType, trapdoorsAmount });\r\n  };\r\n\r\n  return (\r\n    <div className={styles.root}>\r\n      {!noHeader && <h3>Create your game</h3>}\r\n      <SelectGameType\r\n        onChange={gameType => updateGameSettings({ gameType })}\r\n        gameType={gameType}\r\n      />\r\n      {gameType === GAME_TYPES.TRAPDOOR.TECHNICAL_NAME && (\r\n        <div>\r\n          <h4>Amount of trapdoors per player</h4>\r\n          <div className={styles.trapdoors}>\r\n            {TRAPDOOR_AMOUNTS.map(amount => (\r\n              <DashboardButton\r\n                key={`trapdoor-button-${amount}`}\r\n                displayText={amount}\r\n                onClick={() => updateGameSettings({ trapdoorsAmount: amount })}\r\n                selected={amount === trapdoorsAmount}\r\n                fullLength\r\n                spaceBottom\r\n                spaceRight\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n      <DashboardButton\r\n        displayText={submitText}\r\n        onClick={handleOnSubmit}\r\n        fullLength\r\n        type=\"warning\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nCreateGame.defaultProps = {\r\n  useCompact: true,\r\n  noHeader: false,\r\n  submitText: \"Submit\"\r\n};\r\n\r\nCreateGame.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n  useCompact: PropTypes.bool,\r\n  noHeader: PropTypes.bool,\r\n  submitText: PropTypes.string\r\n};\r\n\r\nexport default CreateGame;\r\n","import { useState, useEffect } from \"react\";\r\nimport firebase from \"../firebase\";\r\n\r\nconst useAvailableUsers = userId => {\r\n  const [allAvailableUsers, setAvailableUsers] = useState([]);\r\n  const [userAvailable, setUserAvailable] = useState(false);\r\n  const availableUsers = allAvailableUsers.filter(user => user.id !== userId);\r\n  const getAvailableUsersIds = () =>\r\n    firebase.database\r\n      .ref(\"availableUsers\")\r\n      .on(\"value\", async allAvailableUsers => {\r\n        const getAvailableUsersFromIds = async () => {\r\n          const users = await firebase.getUsersFromIds(allAvailableUsers);\r\n          setAvailableUsers(users);\r\n        };\r\n\r\n        try {\r\n          await getAvailableUsersFromIds();\r\n        } catch (err) {\r\n          console.log(err);\r\n        }\r\n      });\r\n\r\n  const updateAvailableUser = async (userId, value) => {\r\n    await firebase.database.ref(\"availableUsers\").update({ [userId]: value });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setUserAvailable(allAvailableUsers.map(user => user.id).includes(userId));\r\n  }, [userId, allAvailableUsers]);\r\n\r\n  useEffect(getAvailableUsersIds, []);\r\n\r\n  return { availableUsers, updateAvailableUser, userAvailable };\r\n};\r\n\r\nexport default useAvailableUsers;\r\n","import { getSquareDetails } from \"utils/helpers\";\n\nexport const pawnValidation = ({\n  sourceCoords,\n  destinationCoords,\n  board,\n  captureOnly,\n  baselinePlayer\n}) => {\n  const player = getSquareDetails(sourceCoords, board).player;\n  // captureOnly is validation to see if it can capture only\n  const targetSquareOccupied = captureOnly\n    ? true\n    : getSquareDetails(destinationCoords, board).pieceId.length > 0;\n  const move = parseInt(sourceCoords) - parseInt(destinationCoords);\n  // moved 1 space forward\n  if (move === (player === baselinePlayer ? 10 : -10)) {\n    return !targetSquareOccupied;\n    // moved 2 spaces forward\n  } else if (move === (player === baselinePlayer ? 20 : -20)) {\n    const eligibleColumn = player === baselinePlayer ? 6 : 1;\n    // was moving 2 spaces eligible?\n    // Todo: Dont allow pawn to jump over piece when moving 2 squares\n    return (\n      parseInt(sourceCoords[0]) === eligibleColumn && !targetSquareOccupied\n    );\n    // pawn moved diagonally\n  } else if (\n    move === (player === baselinePlayer ? 9 : -9) ||\n    move === (player === baselinePlayer ? 11 : -11)\n  ) {\n    // was diagonal move eligible?\n    return targetSquareOccupied;\n  } else {\n    return false;\n  }\n};\n","export const rookValidation = ({ sourceCoords, destinationCoords, board }) => {\n  // is next move either vertical or horizontal?\n  if (\n    sourceCoords[0] === destinationCoords[0] ||\n    sourceCoords[1] === destinationCoords[1]\n  ) {\n    const vertical = sourceCoords[0] !== destinationCoords[0];\n    let index = vertical ? 0 : 1;\n    // forwards means up the y or x axis, so up or left\n    const forwards =\n      parseInt(sourceCoords[index]) > parseInt(destinationCoords[index]);\n    let position = parseInt(sourceCoords[index]);\n    let end = parseInt(destinationCoords[index]);\n\n    for (\n      position;\n      forwards ? position >= end : position <= end;\n      forwards ? position-- : position++\n    ) {\n      // dont check first square\n      if (position !== parseInt(sourceCoords[index])) {\n        let piece = null;\n        // has piece been moved vertically?\n        if (vertical) {\n          piece = board[position][destinationCoords[1]];\n          // else if horizontally and if piece is on this square\n        } else {\n          piece = board[destinationCoords[0]][position];\n        }\n\n        if (piece.pieceId && position !== end) {\n          return false;\n        }\n        if (position === end) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n","import { getSquareDetails } from \"utils/helpers\";\n\nexport const bishopValidation = ({\n  sourceCoords,\n  destinationCoords,\n  board,\n}) => {\n  sourceCoords = parseInt(sourceCoords);\n  destinationCoords = parseInt(destinationCoords);\n  // has the piece moved diagonally?\n  if (\n    Number.isInteger((sourceCoords - destinationCoords) / 11) ||\n    Number.isInteger((sourceCoords - destinationCoords) / 9)\n  ) {\n    const sWnE = Number.isInteger((sourceCoords - destinationCoords) / 9);\n    const up = sourceCoords > destinationCoords;\n\n    for (\n      let i = sourceCoords;\n      up ? i >= destinationCoords : i <= destinationCoords;\n      up\n        ? sWnE\n          ? (i = i - 9)\n          : (i = i - 11)\n        : sWnE\n        ? (i = i + 9)\n        : (i = i + 11)\n    ) {\n      let coords = i.toString();\n\n      if (coords[0] > 7 || coords[0] < 0 || coords[1] > 7 || coords[1] < 0) {\n        // square is outside of board boundary\n        return false;\n      }\n      // Convert single digit to 2 (1 to 01)\n      if (coords.length === 1) {\n        coords = \"0\" + coords;\n      }\n      // dont check first square\n      if (i !== sourceCoords) {\n        // if piece is on this square\n        const square = getSquareDetails(coords, board)\n        if (square.pieceId && i !== destinationCoords) {\n          return false\n        }\n        if (i === destinationCoords) {\n          return true\n        }\n      }\n    }\n  }\n  return false;\n};\n","import { getSquareDetails } from \"utils/helpers\";\n\nexport const knightValidation = ({\n  sourceCoords,\n  destinationCoords,\n  board,\n}) => {\n  const availableCoords = [21, -21, 19, -19, 12, -12, 8, -8];\n  if (\n    availableCoords.includes(\n      parseInt(sourceCoords) - parseInt(destinationCoords)\n    )\n  ) {\n    const piece = getSquareDetails(destinationCoords, board)\n    return !!piece;\n  }\n  return false;\n};\n","import { getSquareDetails } from \"utils/helpers\";\n\nexport const kingValidation = ({sourceCoords, destinationCoords, board}) => {\n  const availableCoords = [11, -11, 10, -10, 9, -9, 1, -1, 0];\n  if (availableCoords.includes(parseInt(sourceCoords) - parseInt(destinationCoords))) {\n    const piece = getSquareDetails(destinationCoords, board)\n  return !!piece;\n  }\n  return false;\n};\n","import {\n  getNextBoard,\n  getPieceProps,\n  loopBoard,\n  performValidation\n} from \"./helpers\";\nimport { getKingStatus } from \"rules/getKingStatus\";\n\nexport const getThreats = (threatenedPlayer, threatenedPlayerCoords, board) => {\n  let threats = [];\n\n  loopBoard(board, ({ square, coords }) => {\n    const threateningPlayer =\n      square.player && square.player !== threatenedPlayer && square.player;\n    if (threateningPlayer) {\n      const sourceCoords = coords;\n      // const validateMove = getPieceProps(square.pieceId).validateMove;\n      // threat cant come from that square itself\n      if (\n        performValidation({\n          sourceCoords,\n          destinationCoords: threatenedPlayerCoords,\n          board,\n          player: threateningPlayer,\n          captureOnly: true,\n          baselinePlayer: \"white\"\n        })\n      ) {\n        threats.push(square.pieceId);\n      }\n    }\n  });\n  return threats;\n};\n\nexport const getBotMoves = board => {\n  let moves = [];\n  // find black piece\n  loopBoard(board, ({ square: prevSquare, coords }) => {\n    if (prevSquare.player === \"black\") {\n      // got black piece\n      const sourceCoords = coords;\n\n      // loop through board and see if this piece can move there\n      loopBoard(board, ({ coords, square: nextSquare }) => {\n        const destinationCoords = coords;\n        // console.log('next coords', destinationCoords)\n\n        if (\n          performValidation({\n            board,\n            player: \"black\",\n            sourceCoords,\n            destinationCoords,\n            baselinePlayer: \"white\"\n          })\n        ) {\n          const nextBoard = getNextBoard(\n            board,\n            sourceCoords,\n            destinationCoords\n          );\n\n          let move = {\n            source: {\n              pieceId: prevSquare.pieceId,\n              coords: sourceCoords,\n              strength: getPieceProps(prevSquare.pieceId).strength,\n              threats: getThreats(\"black\", sourceCoords, board)\n            },\n            destination: {\n              pieceId: nextSquare.pieceId && nextSquare.pieceId,\n              coords: destinationCoords,\n              strength:\n                nextSquare.pieceId &&\n                getPieceProps(nextSquare.pieceId).strength,\n              kingStatusYou: getKingStatus(nextBoard, \"black\", \"white\"),\n              kingStatusOpponent: getKingStatus(nextBoard, \"white\", \"white\"),\n              threats: getThreats(\"black\", destinationCoords, nextBoard),\n              defenders: getThreats(\"white\", destinationCoords, nextBoard)\n            }\n          };\n\n          // console.log('bot move handlePerformMove returned true', square && square.player)\n          if (move.destination.strength > 0 || move.destination.checkmate) {\n            moves.push(move);\n          } else if (!nextSquare.player) {\n            moves.push(move);\n          }\n        }\n      });\n    }\n  });\n\n  console.log(\"moves\", moves);\n  return moves;\n};\n\nexport const decideBotMove = (moves) => {\n  let selectedMove = { score: -100 };\n\n  moves.forEach(move => {\n    let score = move.destination.strength || 0;\n    const targetIsThreatened = move.destination.threats.length > 0;\n    const targetIsDefended = move.destination.defenders.length > 0;\n    const scoreLog = [];\n\n    // if the black piece is currently threatened, add points to escape threat\n    if (move.source.threats.length > 0) {\n      score += move.source.strength;\n      scoreLog.push(\n        ` +${move.source.strength} (own strength score) to escape threat`\n      );\n      console.log(\n        `${\n          move.source.pieceId\n        } is currently threatened by ${move.source.threats.join()}`\n      );\n    }\n\n    if (move.destination.kingStatusOpponent === \"checkmate\") {\n      move.wouldPutOpponentInCheckmate = true;\n      scoreLog.push(\" checkmate\");\n    }\n\n    if (move.destination.kingStatusOpponent === \"check\") {\n      // the weaker the player, the higher the score (less to sacrifice)\n      // Todo: decide on score\n      // score += 3\n      console.log(\n        `${move.source.pieceId} can put king in check move this piece`\n      );\n    }\n\n    if (targetIsThreatened) {\n      score -= move.source.strength;\n      scoreLog.push(\n        ` -${\n          move.source.strength\n        } (own strength score) target square is threatened by ${move.destination.threats.join()}`\n      );\n\n      // only add points for targetIsDefended if also targetIsThreatened\n      if (targetIsDefended) {\n        score += move.source.strength;\n        scoreLog.push(\n          ` +${move.source.strength} (own strength score) target square is defended`\n        );\n      }\n    }\n\n    move.score = score;\n    move.scoreLog = scoreLog.join();\n    console.log(\n      `${move.source.pieceId} to ${move.destination.coords}, score ${score}`\n    );\n  });\n\n  moves.forEach(move => {\n    if (move.wouldPutOpponentInCheckmate) {\n      selectedMove = move;\n    } else if (move.score > selectedMove.score) {\n      selectedMove = move;\n    }\n  });\n\n  if (selectedMove.score === 0) {\n    // all available moves are into an empty space i.e at beginning of game\n    let moveChosen = false;\n    while (!moveChosen) {\n      const randomMove = moves[parseInt(Math.random() * moves.length)];\n      if (randomMove.score === 0) {\n        selectedMove = randomMove;\n        moveChosen = true;\n      }\n    }\n  }\n\n  return selectedMove;\n};\n","import { getNextBoard, loopBoard } from \"../utils/helpers\";\nimport { getThreats } from \"utils/onePlayerHelpers\";\nimport { kingValidation } from \"rules/kingValidation\";\n// kingPlayer is the players colour that controls the king in question\n\nexport const getKingStatus = (board, kingPlayer) => {\n  let kingPos = \"\";\n  const getKingPos = ({ square, coords }) => {\n    if (square.player === kingPlayer && square.pieceId === \"king\") {\n      kingPos = coords;\n    }\n  };\n  loopBoard(board, getKingPos);\n\n  const isCheckmate = () => {\n    const potentialCoords = [11, -11, 10, -10, 9, -9, 1, -1, 0];\n    let availableCoords = [];\n\n    potentialCoords.forEach(coord => {\n      let destinationCoords = (kingPos - coord).toString();\n      if (\n        kingValidation({\n          sourceCoords: kingPos,\n          destinationCoords,\n          board,\n          player: kingPlayer\n        })\n      ) {\n        availableCoords.push(destinationCoords);\n      }\n    });\n\n    // filter available coords and take away any that could be threatened if landed on by king\n    availableCoords = availableCoords.filter(destinationCoords => {\n      const threats = getThreats(\n        kingPlayer,\n        destinationCoords,\n        getNextBoard(board, kingPos, destinationCoords)\n      );\n      return threats.length < 1;\n    });\n    return availableCoords.length < 1;\n  };\n\n  if (isCheckmate()) {\n    return \"checkmate\";\n  }\n\n  const isInCheck = () => {\n    return getThreats(kingPlayer, kingPos, board).length > 0;\n  };\n  if (isInCheck()) {\n    return \"check\";\n  }\n\n  return false;\n};\n","import {\n  faChessPawn,\n  faChessRook,\n  faChessKnight,\n  faChessBishop,\n  faChessKing,\n  faChessQueen\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { pawnValidation } from \"../rules/pawnValidation\";\nimport { rookValidation } from \"../rules/rookValidation\";\nimport { bishopValidation } from \"../rules/bishopValidation\";\nimport { knightValidation } from \"../rules/knightValidation\";\nimport { kingValidation } from \"../rules/kingValidation\";\nimport { getKingStatus } from \"../rules/getKingStatus\";\nimport { EMPTY_SQUARE } from \"utils/constants\";\n\nexport const getPieceProps = pieceId => {\n  switch (pieceId && pieceId.split(\"-\")[0]) {\n    case \"pawn\":\n      return {\n        icon: faChessPawn,\n        validateMove: pawnValidation,\n        strength: 1\n      };\n    case \"rook\":\n      return {\n        icon: faChessRook,\n        validateMove: rookValidation,\n        strength: 5\n      };\n    case \"knight\":\n      return {\n        icon: faChessKnight,\n        validateMove: knightValidation,\n        strength: 3\n      };\n    case \"bishop\":\n      return {\n        icon: faChessBishop,\n        validateMove: bishopValidation,\n        strength: 3\n      };\n    case \"king\":\n      return {\n        icon: faChessKing,\n        validateMove: kingValidation,\n        strength: 10\n      };\n    case \"queen\":\n      return {\n        icon: faChessQueen,\n        validateMove: (...params) => {\n          if (rookValidation(...params) || bishopValidation(...params)) {\n            return true;\n          }\n        },\n        strength: 9\n      };\n    default:\n      return null;\n  }\n};\n\nexport const getCoords = (row, col) => {\n  return `${row}${col}`;\n};\n\nexport const getSquareDetails = (coords, board) => {\n  if (\n    coords[0] > 7 ||\n    coords[0] < 0 ||\n    coords[1] > 7 ||\n    coords[1] < 0 ||\n    coords < 0 ||\n    coords > 78\n  ) {\n    return false;\n  }\n  return board[coords[0]][coords[1]];\n};\n\nexport const getNextBoard = (board, sourceCoords, destinationCoords) => {\n  let boardCopy = JSON.parse(JSON.stringify(board));\n  // new square is taken over\n  boardCopy[destinationCoords[0]][destinationCoords[1]] =\n    boardCopy[sourceCoords[0]][sourceCoords[1]];\n  // old square is emptied\n  boardCopy[sourceCoords[0]][sourceCoords[1]] = EMPTY_SQUARE;\n  return boardCopy;\n};\n\nexport const getUpdatedBoard = (board, coords, value) => {\n  let boardCopy = JSON.parse(JSON.stringify(board));\n  boardCopy[coords[0]][coords[1]] = value;\n  return boardCopy;\n};\n\nexport const performValidation = ({\n  board,\n  player,\n  sourceCoords,\n  destinationCoords,\n  baselinePlayer,\n  captureOnly\n}) => {\n  // work out if valid square has been selected, or another of mine\n  const sourceSquare = getSquareDetails(sourceCoords, board);\n  const destinationSquare = getSquareDetails(destinationCoords, board);\n\n  // nextSquare doesnt exist\n  if (!destinationSquare) {\n    return false;\n  }\n  // if clicked on own piece again\n  if (destinationSquare.player === player) {\n    return false;\n    // else perform validation\n  }\n  if (\n    !getPieceProps(sourceSquare.pieceId).validateMove({\n      sourceCoords,\n      destinationCoords,\n      board,\n      baselinePlayer,\n      captureOnly\n    })\n  ) {\n    return false;\n  }\n  const nextBoard = getNextBoard(board, sourceCoords, destinationCoords);\n  const movedSelfIntoCheck =\n    getKingStatus(nextBoard, player, baselinePlayer) === \"check\";\n  return !movedSelfIntoCheck;\n};\n\nexport const loopBoard = (board, func) =>\n  board.forEach((row, rowIdx) => {\n    row.forEach((square, squareIdx) => {\n      const coords = rowIdx.toString().concat(squareIdx);\n      func({ square, coords });\n    });\n  });\n\nexport const getOpponent = turn => (turn === \"white\" ? \"black\" : \"white\");\n\nexport const getUpdatedFallen = (targetPiece, fallen) => {\n  const { player, pieceId } = targetPiece;\n  if (!player) {\n    return fallen;\n  }\n  return {\n    ...fallen,\n    [player]: pieceId ? [...fallen[player], targetPiece] : [...fallen[player]]\n  };\n};\n\nexport const getTargetPiece = (board, destinationCoords) =>\n  board[destinationCoords[0]][destinationCoords[1]];\n\nexport const getPrettyFromTechnicalName = (obj, technicalName) => {\n  const key = Object.keys(obj).filter(\n    key => obj[key].TECHNICAL_NAME === technicalName\n  );\n  return obj[key].PRETTY;\n};\n\nexport const getUrlParam = key => {\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  return urlParams.get(key);\n};\n\nexport const mirrorBoard = board => {\n  let boardCopy = JSON.parse(JSON.stringify(board));\n  const boardMirrored = [...boardCopy].reverse();\n  boardMirrored.forEach(row => row.reverse());\n  return boardMirrored;\n};\n","// IMPORTANT- board coordinates order are y - top to bottom, x - left to right\r\nimport { EMPTY_SQUARE } from \"utils/constants\";\r\n\r\nexport default [\r\n  [\r\n    { player: \"black\", pieceId: \"rook-1\" },\r\n    { player: \"black\", pieceId: \"knight-1\" },\r\n    { player: \"black\", pieceId: \"bishop-1\" },\r\n    { player: \"black\", pieceId: \"king\" },\r\n    { player: \"black\", pieceId: \"queen\" },\r\n    { player: \"black\", pieceId: \"bishop-0\" },\r\n    { player: \"black\", pieceId: \"knight-0\" },\r\n    { player: \"black\", pieceId: \"rook-0\" }\r\n  ],\r\n\r\n  [\r\n    { player: \"black\", pieceId: \"pawn-7\" },\r\n    { player: \"black\", pieceId: \"pawn-6\" },\r\n    { player: \"black\", pieceId: \"pawn-5\" },\r\n    { player: \"black\", pieceId: \"pawn-4\" },\r\n    { player: \"black\", pieceId: \"pawn-3\" },\r\n    { player: \"black\", pieceId: \"pawn-2\" },\r\n    { player: \"black\", pieceId: \"pawn-1\" },\r\n    { player: \"black\", pieceId: \"pawn-0\" }\r\n  ],\r\n  [\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE\r\n  ],\r\n  [\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE\r\n  ],\r\n  [\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE\r\n  ],\r\n  [\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE,\r\n    EMPTY_SQUARE\r\n  ],\r\n  [\r\n    { player: \"white\", pieceId: \"pawn-0\" },\r\n    { player: \"white\", pieceId: \"pawn-1\" },\r\n    { player: \"white\", pieceId: \"pawn-2\" },\r\n    { player: \"white\", pieceId: \"pawn-3\" },\r\n    { player: \"white\", pieceId: \"pawn-4\" },\r\n    { player: \"white\", pieceId: \"pawn-5\" },\r\n    { player: \"white\", pieceId: \"pawn-6\" },\r\n    { player: \"white\", pieceId: \"pawn-7\" }\r\n  ],\r\n  [\r\n    { player: \"white\", pieceId: \"rook-0\" },\r\n    { player: \"white\", pieceId: \"knight-0\" },\r\n    { player: \"white\", pieceId: \"bishop-0\" },\r\n    { player: \"white\", pieceId: \"king\" },\r\n    { player: \"white\", pieceId: \"queen\" },\r\n    { player: \"white\", pieceId: \"bishop-1\" },\r\n    { player: \"white\", pieceId: \"knight-1\" },\r\n    { player: \"white\", pieceId: \"rook-1\" }\r\n  ]\r\n];\r\n","import { useEffect, useState } from \"react\";\r\nimport defaultBoard from \"lineups/defaultBoard\";\r\nimport {\r\n  getNextBoard,\r\n  getOpponent,\r\n  getTargetPiece,\r\n  getUpdatedBoard,\r\n  getUpdatedFallen,\r\n  mirrorBoard,\r\n  performValidation\r\n} from \"utils/helpers\";\r\nimport { decideBotMove, getBotMoves } from \"utils/onePlayerHelpers\";\r\nimport firebase from \"../firebase\";\r\nimport { DEFAULT_FALLEN, DEFAULT_TURN, GAME_MODES } from \"utils/constants\";\r\nimport { getKingStatus } from \"rules/getKingStatus\";\r\n\r\nconst useGameState = ({ gameMode, gameId, userId }) => {\r\n  const [gameState, setGameState] = useState({\r\n    board: defaultBoard,\r\n    turn: DEFAULT_TURN,\r\n    fallen: DEFAULT_FALLEN,\r\n    inCheck: \"\",\r\n    inCheckmate: \"\"\r\n  });\r\n  console.log({ gameState });\r\n  const [gameExists, setGameExists] = useState(true);\r\n\r\n  const { board, turn, fallen, users } = gameState;\r\n\r\n  const isOnePlayer = gameMode === GAME_MODES.ONE_PLAYER.TECHNICAL_NAME;\r\n  const isTwoPlayer = gameMode === GAME_MODES.TWO_PLAYER.TECHNICAL_NAME;\r\n  const isOnlinePlay = gameMode === GAME_MODES.ONLINE_PLAY.TECHNICAL_NAME;\r\n  const opponent = getOpponent(turn);\r\n  const playerColorOnline = users && users[userId].color;\r\n  const baselinePlayer =\r\n    isOnePlayer || isTwoPlayer ? \"white\" : playerColorOnline;\r\n\r\n  function handlePerformMove(sourceCoords, destinationCoords) {\r\n    if (validateMove(sourceCoords, destinationCoords)) {\r\n      performMove(sourceCoords, destinationCoords);\r\n    }\r\n  }\r\n\r\n  function validateMove(sourceCoords, destinationCoords) {\r\n    return performValidation({\r\n      board,\r\n      sourceCoords,\r\n      destinationCoords,\r\n      player: turn,\r\n      baselinePlayer\r\n    });\r\n  }\r\n\r\n  async function performMove(sourceCoords, destinationCoords) {\r\n    const newGameState = getNextGameState(sourceCoords, destinationCoords);\r\n    if (isOnePlayer || isTwoPlayer) {\r\n      setGameState(newGameState);\r\n    } else if (isOnlinePlay) {\r\n      try {\r\n        await firebase.updateGame(gameId, newGameState);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  }\r\n\r\n  function getNextGameState(sourceCoords, destinationCoords) {\r\n    const nextBoard = getNextBoard(board, sourceCoords, destinationCoords);\r\n    const opponentKingStatus = getKingStatus(nextBoard, opponent);\r\n    return {\r\n      board: handleMirroredBoard(nextBoard),\r\n      turn: opponentKingStatus !== \"checkmate\" ? opponent : turn,\r\n      fallen: getUpdatedFallen(\r\n        getTargetPiece(board, destinationCoords),\r\n        fallen\r\n      ),\r\n      inCheck: opponentKingStatus === \"check\" ? opponent : \"\",\r\n      inCheckmate: opponentKingStatus === \"checkmate\" ? opponent : \"\"\r\n    };\r\n  }\r\n\r\n  function performBotMove() {\r\n    const selectedMove = decideBotMove(getBotMoves(board));\r\n    console.log(\"selectedMove\", selectedMove);\r\n    const nextGameState = getNextGameState(\r\n      selectedMove.source.coords,\r\n      selectedMove.destination.coords\r\n    );\r\n    setGameState(nextGameState);\r\n  }\r\n\r\n  function canMovePiece(pieceColor) {\r\n    if (turn === pieceColor) {\r\n      if (isOnePlayer) {\r\n        return turn === \"white\";\r\n      }\r\n      if (isTwoPlayer) {\r\n        return true;\r\n      }\r\n      if (isOnlinePlay) {\r\n        return users && users[userId].color === turn;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function updateSquare(coords, value) {\r\n    const boardCopy = getUpdatedBoard(board, coords, value);\r\n    updateBoard(boardCopy);\r\n  }\r\n\r\n  function handleMirroredBoard(board) {\r\n    return baselinePlayer === \"black\" ? mirrorBoard(board) : board;\r\n  }\r\n\r\n  function updateBoard(newBoard) {\r\n    if (isOnlinePlay) {\r\n      firebase.updateGame(gameId, { board: handleMirroredBoard(newBoard) });\r\n    } else {\r\n      setGameState({ ...gameState, board: newBoard });\r\n    }\r\n  }\r\n\r\n  async function switchTurns() {\r\n    const newGameState = {\r\n      ...gameState,\r\n      board: handleMirroredBoard(board),\r\n      turn: getOpponent(turn)\r\n    };\r\n    console.log(\"switch turns\", newGameState)\r\n    if (isOnePlayer || isTwoPlayer) {\r\n      setGameState(newGameState);\r\n    } else if (isOnlinePlay) {\r\n      try {\r\n        await firebase.updateGame(gameId, newGameState);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const gameListener = () => {\r\n      if (isOnlinePlay) {\r\n        firebase.database.ref(`games/${gameId}`).on(\"value\", async snapshot => {\r\n          const game = snapshot.val();\r\n          if (game) {\r\n            setGameState({\r\n              ...game,\r\n              board:\r\n                game.users[userId].color === \"black\"\r\n                  ? mirrorBoard(game.board)\r\n                  : game.board,\r\n              fallen: game.fallen\r\n                ? {\r\n                    black: game.fallen.black || [],\r\n                    white: game.fallen.white || []\r\n                  }\r\n                : DEFAULT_FALLEN,\r\n              users: game.users,\r\n              inCheck: game.inCheck,\r\n              inCheckmate: game.inCheckmate\r\n            });\r\n          } else {\r\n            setGameExists(false);\r\n          }\r\n        });\r\n      }\r\n    };\r\n    if (gameId && userId) {\r\n      gameListener();\r\n    }\r\n  }, [gameId, userId, isOnlinePlay]);\r\n\r\n  return {\r\n    gameState,\r\n    setGameState,\r\n    handlePerformMove,\r\n    validateMove,\r\n    performBotMove,\r\n    canMovePiece,\r\n    updateSquare,\r\n    performMove,\r\n    updateBoard,\r\n    gameExists,\r\n    switchTurns\r\n  };\r\n};\r\n\r\nexport default useGameState;\r\n","import React, { Fragment, useContext } from \"react\";\r\nimport DashboardButton from \"components/dashboard-button\";\r\nimport { getPrettyFromTechnicalName } from \"utils/helpers\";\r\nimport { GAME_MODES, GAME_TYPES } from \"utils/constants\";\r\nimport Context from \"context\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport firebase from \"../../../firebase\";\r\nimport defaultBoard from \"lineups/defaultBoard\";\r\nimport useGameState from \"hooks/useGameState\";\r\n\r\nconst ChallengeButton = ({\r\n  opponentId,\r\n  updateGameRequest,\r\n  joinGame,\r\n  toggleShowCreateGame\r\n}) => {\r\n  const { user } = useContext(Context);\r\n\r\n  const { gameState } = useGameState({\r\n    gameMode: GAME_MODES.ONLINE_PLAY.TECHNICAL_NAME,\r\n    gameId: user.games && user.games[opponentId],\r\n    userId: user.id\r\n  });\r\n\r\n  const handleStartNewGame = async (opponentId, gameSettings) => {\r\n    const newGameId = `game-${uuid().split(\"-\")[0]}`;\r\n    try {\r\n      await firebase.updateGame(newGameId, {\r\n        users: {\r\n          [user.id]: {\r\n            color: \"white\"\r\n          },\r\n          [opponentId]: {\r\n            color: \"black\"\r\n          }\r\n        },\r\n        board: defaultBoard,\r\n        turn: \"white\",\r\n        settings: {...gameSettings}\r\n      });\r\n      await updateGameRequest(opponentId, user.id, null);\r\n      await firebase.updateUser(user.id, \"games\", { [opponentId]: newGameId });\r\n      await firebase.updateUser(opponentId, \"games\", { [user.id]: newGameId });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    joinGame(gameSettings.gameType, newGameId);\r\n  };\r\n\r\n  const getButton = () => {\r\n    let button = (\r\n      <DashboardButton\r\n        displayText={\"Challenge\"}\r\n        onClick={() => toggleShowCreateGame(true)}\r\n        fullLength\r\n      />\r\n    );\r\n    if (user.requestsOutgoing && user.requestsOutgoing[opponentId]) {\r\n      button = (\r\n        <DashboardButton\r\n          displayText={\"Challenge request sent\"}\r\n          onClick={() => updateGameRequest(user.id, opponentId, null)}\r\n          type={\"warning\"}\r\n          fullLength\r\n        />\r\n      );\r\n    }\r\n    if (user.requestsIncoming && user.requestsIncoming[opponentId]) {\r\n      const gameSettings = user.requestsIncoming[opponentId]\r\n      const gameType = gameSettings.gameType\r\n      const gameTypeText = getPrettyFromTechnicalName(GAME_TYPES, gameType);\r\n      button = (\r\n        <DashboardButton\r\n          displayText={`Incoming ${gameTypeText} request. Click to play!`}\r\n          onClick={() => handleStartNewGame(opponentId, gameSettings)}\r\n          type={\"accept\"}\r\n          fullLength\r\n        />\r\n      );\r\n    }\r\n    if (gameState.users) {\r\n      // Todo: fetch gametype from game object\r\n      const gameType = gameState.settings.gameType;\r\n      button = (\r\n        <DashboardButton\r\n          displayText={\"Game in progress. Join Game\"}\r\n          onClick={() => joinGame(gameType, user.games[opponentId])}\r\n          type={\"accept\"}\r\n          fullLength\r\n        />\r\n      );\r\n    }\r\n    return button;\r\n  };\r\n\r\n  return <Fragment>{getButton()}</Fragment>;\r\n};\r\n\r\nexport default ChallengeButton;\r\n","import React, { useContext, useState } from \"react\";\r\nimport useAvailableUsers from \"hooks/useAvailableUsers\";\r\nimport CreateGame from \"components/create-game\";\r\nimport ChallengeButton from \"components/dashboard-online/challenge-button\";\r\nimport Context from \"context\";\r\nimport firebase from \"../../../firebase\";\r\nimport styles from \"./ChallengePlayer.module.scss\";\r\n\r\nconst ChallengePlayer = ({ history }) => {\r\n  const { user } = useContext(Context);\r\n  const { availableUsers } = useAvailableUsers(user.id);\r\n  const [showCreateGame, toggleShowCreateGame] = useState(false);\r\n\r\n  const updateGameRequest = async (outgoingUserId, incomingUserId, value) => {\r\n    try {\r\n      await firebase.updateUser(incomingUserId, \"requestsIncoming\", {\r\n        [outgoingUserId]: value\r\n      });\r\n      await firebase.updateUser(outgoingUserId, \"requestsOutgoing\", {\r\n        [incomingUserId]: value\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const joinGame = (gameType, gameId) => {\r\n    history.push(`/chess-world/${gameType}?game=${gameId}`);\r\n  };\r\n\r\n  const onCreateGameSubmit = async (settings, opponentId) => {\r\n    toggleShowCreateGame(false);\r\n    try {\r\n      await updateGameRequest(user.id, opponentId, {...settings});\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.root}>\r\n\r\n      {availableUsers.length > 0 && (\r\n        <div>\r\n          <h3>Users online</h3>\r\n          {availableUsers.map(availableUser => (\r\n            <div key={`challenge-${availableUser}`} className={styles.content}>\r\n              <p>{availableUser.name}</p>\r\n              {!showCreateGame && (\r\n                <ChallengeButton\r\n                  opponentId={availableUser.id}\r\n                  toggleShowCreateGame={toggleShowCreateGame}\r\n                  updateGameRequest={updateGameRequest}\r\n                  joinGame={joinGame}\r\n                />\r\n              )}\r\n              {showCreateGame && (\r\n                <CreateGame\r\n                  onSubmit={settings =>\r\n                    onCreateGameSubmit(settings, availableUser.id)\r\n                  }\r\n                  noHeader\r\n                  submitText=\"Click here to challenge\"\r\n                />\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChallengePlayer;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./InputForm.module.scss\";\r\n\r\nconst InputForm = ({\r\n  inputType,\r\n  placeholder,\r\n  autoComplete,\r\n  submit,\r\n  submitText,\r\n  validateInput,\r\n  label\r\n}) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const onChange = e => setInputValue(e.target.value);\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    submit(inputValue);\r\n    setInputValue(\"\");\r\n  };\r\n  return (\r\n    <form className={styles.root} onSubmit={onSubmit}>\r\n      {label && <label>{label}</label>}\r\n      <input\r\n        type={inputType}\r\n        onChange={onChange}\r\n        placeholder={placeholder}\r\n        value={inputValue}\r\n        autoComplete={autoComplete}\r\n      />\r\n      <input\r\n        className={styles.submit}\r\n        type=\"submit\"\r\n        value={submitText}\r\n        disabled={!validateInput(inputValue)}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nInputForm.defaultProps = {\r\n  validateInput: () => true\r\n};\r\n\r\nInputForm.propTypes = {\r\n  validateInput: PropTypes.func\r\n};\r\n\r\nexport default InputForm;\r\n","import React from \"react\";\r\nimport InputForm from \"components/input-form\";\r\nimport firebase from \"../../../firebase\";\r\n\r\nconst NameInput = ({ user, updateAvailableUser }) => {\r\n  const submitName = async name => {\r\n    try {\r\n      await firebase.setUser(user.id, \"name\", name);\r\n      await updateAvailableUser(user.id, true);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <InputForm\r\n        inputType=\"text\"\r\n        placeholder=\"Enter your nickname\"\r\n        submitText=\"Ok\"\r\n        submit={submitName}\r\n        validateInput={input => input.length > 0}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NameInput;\r\n","import React from \"react\";\r\nimport cx from \"classnames\";\r\nimport styles from \"./UserAvailability.module.scss\";\r\n\r\nconst UserAvailability = ({ user, userAvailable, updateAvailableUser }) => {\r\n  const toggleAvailability = async () => {\r\n    try {\r\n      await updateAvailableUser(user.id, userAvailable ? null : true);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p className={styles.message}>\r\n        Hello {user.name}! -{\" \"}\r\n        <span\r\n          className={cx({\r\n            [styles.available]: userAvailable,\r\n            [styles.unavailable]: !userAvailable\r\n          })}\r\n          onClick={toggleAvailability}\r\n        >\r\n          {userAvailable ? \"Available\" : \"Unavailable\"}\r\n        </span>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserAvailability;\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport Context from \"context\";\r\nimport firebase from \"../../firebase\";\r\nimport ChallengePlayer from \"components/dashboard-online/challenge-player\";\r\nimport NameInput from \"components/dashboard-online/name-input\";\r\n\r\nimport useAvailableUsers from \"hooks/useAvailableUsers\";\r\nimport UserAvailability from \"components/dashboard-online/user-availability\";\r\n\r\nconst DashboardOnline = ({ history }) => {\r\n  const { user } = useContext(Context);\r\n\r\n  const { userAvailable, updateAvailableUser } = useAvailableUsers(\r\n    user && user.id\r\n  );\r\n\r\n  const login = async () => {\r\n    try {\r\n      await firebase.login();\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!user) {\r\n      login();\r\n    }\r\n  }, [user]);\r\n\r\n  if (user) {\r\n    return (\r\n      <div>\r\n        <h3>Online play</h3>\r\n        {user.name && (\r\n          <UserAvailability\r\n            user={user}\r\n            userAvailable={userAvailable}\r\n            updateAvailableUser={updateAvailableUser}\r\n          />\r\n        )}\r\n        {!user.name && (\r\n          <NameInput user={user} updateAvailableUser={updateAvailableUser} />\r\n        )}\r\n        {user.name && userAvailable && <ChallengePlayer history={history} />}\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nexport default DashboardOnline;\r\n","import React, { useContext, useState } from \"react\";\r\n\r\nimport SelectGameMode from \"components/select-game-mode\";\r\nimport CreateGame from \"components/create-game\";\r\nimport { GAME_MODES } from \"utils/constants\";\r\nimport Context from \"context\";\r\nimport DashboardOnline from \"components/dashboard-online\";\r\n\r\nimport styles from \"./Dashboard.module.scss\";\r\n\r\nconst Dashboard = ({ history }) => {\r\n  const { gameSettings } = useContext(Context);\r\n  const { updateGameSettings } = gameSettings;\r\n  const [section, setSection] = useState(\"selectGameMode\");\r\n\r\n  const onGameModeClick = gameMode => {\r\n    updateGameSettings({ gameMode });\r\n    if (gameMode === GAME_MODES.ONLINE_PLAY.TECHNICAL_NAME) {\r\n      setSection(\"online\");\r\n    } else {\r\n      setSection(\"createGame\");\r\n    }\r\n  };\r\n\r\n  const onCreateGameSubmit = settings => {\r\n    updateGameSettings(settings);\r\n    history.push(`/chess-world/${settings.gameType}`);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.root}>\r\n      {section === \"selectGameMode\" && (\r\n        <SelectGameMode history={history} onGameModeClick={onGameModeClick} />\r\n      )}\r\n      {section === \"online\" && <DashboardOnline history={history} />}\r\n      {section === \"createGame\" && <CreateGame onSubmit={onCreateGameSubmit} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport cx from \"classnames\";\n\nimport styles from \"./Square.module.scss\";\n\nconst Square = memo(\n  ({ children, coords, handleOnClick, isGreen, isDraggingOver }) => {\n    const className = cx({\n      [styles.root]: true,\n      [styles.green]: isGreen,\n      [styles.highlighted]: isDraggingOver\n    });\n    return (\n      <div className={className} onClick={() => handleOnClick(coords)}>\n        {children}\n      </div>\n    );\n  }\n);\n\nSquare.defaultProps = {\n  handleOnClick: () => {}\n};\n\nSquare.propTypes = {\n  coords: PropTypes.string.isRequired,\n  handleOnClick: PropTypes.func\n};\n\nexport default Square;\n","import React, { useContext, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport cx from \"classnames\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport { getCoords, getSquareDetails } from \"utils/helpers\";\nimport Square from \"components/square\";\nimport styles from \"./Board.module.scss\";\nimport Context from \"context\";\nimport { GAME_MODES } from \"utils/constants\";\n\n// king on left for white\n// king on right for black\n\nconst Board = ({\n  board,\n  getSquaresChild,\n  onDragEnd,\n  turn,\n  users,\n  onSquareSelect\n}) => {\n  const { user, gameSettings } = useContext(Context);\n  const { gameMode } = gameSettings;\n  const [draggedPieceCoords, setDraggedPieceCoords] = useState(\"\");\n  const rows = [];\n  const isGreen = coords => {\n    const isEven = n => n % 2 === 0;\n    const evenRow = isEven(Number(coords[0]));\n    const evenSquare = isEven(Number(coords[1]));\n    return evenRow ? !evenSquare : evenSquare;\n  };\n\n  const isSquareDroppable = coords =>\n    getSquareDetails(coords, board).player === turn &&\n    coords !== draggedPieceCoords;\n\n  const onDragStart = a => {\n    setDraggedPieceCoords(a.source.droppableId);\n  };\n\n  const handleOnDragEnd = a => {\n    if (a.destination) {\n      onDragEnd(a);\n    }\n  };\n\n  board.forEach((row, rowIdx) => {\n    const squares = [];\n\n    row.forEach((square, squareIdx) => {\n      const coords = getCoords(rowIdx, squareIdx);\n      squares.push(\n        <Droppable\n          key={`square-${coords}`}\n          droppableId={coords}\n          isDropDisabled={isSquareDroppable(coords)}\n        >\n          {(provided, snapshot) => {\n            return (\n              <div ref={provided.innerRef} {...provided.droppableProps}>\n                <Square\n                  coords={coords}\n                  isGreen={isGreen(coords)}\n                  isDraggingOver={snapshot.isDraggingOver}\n                  handleOnClick={onSquareSelect}\n                >\n                  {getSquaresChild(square)}\n                </Square>\n              </div>\n            );\n          }}\n        </Droppable>\n      );\n    });\n    rows.push(squares);\n  });\n\n  function isIndicatorActive(baseline) {\n    if (users) {\n      const playerColor = users[user.id].color;\n      return baseline ? playerColor === turn : playerColor !== turn;\n    }\n    if (gameMode === GAME_MODES.ONE_PLAYER.TECHNICAL_NAME) {\n      return false;\n    }\n    if (gameMode === GAME_MODES.TWO_PLAYER.TECHNICAL_NAME) {\n      return baseline ? turn === \"white\" : turn === \"black\";\n    }\n  }\n\n  const topActive = isIndicatorActive();\n  const baselineActive = isIndicatorActive(true);\n  const indicatorClassname = baseline =>\n    cx({\n      [styles.indicator]: true,\n      [styles.active]: baseline ? baselineActive : topActive\n    });\n\n  return (\n    <DragDropContext onDragEnd={handleOnDragEnd} onDragStart={onDragStart}>\n      <div className={indicatorClassname()} />\n      <div\n        className={cx({\n          [styles.board]: true,\n          [styles.topActive]: topActive,\n          [styles.baselineActive]: baselineActive\n        })}\n      >\n        {rows}\n      </div>\n      <div className={indicatorClassname(true)} />\n    </DragDropContext>\n  );\n};\n\nBoard.defaultProps = {\n  onDragEnd: () => {},\n  onSquareSelect: () => {}\n};\n\nBoard.propTypes = {\n  board: PropTypes.array.isRequired,\n  boardWidth: PropTypes.number,\n  onDragEnd: PropTypes.func,\n  onSquareSelect: PropTypes.func\n};\n\nexport default Board;\n","import React, { memo } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome/index\";\nimport { Draggable } from \"react-beautiful-dnd\";\n\nimport styles from \"./Piece.module.scss\";\n\nexport const Piece = memo(({ id, icon, available, pieceColor, inCheck }) => {\n  const piece = (\n    <FontAwesomeIcon\n      className={styles.root}\n      icon={icon}\n      cursor={available ? \"pointer\" : \"cursor\"}\n      color={\n        pieceColor === \"white\"\n          ? inCheck\n            ? \"#d85656\"\n            : \"#c7c7c7\"\n          : inCheck\n          ? \"#560000\"\n          : \"black\"\n      }\n      size=\"2x\"\n    />\n  );\n  if (!available) {\n    return <div>{piece}</div>;\n  } else\n    return (\n      <Draggable isDragDisabled={!available} draggableId={id} index={0}>\n        {(provided, snapshot) => {\n          return (\n            <div\n              ref={provided.innerRef}\n              {...provided.draggableProps}\n              {...provided.dragHandleProps}\n            >\n              {piece}\n            </div>\n          );\n        }}\n      </Draggable>\n    );\n});\n","import React from \"react\";\r\nimport { Piece } from \"components/piece\";\r\nimport { getPieceProps } from \"utils/helpers\";\r\n\r\nimport styles from \"./Fallen.module.scss\";\r\n\r\nconst Fallen = ({ fallen }) => (\r\n  <div className={styles.root}>\r\n    {fallen.map(piece => (\r\n      <div key={`fallen-${piece.pieceId}`} className={styles.piece}>\r\n        <Piece\r\n          key={`fallen-${piece.pieceId}`}\r\n          icon={getPieceProps(piece.pieceId).icon}\r\n          player={piece.player}\r\n          pieceId={piece.pieceId}\r\n          pieceColor={piece.player}\r\n          isDraggable={false}\r\n        />\r\n      </div>\r\n    ))}\r\n  </div>\r\n);\r\nexport default Fallen;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport Board from \"components/board\";\r\nimport { Piece } from \"components/piece\";\r\nimport { getOpponent, getPieceProps, getUrlParam } from \"utils/helpers\";\r\nimport useGameState from \"hooks/useGameState\";\r\nimport Context from \"context\";\r\nimport { GAME_MODES } from \"utils/constants\";\r\nimport Fallen from \"components/fallen\";\r\n\r\nconst StandardChess = ({ history }) => {\r\n  const { user, gameSettings } = useContext(Context);\r\n  const { gameMode, setGameId } = gameSettings;\r\n  const gameId = getUrlParam(\"game\");\r\n  const userId = user && user.id;\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const {\r\n    gameState,\r\n    handlePerformMove,\r\n    performBotMove,\r\n    canMovePiece,\r\n    gameExists\r\n  } = useGameState({\r\n    gameMode,\r\n    userId,\r\n    gameId\r\n  });\r\n\r\n  const isOnePlayer = gameMode === GAME_MODES.ONE_PLAYER.TECHNICAL_NAME;\r\n  const isOnlinePlay = gameMode === GAME_MODES.ONLINE_PLAY.TECHNICAL_NAME;\r\n  const { board, turn, fallen, users, inCheck, inCheckmate } = gameState;\r\n\r\n  useEffect(() => {\r\n    if (gameId) {\r\n      setGameId(gameId);\r\n    }\r\n  }, [setGameId, gameId]);\r\n\r\n  useEffect(() => {\r\n    const handleNextTurn = () => {\r\n      if (isOnePlayer && turn === \"black\" && !inCheckmate) {\r\n        performBotMove();\r\n      }\r\n    };\r\n    handleNextTurn();\r\n    // eslint-disable-next-line\r\n  }, [turn]);\r\n\r\n  useEffect(() => {\r\n    const handleSetMessage = () => {\r\n      let message = \"\";\r\n      if (inCheck) {\r\n        message = `${turn} in check`;\r\n      }\r\n      if (inCheckmate) {\r\n        message = `Checkmate. ${turn} wins`;\r\n      }\r\n      setMessage(message);\r\n    };\r\n    handleSetMessage();\r\n  }, [turn, inCheck, inCheckmate]);\r\n\r\n  useEffect(() => {\r\n    console.log({ gameExists });\r\n    if (!gameExists) {\r\n      history.push(\"/chess-world\");\r\n    }\r\n  }, [gameExists, history]);\r\n\r\n  function onDrop(a) {\r\n    const sourceCoords = a.source.droppableId;\r\n    const destinationCoords = a.destination.droppableId;\r\n    handlePerformMove(sourceCoords, destinationCoords);\r\n  }\r\n\r\n  function getPiece(square) {\r\n    const { player, pieceId, inCheck } = square;\r\n    return square.pieceId ? (\r\n      <Piece\r\n        key={`${player}-${pieceId}`}\r\n        id={`${player}-${pieceId}`}\r\n        icon={getPieceProps(pieceId).icon}\r\n        pieceColor={player}\r\n        inCheck={inCheck}\r\n        available={canMovePiece(player)}\r\n      />\r\n    ) : null;\r\n  }\r\n\r\n  function getFallen(baseline) {\r\n    if (isOnlinePlay && users) {\r\n      const playerColor = users[userId].color;\r\n      return baseline ? fallen[getOpponent(playerColor)] : fallen[playerColor];\r\n    } else {\r\n      return baseline ? fallen.black : fallen.white;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>{message}</div>\r\n      <Fallen fallen={getFallen()} />\r\n      <Board\r\n        board={board}\r\n        getSquaresChild={getPiece}\r\n        onDragEnd={onDrop}\r\n        turn={turn}\r\n        users={users}\r\n      />\r\n      <Fallen fallen={getFallen(true)} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StandardChess;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport Board from \"components/board\";\r\nimport { Piece } from \"components/piece\";\r\nimport {\r\n  getOpponent,\r\n  getPieceProps,\r\n  getSquareDetails,\r\n  getUpdatedBoard,\r\n  getUpdatedFallen,\r\n  getUrlParam,\r\n  loopBoard,\r\n  mirrorBoard\r\n} from \"utils/helpers\";\r\nimport useGameState from \"hooks/useGameState\";\r\nimport Context from \"context\";\r\nimport { EMPTY_SQUARE, GAME_MODES } from \"utils/constants\";\r\nimport Fallen from \"components/fallen\";\r\nimport firebase from \"../../../firebase\";\r\nimport { decideBotMove, getBotMoves } from \"utils/onePlayerHelpers\";\r\n\r\nimport styles from \"./TrapdoorChess.module.scss\";\r\n\r\nconst TrapdoorChess = ({ history }) => {\r\n  const { user, gameSettings } = useContext(Context);\r\n  const { gameMode, trapdoorsAmount, setGameId } = gameSettings;\r\n  const gameId = getUrlParam(\"game\");\r\n  const userId = user && user.id;\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const {\r\n    gameState,\r\n    setGameState,\r\n    updateSquare,\r\n    updateBoard,\r\n    canMovePiece,\r\n    validateMove,\r\n    performMove,\r\n    gameExists\r\n  } = useGameState({\r\n    gameMode,\r\n    userId,\r\n    gameId\r\n  });\r\n\r\n  const isOnePlayer = gameMode === GAME_MODES.ONE_PLAYER.TECHNICAL_NAME;\r\n  const isOnlinePlay = gameMode === GAME_MODES.ONLINE_PLAY.TECHNICAL_NAME;\r\n  const { board, turn, fallen, users, inCheck, inCheckmate } = gameState;\r\n  const trapdoorsSet = countTrapdoors();\r\n  const trapdoorsLeft = trapdoorsAmount - trapdoorsSet;\r\n\r\n  useEffect(() => {\r\n    if (gameId) {\r\n      setGameId(gameId);\r\n    }\r\n  }, [gameId, setGameId]);\r\n\r\n  useEffect(() => {\r\n    const handleNextTurn = () => {\r\n      if (isOnePlayer && turn === \"black\" && !inCheckmate) {\r\n        const selectedMove = decideBotMove(getBotMoves(board));\r\n        const { source, destination } = selectedMove;\r\n        handleTrapdoor(source.coords, destination.coords);\r\n      }\r\n    };\r\n    handleNextTurn();\r\n    // eslint-disable-next-line\r\n  }, [turn]);\r\n\r\n  useEffect(() => {\r\n    const handleSetMessage = () => {\r\n      let message = \"\";\r\n      if (inCheck) {\r\n        message = `${turn} in check`;\r\n      }\r\n      if (inCheckmate) {\r\n        message = `Checkmate. ${turn} wins`;\r\n      }\r\n      if (trapdoorsLeft !== 0) {\r\n        message = `Set your trapdoors. ${trapdoorsLeft} left`;\r\n      }\r\n      setMessage(message);\r\n    };\r\n    handleSetMessage();\r\n  }, [inCheck, inCheckmate, trapdoorsAmount, turn, trapdoorsLeft]);\r\n\r\n  useEffect(() => {\r\n    const setBotTrapdoors = () => {\r\n      const emptySquares = [];\r\n      const trapdoorCoords = [];\r\n      let newBoard = board;\r\n      loopBoard(\r\n        board,\r\n        ({ square, coords }) => !square.pieceId && emptySquares.push(coords)\r\n      );\r\n      while (trapdoorCoords.length < trapdoorsAmount) {\r\n        const randomIndex = Math.floor(Math.random() * emptySquares.length);\r\n        const coords = emptySquares[randomIndex];\r\n        if (!trapdoorCoords.includes(coords)) {\r\n          trapdoorCoords.push(coords);\r\n        }\r\n      }\r\n      trapdoorCoords.forEach(coords => {\r\n        coords.toString();\r\n        const square = getSquareDetails(coords, board);\r\n        newBoard = getUpdatedBoard(newBoard, coords, {\r\n          ...square,\r\n          trapdoor: { ...square.trapdoor, black: true }\r\n        });\r\n      });\r\n      updateBoard(newBoard);\r\n    };\r\n    if (isOnePlayer && trapdoorsAmount === 0) {\r\n      setBotTrapdoors();\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [isOnePlayer]);\r\n\r\n  useEffect(() => {\r\n    console.log({ gameExists });\r\n    if (!gameExists) {\r\n      history.push(\"/chess-world\");\r\n    }\r\n  }, [gameExists, history]);\r\n\r\n  function onDrop(move) {\r\n    const sourceCoords = move.source.droppableId;\r\n    const destinationCoords = move.destination.droppableId;\r\n    if (validateMove(sourceCoords, destinationCoords)) {\r\n      handleTrapdoor(sourceCoords, destinationCoords);\r\n    }\r\n  }\r\n\r\n  function handleTrapdoor(sourceCoords, destinationCoords) {\r\n    const square = getSquareDetails(destinationCoords, board);\r\n    if (square.trapdoor) {\r\n      handleFallenInTrapdoor(sourceCoords);\r\n    } else {\r\n      performMove(sourceCoords, destinationCoords);\r\n    }\r\n  }\r\n\r\n  function handleFallenInTrapdoor(sourceCoords) {\r\n    const updatedBoard = getUpdatedBoard(board, sourceCoords, EMPTY_SQUARE);\r\n    const updatedFallen = getUpdatedFallen(\r\n      getSquareDetails(sourceCoords, board),\r\n      gameState.fallen\r\n    );\r\n    const sharedState = {\r\n      turn: getOpponent(turn),\r\n      fallen: updatedFallen\r\n    };\r\n    if (isOnePlayer) {\r\n      setGameState({ ...gameState, ...sharedState, board: updatedBoard });\r\n    }\r\n    if (isOnlinePlay) {\r\n      firebase.updateGame(gameId, {\r\n        ...sharedState,\r\n        board:\r\n          users[userId].color === \"black\"\r\n            ? mirrorBoard(updatedBoard)\r\n            : updatedBoard\r\n      });\r\n    }\r\n  }\r\n\r\n  function getSquare(square) {\r\n    const { player, pieceId, trapdoor } = square;\r\n    const piece = pieceId && (\r\n      <Piece\r\n        key={`${player}-${pieceId}`}\r\n        id={`${player}-${pieceId}`}\r\n        icon={getPieceProps(pieceId).icon}\r\n        pieceColor={player}\r\n        available={trapdoorsLeft === 0 && canMovePiece(player)}\r\n      />\r\n    );\r\n    if (trapdoor && trapdoor[getPlayerColor()]) {\r\n      return <div className={styles.trapdoor}>{square.pieceId && piece}</div>;\r\n    }\r\n    return piece || null;\r\n  }\r\n\r\n  function countTrapdoors() {\r\n    const playerColor = getPlayerColor();\r\n    let count = 0;\r\n    loopBoard(board, ({ square }) => {\r\n      if (square.trapdoor && square.trapdoor[playerColor]) {\r\n        count++;\r\n      }\r\n    });\r\n    return count;\r\n  }\r\n\r\n  function setTrapdoor(coords) {\r\n    if (trapdoorsLeft !== 0) {\r\n      const square = getSquareDetails(coords, board);\r\n      if (square.pieceId) {\r\n        return;\r\n      }\r\n      updateSquare(coords, {\r\n        ...square,\r\n        trapdoor: { ...square.trapdoor, [getPlayerColor()]: true }\r\n      });\r\n    }\r\n  }\r\n\r\n  function getPlayerColor() {\r\n    if (isOnlinePlay && gameState.users) {\r\n      return gameState.users[userId].color;\r\n    }\r\n    if (isOnePlayer) {\r\n      return \"white\";\r\n    }\r\n  }\r\n\r\n  function getFallen(baseline) {\r\n    if (isOnlinePlay && users) {\r\n      const playerColor = users[userId].color;\r\n      return baseline ? fallen[getOpponent(playerColor)] : fallen[playerColor];\r\n    } else {\r\n      return baseline ? fallen.black : fallen.white;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={styles.root}>\r\n      <h4>{message}</h4>\r\n      <Fallen fallen={getFallen()} />\r\n      <Board\r\n        board={board}\r\n        getSquaresChild={getSquare}\r\n        onDragEnd={onDrop}\r\n        turn={turn}\r\n        users={users}\r\n        onSquareSelect={setTrapdoor}\r\n      />\r\n      <Fallen fallen={getFallen(true)} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrapdoorChess;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport DashboardButton from \"components/dashboard-button\";\r\n\r\nimport styles from \"./TriviaBox.module.scss\";\r\n\r\nconst TriviaBox = ({\r\n  difficulty,\r\n  categoryId,\r\n  onAnswerCorrect,\r\n  onAnswerIncorrect\r\n}) => {\r\n  const [trivia, setTrivia] = useState({});\r\n  const [options, setOptions] = useState([]);\r\n  const [answer, setAnswer] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const getQuestion = () => {\r\n      fetch(\r\n        `https://opentdb.com/api.php?amount=10&type=multiple&difficulty=${difficulty}&category=${categoryId}&amount=1`,\r\n        {\r\n          method: \"GET\"\r\n        }\r\n      )\r\n        .then(res => res.json())\r\n        .then(response => setTrivia(response.results[0]))\r\n        .catch(err => console.log(err));\r\n    };\r\n    getQuestion();\r\n  }, [difficulty, categoryId]);\r\n\r\n  useEffect(() => {\r\n    const getMixedOptions = () => {\r\n      const randomIndex = Math.floor(\r\n        Math.random() * trivia.incorrect_answers.length + 1\r\n      );\r\n      let options = [...trivia.incorrect_answers];\r\n      options.splice(randomIndex, 0, trivia.correct_answer);\r\n      setOptions(options);\r\n    };\r\n    if (trivia.question) {\r\n      getMixedOptions();\r\n    }\r\n  }, [trivia]);\r\n\r\n  useEffect(() => {\r\n    const handleAnswerQuestion = () => {\r\n      console.log(\"handleAnswerQuestion\")\r\n      const answeredCorrect = answer === trivia.correct_answer;\r\n      setTimeout(() => {\r\n        if (answeredCorrect) {\r\n          onAnswerCorrect();\r\n        } else {\r\n          onAnswerIncorrect();\r\n        }\r\n      }, 1500);\r\n    };\r\n    if (answer) {\r\n      handleAnswerQuestion();\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [answer]);\r\n\r\n  const getOptionType = (option) => {\r\n    if (answer) {\r\n      return option === trivia.correct_answer ? \"accept\" : \"error\";\r\n    }\r\n    return \"default\";\r\n  }\r\n\r\n  if (trivia.question) {\r\n    return (\r\n      <div className={styles.root}>\r\n        <div\r\n          className={styles.question}\r\n          dangerouslySetInnerHTML={{ __html: trivia.question }}\r\n        />\r\n        {options.map((option, i) => (\r\n          <DashboardButton\r\n            key={i}\r\n            displayText={option}\r\n            onClick={() => !answer && setAnswer(option)}\r\n            fullLength\r\n            spaceBottom\r\n            useHtml\r\n            type={getOptionType(option)}\r\n            notAvailable={answer}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nTriviaBox.defaultProps = {\r\n  difficulty: \"easy\",\r\n  categoryId: 9\r\n};\r\n\r\nTriviaBox.propTypes = {\r\n  difficulty: PropTypes.string,\r\n  categoryId: PropTypes.number\r\n};\r\n\r\nexport default TriviaBox;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport Board from \"components/board\";\r\nimport { Piece } from \"components/piece\";\r\nimport {\r\n  getOpponent,\r\n  getPieceProps,\r\n  getSquareDetails,\r\n  getUrlParam\r\n} from \"utils/helpers\";\r\nimport useGameState from \"hooks/useGameState\";\r\nimport Context from \"context\";\r\nimport { GAME_MODES } from \"utils/constants\";\r\nimport Fallen from \"components/fallen\";\r\nimport TriviaBox from \"components/trivia-box\";\r\nimport { decideBotMove, getBotMoves } from \"utils/onePlayerHelpers\";\r\n\r\nconst TriviaChess = ({ history }) => {\r\n  const { user, gameSettings } = useContext(Context);\r\n  const { gameMode, setGameId } = gameSettings;\r\n  const gameId = getUrlParam(\"game\");\r\n  const userId = user && user.id;\r\n  const [message, setMessage] = useState(\"\");\r\n  const [pendingMove, setPendingMove] = useState(null);\r\n\r\n  const {\r\n    gameState,\r\n    canMovePiece,\r\n    gameExists,\r\n    validateMove,\r\n    performMove,\r\n    switchTurns,\r\n    handlePerformMove\r\n  } = useGameState({\r\n    gameMode,\r\n    userId,\r\n    gameId\r\n  });\r\n\r\n  const isOnePlayer = gameMode === GAME_MODES.ONE_PLAYER.TECHNICAL_NAME;\r\n  const isOnlinePlay = gameMode === GAME_MODES.ONLINE_PLAY.TECHNICAL_NAME;\r\n  const { board, turn, fallen, users, inCheck, inCheckmate } = gameState;\r\n\r\n  useEffect(() => {\r\n    if (gameId) {\r\n      setGameId(gameId);\r\n    }\r\n  }, [setGameId, gameId]);\r\n\r\n  useEffect(() => {\r\n    const handleNextTurn = () => {\r\n      if (isOnePlayer && turn === \"black\" && !inCheckmate && !pendingMove) {\r\n        const selectedMove = decideBotMove(getBotMoves(board));\r\n        const { source, destination } = selectedMove;\r\n        const sourceCoords = source.coords;\r\n        const destinationCoords = destination.coords;\r\n        if (getSquareDetails(destinationCoords, board).pieceId) {\r\n          setPendingMove({ sourceCoords, destinationCoords });\r\n        } else {\r\n          performMove(sourceCoords, destinationCoords);\r\n        }\r\n      }\r\n    };\r\n\r\n    handleNextTurn();\r\n    // eslint-disable-next-line\r\n  }, [turn, pendingMove]);\r\n\r\n  useEffect(() => {\r\n    const handleSetMessage = () => {\r\n      let message = \"\";\r\n      if (inCheck) {\r\n        message = `${turn} in check`;\r\n      }\r\n      if (inCheckmate) {\r\n        message = `Checkmate. ${turn} wins`;\r\n      }\r\n      setMessage(message);\r\n    };\r\n    handleSetMessage();\r\n  }, [turn, inCheck, inCheckmate]);\r\n\r\n  useEffect(() => {\r\n    if (!gameExists) {\r\n      history.push(\"/chess-world/dashboard\");\r\n    }\r\n  }, [gameExists, history]);\r\n\r\n  function onDrop(move) {\r\n    const sourceCoords = move.source.droppableId;\r\n    const destinationCoords = move.destination.droppableId;\r\n    if (validateMove(sourceCoords, destinationCoords)) {\r\n      if (getSquareDetails(destinationCoords, board).pieceId) {\r\n        setPendingMove({ sourceCoords, destinationCoords });\r\n      } else {\r\n        handlePerformMove(sourceCoords, destinationCoords);\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleAnswer(correct) {\r\n    const { sourceCoords, destinationCoords } = pendingMove;\r\n    if (isOnePlayer && turn === \"black\") {\r\n      if (correct) {\r\n        switchTurns();\r\n      } else {\r\n        performMove(sourceCoords, destinationCoords);\r\n      }\r\n    } else {\r\n      if (correct) {\r\n        performMove(sourceCoords, destinationCoords);\r\n      } else {\r\n        switchTurns();\r\n      }\r\n    }\r\n    setPendingMove(null);\r\n  }\r\n\r\n  function getPiece(square) {\r\n    const { player, pieceId, inCheck } = square;\r\n    return square.pieceId ? (\r\n      <Piece\r\n        key={`${player}-${pieceId}`}\r\n        id={`${player}-${pieceId}`}\r\n        icon={getPieceProps(pieceId).icon}\r\n        pieceColor={player}\r\n        inCheck={inCheck}\r\n        available={canMovePiece(player)}\r\n      />\r\n    ) : null;\r\n  }\r\n\r\n  function getFallen(baseline) {\r\n    if (isOnlinePlay && users) {\r\n      const playerColor = users[userId].color;\r\n      return baseline ? fallen[getOpponent(playerColor)] : fallen[playerColor];\r\n    } else {\r\n      return baseline ? fallen.black : fallen.white;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>{message}</div>\r\n      <Fallen fallen={getFallen()} />\r\n      <Board\r\n        board={board}\r\n        getSquaresChild={getPiece}\r\n        onDragEnd={onDrop}\r\n        turn={turn}\r\n        users={users}\r\n      />\r\n      <Fallen fallen={getFallen(true)} />\r\n      {pendingMove && (\r\n        <TriviaBox\r\n          onAnswerCorrect={() => handleAnswer(true)}\r\n          onAnswerIncorrect={() => handleAnswer(false)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TriviaChess;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport styles from \"./Header.module.scss\";\r\n\r\nconst Header = () => (\r\n  <header className={styles.root}>\r\n    <NavLink to=\"/chess-world/dashboard\">\r\n      <h3>Chess World</h3>\r\n    </NavLink>\r\n\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import { useState, useEffect } from \"react\";\r\nimport firebase from \"../firebase\";\r\n\r\nconst useUser = () => {\r\n  const [user, setUser] = useState(null);\r\n\r\n  useEffect(() => {\r\n    firebase.auth().onAuthStateChanged(user => {\r\n      if (user) {\r\n        firebase.database\r\n          .ref(`users/${user.uid}`)\r\n          .on(\"value\", snapshot =>\r\n            setUser({ id: user.uid, ...snapshot.val() })\r\n          );\r\n      } else {\r\n        setUser(null);\r\n      }\r\n    });\r\n  }, []);\r\n  return user;\r\n};\r\n\r\nexport default useUser;\r\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\n\nimport Dashboard from \"components/dashboard\";\nimport StandardChess from \"components/game-types/standard\";\nimport TrapdoorChess from \"components/game-types/trapdoor\";\nimport TriviaChess from \"components/game-types/trivia\";\nimport Header from \"components/header\";\nimport useGameSettings from \"hooks/useGameSettings\";\nimport useUser from \"hooks/useUser\";\nimport Context from \"context\";\n\nimport styles from \"./App.module.scss\";\n\nconst App = () => {\n  const gameSettings = useGameSettings();\n  const user = useUser();\n  return (\n    <BrowserRouter>\n      <Context.Provider value={{ gameSettings, user }}>\n        <div className={styles.root}>\n          <Header />\n          <Switch>\n            <Route exact path=\"/chess-world\" render={() => <Redirect to=\"/chess-world/dashboard\" />} />\n            <Route path=\"/chess-world/dashboard\" component={Dashboard} />\n            <Route path=\"/chess-world/standard\" component={StandardChess} />\n            <Route path=\"/chess-world/trapdoor\" component={TrapdoorChess} />\n            <Route path=\"/chess-world/trivia\" component={TriviaChess} />\n          </Switch>\n        </div>\n      </Context.Provider>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/app/index.js\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./styles/styles.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"Board_board__VI41k\",\"topActive\":\"Board_topActive__1tXhL\",\"baselineActive\":\"Board_baselineActive__1z51G\",\"indicator\":\"Board_indicator__21jle\",\"active\":\"Board_active__2kUJI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"UserAvailability_message__vGWFx\",\"available\":\"UserAvailability_available__wV27I\",\"unavailable\":\"UserAvailability_unavailable__1asah\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Square_root__1usdT\",\"green\":\"Square_green__2D9iu\",\"highlighted\":\"Square_highlighted__pzRZ4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"SelectGameMode_root__2sxIw\",\"selects\":\"SelectGameMode_selects__3jQmA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"CreateGame_root__dpDbY\",\"trapdoors\":\"CreateGame_trapdoors__3Ba-E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ChallengePlayer_root__3BMVV\",\"content\":\"ChallengePlayer_content__2cRob\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"InputForm_root__2TkZV\",\"submit\":\"InputForm_submit__3reta\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Fallen_root__2_rMR\",\"piece\":\"Fallen_piece__3QaxV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TrapdoorChess_root__3wGcc\",\"trapdoor\":\"TrapdoorChess_trapdoor__2-7GT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TriviaBox_root__1gamZ\",\"question\":\"TriviaBox_question__11Ode\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"SelectGameType_root__2ucn_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Dashboard_root__2zfaS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Piece_root__3FxB5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Header_root__11Phv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"App_root__11l45\"};"],"sourceRoot":""}